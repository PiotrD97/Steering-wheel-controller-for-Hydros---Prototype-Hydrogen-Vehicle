
steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08008e08  08008e08  00018e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009250  08009250  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009250  08009250  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009250  08009250  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009254  08009254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001dc  08009434  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08009434  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139f9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034e5  00000000  00000000  00033c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  000370f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec0  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d81a  00000000  00000000  00039048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013bb4  00000000  00000000  00056862  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7bf5  00000000  00000000  0006a416  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011200b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  00112088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008df0 	.word	0x08008df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008df0 	.word	0x08008df0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <MX_CRC_Init+0x4c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_CRC_Init+0x48>)
 8000bde:	f000 fdd1 	bl	8001784 <HAL_CRC_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_CRC_Init+0x44>
  {
    Error_Handler();
 8000be8:	f000 f94b 	bl	8000e82 <Error_Handler>
  }

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000274 	.word	0x20000274
 8000bf4:	40023000 	.word	0x40023000

08000bf8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_CRC_MspInit+0x38>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d10b      	bne.n	8000c22 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_CRC_MspInit+0x3c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <HAL_CRC_MspInit+0x3c>)
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_CRC_MspInit+0x3c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023000 	.word	0x40023000
 8000c34:	40021000 	.word	0x40021000

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_DMA_Init+0x48>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <MX_DMA_Init+0x48>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <MX_DMA_Init+0x48>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2102      	movs	r1, #2
 8000c5a:	200e      	movs	r0, #14
 8000c5c:	f000 fd5b 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c60:	200e      	movs	r0, #14
 8000c62:	f000 fd74 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f000 fd53 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c70:	2010      	movs	r0, #16
 8000c72:	f000 fd6c 	bl	800174e <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG_Pin|LED_STS_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2181      	movs	r1, #129	; 0x81
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f001 faeb 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_NUCLEO_GPIO_Port, LED_NUCLEO_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2108      	movs	r1, #8
 8000cda:	4820      	ldr	r0, [pc, #128]	; (8000d5c <MX_GPIO_Init+0xd8>)
 8000cdc:	f001 fae6 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DBG_Pin|LED_STS_Pin;
 8000ce0:	2381      	movs	r3, #129	; 0x81
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f001 f94d 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MODE_1_BUTTON_Pin|FULL_GAS_BUTTON_Pin|SC_CLOSE_BUTTON_Pin|FUELCELL_RACE_MODE_BUTTON_Pin
 8000cfe:	f641 1312 	movw	r3, #6418	; 0x1912
 8000d02:	60fb      	str	r3, [r7, #12]
                          |HALF_GAS_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f001 f93f 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = HORN_BUTTON_Pin|MODE_2_BUTTON_Pin|FUELCELL_OFF_MODE_BUTTON_Pin|FUELCELL_PREPARETORACE_MODE_BUTTON_Pin
 8000d1a:	23f3      	movs	r3, #243	; 0xf3
 8000d1c:	60fb      	str	r3, [r7, #12]
                          |SUPPLY_BUTTON_Pin|SPEED_RESET_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <MX_GPIO_Init+0xd8>)
 8000d2e:	f001 f933 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_NUCLEO_Pin;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_NUCLEO_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_GPIO_Init+0xd8>)
 8000d4a:	f001 f925 	bl	8001f98 <HAL_GPIO_Init>

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_IWDG_Init+0x34>)
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <MX_IWDG_Init+0x38>)
 8000d68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_IWDG_Init+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 1500;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_IWDG_Init+0x34>)
 8000d72:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d76:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1500;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_IWDG_Init+0x34>)
 8000d7a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d7e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_IWDG_Init+0x34>)
 8000d82:	f001 fac5 	bl	8002310 <HAL_IWDG_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000d8c:	f000 f879 	bl	8000e82 <Error_Handler>
  }

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000298 	.word	0x20000298
 8000d98:	40003000 	.word	0x40003000

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f000 fb78 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f813 	bl	8000dce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f7ff ff6c 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dac:	f7ff ff44 	bl	8000c38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000db0:	f000 f9f8 	bl	80011a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000db4:	f000 fa30 	bl	8001218 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000db8:	f7ff ffd2 	bl	8000d60 <MX_IWDG_Init>
  MX_CRC_Init();
 8000dbc:	f7ff fef4 	bl	8000ba8 <MX_CRC_Init>
  MX_TIM6_Init();
 8000dc0:	f000 f942 	bl	8001048 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000dc4:	f000 f976 	bl	80010b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  hydrogreen_main();
 8000dc8:	f004 fb48 	bl	800545c <hydrogreen_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x30>

08000dce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b096      	sub	sp, #88	; 0x58
 8000dd2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd8:	2228      	movs	r2, #40	; 0x28
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 ffc3 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e02:	230a      	movs	r3, #10
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e16:	2300      	movs	r3, #0
 8000e18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fac9 	bl	80023bc <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e30:	f000 f827 	bl	8000e82 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 f9bb 	bl	80031cc <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e5c:	f000 f811 	bl	8000e82 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fbe4 	bl	8003638 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e76:	f000 f804 	bl	8000e82 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3758      	adds	r7, #88	; 0x58
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  hydrogreen_hardFault();
 8000e86:	f004 fb0b 	bl	80054a0 <hydrogreen_hardFault>
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f000 fc1a 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_Callback();
 8000f2c:	f005 fdea 	bl	8006b04 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 faf6 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA1_Channel4_IRQHandler+0x10>)
 8000f3e:	f000 ff3a 	bl	8001db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000384 	.word	0x20000384

08000f4c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA1_Channel6_IRQHandler+0x10>)
 8000f52:	f000 ff30 	bl	8001db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000340 	.word	0x20000340

08000f60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <USART1_IRQHandler+0x10>)
 8000f66:	f003 f92b 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200003c8 	.word	0x200003c8

08000f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <USART2_IRQHandler+0x10>)
 8000f7a:	f003 f921 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000044c 	.word	0x2000044c

08000f88 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM6_DAC1_IRQHandler+0x10>)
 8000f8e:	f002 fd2d 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200002a8 	.word	0x200002a8

08000f9c <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM7_DAC2_IRQHandler+0x10>)
 8000fa2:	f002 fd23 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002f4 	.word	0x200002f4

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f005 fe98 	bl	8006d14 <__errno>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20003000 	.word	0x20003000
 8001010:	00000400 	.word	0x00000400
 8001014:	200001f8 	.word	0x200001f8
 8001018:	20000590 	.word	0x20000590

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <SystemInit+0x28>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <SystemInit+0x28>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SystemInit+0x28>)
 8001032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001036:	609a      	str	r2, [r3, #8]
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_TIM6_Init+0x64>)
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_TIM6_Init+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (64-1);
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_TIM6_Init+0x64>)
 8001060:	223f      	movs	r2, #63	; 0x3f
 8001062:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_TIM6_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (100-1);
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_TIM6_Init+0x64>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_TIM6_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_TIM6_Init+0x64>)
 8001078:	f002 fc04 	bl	8003884 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001082:	f7ff fefe 	bl	8000e82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM6_Init+0x64>)
 8001094:	f002 fe6a 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800109e:	f7ff fef0 	bl	8000e82 <Error_Handler>
  }

}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200002a8 	.word	0x200002a8
 80010b0:	40001000 	.word	0x40001000

080010b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_TIM7_Init+0x64>)
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <MX_TIM7_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_TIM7_Init+0x64>)
 80010cc:	223f      	movs	r2, #63	; 0x3f
 80010ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_TIM7_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_TIM7_Init+0x64>)
 80010d8:	2209      	movs	r2, #9
 80010da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_TIM7_Init+0x64>)
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_TIM7_Init+0x64>)
 80010e4:	f002 fbce 	bl	8003884 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80010ee:	f7ff fec8 	bl	8000e82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <MX_TIM7_Init+0x64>)
 8001100:	f002 fe34 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800110a:	f7ff feba 	bl	8000e82 <Error_Handler>
  }

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200002f4 	.word	0x200002f4
 800111c:	40001400 	.word	0x40001400

08001120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_TIM_Base_MspInit+0x78>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d114      	bne.n	800115c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_TIM_Base_MspInit+0x7c>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_TIM_Base_MspInit+0x7c>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_TIM_Base_MspInit+0x7c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	2101      	movs	r1, #1
 800114e:	2036      	movs	r0, #54	; 0x36
 8001150:	f000 fae1 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001154:	2036      	movs	r0, #54	; 0x36
 8001156:	f000 fafa 	bl	800174e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800115a:	e018      	b.n	800118e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_TIM_Base_MspInit+0x80>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d113      	bne.n	800118e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_TIM_Base_MspInit+0x7c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_TIM_Base_MspInit+0x7c>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_TIM_Base_MspInit+0x7c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 3, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2103      	movs	r1, #3
 8001182:	2037      	movs	r0, #55	; 0x37
 8001184:	f000 fac7 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001188:	2037      	movs	r0, #55	; 0x37
 800118a:	f000 fae0 	bl	800174e <HAL_NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40001000 	.word	0x40001000
 800119c:	40021000 	.word	0x40021000
 80011a0:	40001400 	.word	0x40001400

080011a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011aa:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <MX_USART1_UART_Init+0x70>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011b0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80011b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART1_UART_Init+0x6c>)
 80011fc:	f002 fe42 	bl	8003e84 <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001206:	f7ff fe3c 	bl	8000e82 <Error_Handler>
  }

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200003c8 	.word	0x200003c8
 8001214:	40013800 	.word	0x40013800

08001218 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <MX_USART2_UART_Init+0x70>)
 8001220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001224:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 800124a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800124e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001256:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x6c>)
 8001270:	f002 fe08 	bl	8003e84 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x66>
  {
    Error_Handler();
 800127a:	f7ff fe02 	bl	8000e82 <Error_Handler>
  }

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000044c 	.word	0x2000044c
 8001288:	40004400 	.word	0x40004400

0800128c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5e      	ldr	r2, [pc, #376]	; (8001424 <HAL_UART_MspInit+0x198>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d158      	bne.n	8001360 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ae:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a5d      	ldr	r2, [pc, #372]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b5b      	ldr	r3, [pc, #364]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b58      	ldr	r3, [pc, #352]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a57      	ldr	r2, [pc, #348]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b55      	ldr	r3, [pc, #340]	; (8001428 <HAL_UART_MspInit+0x19c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LCD_TX_Pin|LCD_RX_Pin;
 80012de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f0:	2307      	movs	r3, #7
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fe4b 	bl	8001f98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001302:	4b4a      	ldr	r3, [pc, #296]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <HAL_UART_MspInit+0x1a4>)
 8001306:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <HAL_UART_MspInit+0x1a0>)
 800130a:	2210      	movs	r2, #16
 800130c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <HAL_UART_MspInit+0x1a0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001320:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_UART_MspInit+0x1a0>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001332:	483e      	ldr	r0, [pc, #248]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001334:	f000 fc22 	bl	8001b7c <HAL_DMA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800133e:	f7ff fda0 	bl	8000e82 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a39      	ldr	r2, [pc, #228]	; (800142c <HAL_UART_MspInit+0x1a0>)
 8001346:	66da      	str	r2, [r3, #108]	; 0x6c
 8001348:	4a38      	ldr	r2, [pc, #224]	; (800142c <HAL_UART_MspInit+0x1a0>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2102      	movs	r1, #2
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f000 f9df 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001358:	2025      	movs	r0, #37	; 0x25
 800135a:	f000 f9f8 	bl	800174e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800135e:	e05c      	b.n	800141a <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a33      	ldr	r2, [pc, #204]	; (8001434 <HAL_UART_MspInit+0x1a8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d157      	bne.n	800141a <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_UART_MspInit+0x19c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <HAL_UART_MspInit+0x19c>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <HAL_UART_MspInit+0x19c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_UART_MspInit+0x19c>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <HAL_UART_MspInit+0x19c>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_UART_MspInit+0x19c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_NUCLEO_TX_Pin|RS485_NUCLEO_RX_Pin;
 800139a:	230c      	movs	r3, #12
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f000 fdee 	bl	8001f98 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_UART_MspInit+0x1b0>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013ee:	4812      	ldr	r0, [pc, #72]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 80013f0:	f000 fbc4 	bl	8001b7c <HAL_DMA_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_UART_MspInit+0x172>
      Error_Handler();
 80013fa:	f7ff fd42 	bl	8000e82 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 8001402:	671a      	str	r2, [r3, #112]	; 0x70
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_UART_MspInit+0x1ac>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	2026      	movs	r0, #38	; 0x26
 8001410:	f000 f981 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001414:	2026      	movs	r0, #38	; 0x26
 8001416:	f000 f99a 	bl	800174e <HAL_NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	; 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40013800 	.word	0x40013800
 8001428:	40021000 	.word	0x40021000
 800142c:	20000384 	.word	0x20000384
 8001430:	40020044 	.word	0x40020044
 8001434:	40004400 	.word	0x40004400
 8001438:	20000340 	.word	0x20000340
 800143c:	4002006c 	.word	0x4002006c

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001446:	e003      	b.n	8001450 <LoopCopyDataInit>

08001448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800144a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800144c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800144e:	3104      	adds	r1, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001458:	d3f6      	bcc.n	8001448 <CopyDataInit>
	ldr	r2, =_sbss
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <LoopForever+0x12>)
	b	LoopFillZerobss
 800145c:	e002      	b.n	8001464 <LoopFillZerobss>

0800145e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800145e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001460:	f842 3b04 	str.w	r3, [r2], #4

08001464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <LoopForever+0x16>)
	cmp	r2, r3
 8001466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001468:	d3f9      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146a:	f7ff fdd7 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f005 fc57 	bl	8006d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff fc93 	bl	8000d9c <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001478:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800147c:	08009258 	.word	0x08009258
	ldr	r0, =_sdata
 8001480:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001484:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001488:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 800148c:	20000590 	.word	0x20000590

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f92b 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fcee 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f943 	bl	800176a <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f90b 	bl	8001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	200004d0 	.word	0x200004d0

08001548 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;  
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200004d0 	.word	0x200004d0

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff3e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff8e 	bl	8001654 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff31 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e054      	b.n	8001840 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7f5b      	ldrb	r3, [r3, #29]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fa26 	bl	8000bf8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_CRC_Init+0xc4>)
 80017c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0218 	bic.w	r2, r2, #24
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	e00c      	b.n	80017ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	461a      	mov	r2, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f946 	bl	8001a70 <HAL_CRCEx_Polynomial_Set>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e028      	b.n	8001840 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	795b      	ldrb	r3, [r3, #5]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	e004      	b.n	800180c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6912      	ldr	r2, [r2, #16]
 800180a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	04c11db7 	.word	0x04c11db7

0800184c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2202      	movs	r2, #2
 8001860:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d022      	beq.n	80018c0 <HAL_CRC_Calculate+0x74>
 800187a:	2b03      	cmp	r3, #3
 800187c:	d002      	beq.n	8001884 <HAL_CRC_Calculate+0x38>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d017      	beq.n	80018b2 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001882:	e024      	b.n	80018ce <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3f0      	bcc.n	800188a <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      break;
 80018b0:	e00d      	b.n	80018ce <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f811 	bl	80018de <CRC_Handle_8>
 80018bc:	6138      	str	r0, [r7, #16]
      break;
 80018be:	e006      	b.n	80018ce <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f898 	bl	80019fa <CRC_Handle_16>
 80018ca:	6138      	str	r0, [r7, #16]
      break;
 80018cc:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80018d4:	693b      	ldr	r3, [r7, #16]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80018de:	b480      	push	{r7}
 80018e0:	b089      	sub	sp, #36	; 0x24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e023      	b.n	8001938 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	3301      	adds	r3, #1
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	440b      	add	r3, r1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800190a:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	440b      	add	r3, r1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800191a:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	3303      	adds	r3, #3
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	440b      	add	r3, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800192e:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3d6      	bcc.n	80018f0 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d04d      	beq.n	80019e8 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	4413      	add	r3, r2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d116      	bne.n	800199e <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b21a      	sxth	r2, r3
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	3301      	adds	r3, #1
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	440b      	add	r3, r1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21b      	sxth	r3, r3
 8001990:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	8b7a      	ldrh	r2, [r7, #26]
 800199c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d11f      	bne.n	80019e8 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	3301      	adds	r3, #1
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	440b      	add	r3, r1
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	8b7a      	ldrh	r2, [r7, #26]
 80019d4:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	4413      	add	r3, r2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b087      	sub	sp, #28
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e013      	b.n	8001a34 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	4413      	add	r3, r2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	440b      	add	r3, r1
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3e6      	bcc.n	8001a0c <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a80:	231f      	movs	r3, #31
 8001a82:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a84:	bf00      	nop
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	613a      	str	r2, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b18      	cmp	r3, #24
 8001aa8:	d846      	bhi.n	8001b38 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001b3f 	.word	0x08001b3f
 8001ab4:	08001b39 	.word	0x08001b39
 8001ab8:	08001b39 	.word	0x08001b39
 8001abc:	08001b39 	.word	0x08001b39
 8001ac0:	08001b39 	.word	0x08001b39
 8001ac4:	08001b39 	.word	0x08001b39
 8001ac8:	08001b39 	.word	0x08001b39
 8001acc:	08001b39 	.word	0x08001b39
 8001ad0:	08001b2d 	.word	0x08001b2d
 8001ad4:	08001b39 	.word	0x08001b39
 8001ad8:	08001b39 	.word	0x08001b39
 8001adc:	08001b39 	.word	0x08001b39
 8001ae0:	08001b39 	.word	0x08001b39
 8001ae4:	08001b39 	.word	0x08001b39
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001b21 	.word	0x08001b21
 8001af4:	08001b39 	.word	0x08001b39
 8001af8:	08001b39 	.word	0x08001b39
 8001afc:	08001b39 	.word	0x08001b39
 8001b00:	08001b39 	.word	0x08001b39
 8001b04:	08001b39 	.word	0x08001b39
 8001b08:	08001b39 	.word	0x08001b39
 8001b0c:	08001b39 	.word	0x08001b39
 8001b10:	08001b15 	.word	0x08001b15
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d913      	bls.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b1e:	e010      	b.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d90f      	bls.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b2a:	e00c      	b.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	d90b      	bls.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b36:	e008      	b.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b3c:	e006      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e004      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b42:	bf00      	nop
 8001b44:	e002      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b46:	bf00      	nop
 8001b48:	e000      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b4a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 0118 	bic.w	r1, r3, #24
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e037      	b.n	8001c02 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ba8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f9b7 	bl	8001f58 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}  
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_DMA_Start_IT+0x20>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e04a      	b.n	8001cc0 <HAL_DMA_Start_IT+0xb6>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d13a      	bne.n	8001cb2 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f94b 	bl	8001efc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 020e 	orr.w	r2, r2, #14
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 020a 	orr.w	r2, r2, #10
 8001c8e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0204 	bic.w	r2, r2, #4
 8001c9e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e005      	b.n	8001cbe <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d008      	beq.n	8001cec <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e020      	b.n	8001d2e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020e 	bic.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d005      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2204      	movs	r2, #4
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e027      	b.n	8001dac <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 020e 	bic.w	r2, r2, #14
 8001d6a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
    } 
  }
  return status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x72>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01f      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0204 	bic.w	r2, r2, #4
 8001e04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	2104      	movs	r1, #4
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06a      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e26:	e065      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02c      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xdc>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d027      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020a 	bic.w	r2, r2, #10
 8001e5e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	2102      	movs	r1, #2
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d035      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e90:	e030      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2208      	movs	r2, #8
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d028      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 020e 	bic.w	r2, r2, #14
 8001eba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eca:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
    }
  }
}  
 8001ef2:	e7ff      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x13e>
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d108      	bne.n	8001f3c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f3a:	e007      	b.n	8001f4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <DMA_CalcBaseAndBitshift+0x34>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <DMA_CalcBaseAndBitshift+0x38>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <DMA_CalcBaseAndBitshift+0x3c>)
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	bffdfff8 	.word	0xbffdfff8
 8001f90:	cccccccd 	.word	0xcccccccd
 8001f94:	40020000 	.word	0x40020000

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e14e      	b.n	8002246 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8140 	beq.w	8002240 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_GPIO_Init+0x48>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd4:	2b11      	cmp	r3, #17
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b12      	cmp	r3, #18
 8001fde:	d130      	bne.n	8002042 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 0201 	and.w	r2, r3, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0xea>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b12      	cmp	r3, #18
 8002080:	d123      	bne.n	80020ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	6939      	ldr	r1, [r7, #16]
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0203 	and.w	r2, r3, #3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 809a 	beq.w	8002240 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <HAL_GPIO_Init+0x2cc>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a54      	ldr	r2, [pc, #336]	; (8002264 <HAL_GPIO_Init+0x2cc>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b52      	ldr	r3, [pc, #328]	; (8002264 <HAL_GPIO_Init+0x2cc>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002124:	4a50      	ldr	r2, [pc, #320]	; (8002268 <HAL_GPIO_Init+0x2d0>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x1e0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a46      	ldr	r2, [pc, #280]	; (800226c <HAL_GPIO_Init+0x2d4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1dc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a45      	ldr	r2, [pc, #276]	; (8002270 <HAL_GPIO_Init+0x2d8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1d8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a44      	ldr	r2, [pc, #272]	; (8002274 <HAL_GPIO_Init+0x2dc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1d4>
 8002168:	2303      	movs	r3, #3
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x1e2>
 800216c:	2305      	movs	r3, #5
 800216e:	e004      	b.n	800217a <HAL_GPIO_Init+0x1e2>
 8002170:	2302      	movs	r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x1e2>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_GPIO_Init+0x1e2>
 8002178:	2300      	movs	r3, #0
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800218a:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_GPIO_Init+0x2d0>)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021bc:	4a2e      	ldr	r2, [pc, #184]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021e6:	4a24      	ldr	r2, [pc, #144]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f aea9 	bne.w	8001fa8 <HAL_GPIO_Init+0x10>
  }
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	48000400 	.word	0x48000400
 8002270:	48000800 	.word	0x48000800
 8002274:	48000c00 	.word	0x48000c00
 8002278:	40010400 	.word	0x40010400

0800227c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e001      	b.n	800229e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43d9      	mvns	r1, r3
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	400b      	ands	r3, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e038      	b.n	8002394 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800232a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f245 5255 	movw	r2, #21845	; 0x5555
 8002334:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6852      	ldr	r2, [r2, #4]
 800233e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800234a:	f7ff f8fd 	bl	8001548 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002350:	e008      	b.n	8002364 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002352:	f7ff f8f9 	bl	8001548 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b26      	cmp	r3, #38	; 0x26
 800235e:	d901      	bls.n	8002364 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e017      	b.n	8002394 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f1      	bne.n	8002352 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d005      	beq.n	8002388 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68d2      	ldr	r2, [r2, #12]
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e004      	b.n	8002392 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80023ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f000 bef4 	b.w	80031be <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 816a 	beq.w	80026ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e6:	4bb3      	ldr	r3, [pc, #716]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d00c      	beq.n	800240c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f2:	4bb0      	ldr	r3, [pc, #704]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d159      	bne.n	80024b2 <HAL_RCC_OscConfig+0xf6>
 80023fe:	4bad      	ldr	r3, [pc, #692]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d152      	bne.n	80024b2 <HAL_RCC_OscConfig+0xf6>
 800240c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002410:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002420:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_RCC_OscConfig+0x82>
 8002438:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0xae>
 800243e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002442:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800245a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002466:	4b93      	ldr	r3, [pc, #588]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002472:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800247e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 810c 	beq.w	80026b8 <HAL_RCC_OscConfig+0x2fc>
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 8106 	bne.w	80026b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f000 be86 	b.w	80031be <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x110>
 80024be:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7c      	ldr	r2, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e030      	b.n	800252e <HAL_RCC_OscConfig+0x172>
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x134>
 80024d6:	4b77      	ldr	r3, [pc, #476]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a73      	ldr	r2, [pc, #460]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01e      	b.n	800252e <HAL_RCC_OscConfig+0x172>
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x15a>
 80024fc:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6c      	ldr	r2, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a69      	ldr	r2, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e00b      	b.n	800252e <HAL_RCC_OscConfig+0x172>
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	495d      	ldr	r1, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d059      	beq.n	8002600 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe fffc 	bl	8001548 <HAL_GetTick>
 8002550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002556:	f7fe fff7 	bl	8001548 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d902      	bls.n	800256c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	f000 be29 	b.w	80031be <HAL_RCC_OscConfig+0xe02>
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002580:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_RCC_OscConfig+0x1e2>
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x20e>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ab      	beq.n	8002556 <HAL_RCC_OscConfig+0x19a>
 80025fe:	e05c      	b.n	80026ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ffa2 	bl	8001548 <HAL_GetTick>
 8002604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260a:	f7fe ff9d 	bl	8001548 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 bdcf 	b.w	80031be <HAL_RCC_OscConfig+0xe02>
 8002620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002624:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002634:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_RCC_OscConfig+0x296>
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x2c2>
 8002652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002656:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800266e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002682:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002686:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002692:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f042 0220 	orr.w	r2, r2, #32
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ab      	bne.n	800260a <HAL_RCC_OscConfig+0x24e>
 80026b2:	e002      	b.n	80026ba <HAL_RCC_OscConfig+0x2fe>
 80026b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 816f 	beq.w	80029a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026ca:	4bd0      	ldr	r3, [pc, #832]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026d6:	4bcd      	ldr	r3, [pc, #820]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d16c      	bne.n	80027bc <HAL_RCC_OscConfig+0x400>
 80026e2:	4bca      	ldr	r3, [pc, #808]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d166      	bne.n	80027bc <HAL_RCC_OscConfig+0x400>
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002700:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x362>
 8002718:	4bbc      	ldr	r3, [pc, #752]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	e013      	b.n	8002746 <HAL_RCC_OscConfig+0x38a>
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002730:	2302      	movs	r3, #2
 8002732:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002736:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002742:	4bb2      	ldr	r3, [pc, #712]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2202      	movs	r2, #2
 8002748:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800274c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002750:	fa92 f2a2 	rbit	r2, r2
 8002754:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002758:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_RCC_OscConfig+0x3cc>
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f000 bd1b 	b.w	80031be <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	21f8      	movs	r1, #248	; 0xf8
 8002798:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027a0:	fa91 f1a1 	rbit	r1, r1
 80027a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027ac:	fab1 f181 	clz	r1, r1
 80027b0:	b2c9      	uxtb	r1, r1
 80027b2:	408b      	lsls	r3, r1
 80027b4:	4995      	ldr	r1, [pc, #596]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	e0f5      	b.n	80029a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8085 	beq.w	80028d2 <HAL_RCC_OscConfig+0x516>
 80027c8:	2301      	movs	r3, #1
 80027ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	2301      	movs	r3, #1
 80027f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fea8 	bl	8001548 <HAL_GetTick>
 80027f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7fe fea3 	bl	8001548 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	f000 bcd5 	b.w	80031be <HAL_RCC_OscConfig+0xe02>
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002826:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_RCC_OscConfig+0x488>
 800283e:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e013      	b.n	800286c <HAL_RCC_OscConfig+0x4b0>
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800285c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2202      	movs	r2, #2
 800286e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002872:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800287e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f002 021f 	and.w	r2, r2, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0af      	beq.n	80027fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	21f8      	movs	r1, #248	; 0xf8
 80028ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028b6:	fa91 f1a1 	rbit	r1, r1
 80028ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028c2:	fab1 f181 	clz	r1, r1
 80028c6:	b2c9      	uxtb	r1, r1
 80028c8:	408b      	lsls	r3, r1
 80028ca:	4950      	ldr	r1, [pc, #320]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e06a      	b.n	80029a8 <HAL_RCC_OscConfig+0x5ec>
 80028d2:	2301      	movs	r3, #1
 80028d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	461a      	mov	r2, r3
 80028fa:	2300      	movs	r3, #0
 80028fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fe23 	bl	8001548 <HAL_GetTick>
 8002902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fe1e 	bl	8001548 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d902      	bls.n	800291e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	f000 bc50 	b.w	80031be <HAL_RCC_OscConfig+0xe02>
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0x592>
 8002948:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e013      	b.n	8002976 <HAL_RCC_OscConfig+0x5ba>
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002960:	2302      	movs	r3, #2
 8002962:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002966:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_RCC_OscConfig+0x650>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2202      	movs	r2, #2
 8002978:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800297c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002980:	fa92 f2a2 	rbit	r2, r2
 8002984:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002988:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1af      	bne.n	8002908 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80da 	beq.w	8002b6c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d069      	beq.n	8002a96 <HAL_RCC_OscConfig+0x6da>
 80029c2:	2301      	movs	r3, #1
 80029c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x654>)
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	2301      	movs	r3, #1
 80029ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ec:	f7fe fdac 	bl	8001548 <HAL_GetTick>
 80029f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f4:	e00e      	b.n	8002a14 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe fda7 	bl	8001548 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d906      	bls.n	8002a14 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e3d9      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	10908120 	.word	0x10908120
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fa93 f2a3 	rbit	r2, r3
 8002a38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a42:	2202      	movs	r2, #2
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	fa93 f2a3 	rbit	r2, r3
 8002a50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4ba5      	ldr	r3, [pc, #660]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a5e:	2102      	movs	r1, #2
 8002a60:	6019      	str	r1, [r3, #0]
 8002a62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f1a3 	rbit	r1, r3
 8002a6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a70:	6019      	str	r1, [r3, #0]
  return result;
 8002a72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0b0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x63a>
 8002a94:	e06a      	b.n	8002b6c <HAL_RCC_OscConfig+0x7b0>
 8002a96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002aac:	601a      	str	r2, [r3, #0]
  return result;
 8002aae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ab2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x934>)
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fd3e 	bl	8001548 <HAL_GetTick>
 8002acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad2:	f7fe fd39 	bl	8001548 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e36b      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 8002ae6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f2a3 	rbit	r2, r3
 8002b28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2e:	4b6f      	ldr	r3, [pc, #444]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b36:	2102      	movs	r1, #2
 8002b38:	6019      	str	r1, [r3, #0]
 8002b3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f1a3 	rbit	r1, r3
 8002b44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b48:	6019      	str	r1, [r3, #0]
  return result;
 8002b4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b2      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8158 	beq.w	8002e2c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b57      	ldr	r3, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a56      	ldr	r2, [pc, #344]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	61d3      	str	r3, [r2, #28]
 8002b9a:	4b54      	ldr	r3, [pc, #336]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f107 0308 	add.w	r3, r7, #8
 8002bac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <HAL_RCC_OscConfig+0x938>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d11a      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <HAL_RCC_OscConfig+0x938>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <HAL_RCC_OscConfig+0x938>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fcbc 	bl	8001548 <HAL_GetTick>
 8002bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e009      	b.n	8002bea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe fcb7 	bl	8001548 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e2e9      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_RCC_OscConfig+0x938>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ef      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x852>
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a39      	ldr	r2, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	e02f      	b.n	8002c6e <HAL_RCC_OscConfig+0x8b2>
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x876>
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4a33      	ldr	r2, [pc, #204]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6213      	str	r3, [r2, #32]
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4a30      	ldr	r2, [pc, #192]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c2a:	f023 0304 	bic.w	r3, r3, #4
 8002c2e:	6213      	str	r3, [r2, #32]
 8002c30:	e01d      	b.n	8002c6e <HAL_RCC_OscConfig+0x8b2>
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x89a>
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6213      	str	r3, [r2, #32]
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0x8b2>
 8002c56:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d06b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fc66 	bl	8001548 <HAL_GetTick>
 8002c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fc61 	bl	8001548 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e291      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 8002c9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cc8:	601a      	str	r2, [r3, #0]
  return result;
 8002cca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d109      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x93c>
 8002ce4:	4b01      	ldr	r3, [pc, #4]	; (8002cec <HAL_RCC_OscConfig+0x930>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x958>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	10908120 	.word	0x10908120
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f2a3 	rbit	r2, r3
 8002d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	4bbb      	ldr	r3, [pc, #748]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d18:	2102      	movs	r1, #2
 8002d1a:	6011      	str	r1, [r2, #0]
 8002d1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fa92 f1a2 	rbit	r1, r2
 8002d26:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d2a:	6011      	str	r1, [r2, #0]
  return result;
 8002d2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	fab2 f282 	clz	r2, r2
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d099      	beq.n	8002c82 <HAL_RCC_OscConfig+0x8c6>
 8002d4e:	e063      	b.n	8002e18 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe fbfa 	bl	8001548 <HAL_GetTick>
 8002d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00b      	b.n	8002d72 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fbf5 	bl	8001548 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e225      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 8002d72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d76:	2202      	movs	r2, #2
 8002d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fa93 f2a3 	rbit	r2, r3
 8002d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d8e:	2202      	movs	r2, #2
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f2a3 	rbit	r2, r3
 8002d9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002da0:	601a      	str	r2, [r3, #0]
  return result;
 8002da2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002da6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_OscConfig+0xa06>
 8002dbc:	4b90      	ldr	r3, [pc, #576]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	e00d      	b.n	8002dde <HAL_RCC_OscConfig+0xa22>
 8002dc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4b89      	ldr	r3, [pc, #548]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002de2:	2102      	movs	r1, #2
 8002de4:	6011      	str	r1, [r2, #0]
 8002de6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	fa92 f1a2 	rbit	r1, r2
 8002df0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002df4:	6011      	str	r1, [r2, #0]
  return result;
 8002df6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	fab2 f282 	clz	r2, r2
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	f002 021f 	and.w	r2, r2, #31
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1a0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 81c2 	beq.w	80031bc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e38:	4b71      	ldr	r3, [pc, #452]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	f000 819c 	beq.w	800317e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	f040 8114 	bne.w	800307a <HAL_RCC_OscConfig+0xcbe>
 8002e52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fa93 f2a3 	rbit	r2, r3
 8002e66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e6a:	601a      	str	r2, [r3, #0]
  return result;
 8002e6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	461a      	mov	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fb5e 	bl	8001548 <HAL_GetTick>
 8002e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	e009      	b.n	8002ea6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fb59 	bl	8001548 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e18b      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 8002ea6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ebe:	601a      	str	r2, [r3, #0]
  return result;
 8002ec0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xb24>
 8002eda:	4b49      	ldr	r3, [pc, #292]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0xb5c>
 8002ee0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	fa92 f1a2 	rbit	r1, r2
 8002f2c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f30:	6011      	str	r1, [r2, #0]
  return result;
 8002f32:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	fab2 f282 	clz	r2, r2
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f042 0220 	orr.w	r2, r2, #32
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f002 021f 	and.w	r2, r2, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d19e      	bne.n	8002e92 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	4925      	ldr	r1, [pc, #148]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f88:	601a      	str	r2, [r3, #0]
  return result;
 8002f8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f8e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fe facf 	bl	8001548 <HAL_GetTick>
 8002faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fae:	e009      	b.n	8002fc4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe faca 	bl	8001548 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0fc      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 8002fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fdc:	601a      	str	r2, [r3, #0]
  return result;
 8002fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fe2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0xc48>
 8002ff8:	4b01      	ldr	r3, [pc, #4]	; (8003000 <HAL_RCC_OscConfig+0xc44>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	e01e      	b.n	800303c <HAL_RCC_OscConfig+0xc80>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_OscConfig+0xe0c>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003040:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	fa92 f1a2 	rbit	r1, r2
 8003050:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003054:	6011      	str	r1, [r2, #0]
  return result;
 8003056:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f002 021f 	and.w	r2, r2, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d09b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xbf4>
 8003078:	e0a0      	b.n	80031bc <HAL_RCC_OscConfig+0xe00>
 800307a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800307e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003092:	601a      	str	r2, [r3, #0]
  return result;
 8003094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003098:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fa4a 	bl	8001548 <HAL_GetTick>
 80030b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	e009      	b.n	80030ce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fa45 	bl	8001548 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e077      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
 80030ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e6:	601a      	str	r2, [r3, #0]
  return result;
 80030e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0xd4c>
 8003102:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_RCC_OscConfig+0xe0c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e01b      	b.n	8003140 <HAL_RCC_OscConfig+0xd84>
 8003108:	f107 0320 	add.w	r3, r7, #32
 800310c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f107 0320 	add.w	r3, r7, #32
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f107 0318 	add.w	r3, r7, #24
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_OscConfig+0xe0c>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f107 0210 	add.w	r2, r7, #16
 8003144:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003148:	6011      	str	r1, [r2, #0]
 800314a:	f107 0210 	add.w	r2, r7, #16
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	fa92 f1a2 	rbit	r1, r2
 8003154:	f107 020c 	add.w	r2, r7, #12
 8003158:	6011      	str	r1, [r2, #0]
  return result;
 800315a:	f107 020c 	add.w	r2, r7, #12
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d19e      	bne.n	80030ba <HAL_RCC_OscConfig+0xcfe>
 800317c:	e01e      	b.n	80031bc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e018      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCC_OscConfig+0xe0c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003194:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d108      	bne.n	80031b8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000

080031cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b09e      	sub	sp, #120	; 0x78
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e162      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b90      	ldr	r3, [pc, #576]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b8d      	ldr	r3, [pc, #564]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	498b      	ldr	r1, [pc, #556]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b89      	ldr	r3, [pc, #548]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e14a      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	497f      	ldr	r1, [pc, #508]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80dc 	beq.w	80033f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d13c      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xf6>
 8003248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d102      	bne.n	8003272 <HAL_RCC_ClockConfig+0xa6>
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	e00f      	b.n	8003292 <HAL_RCC_ClockConfig+0xc6>
 8003272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	667b      	str	r3, [r7, #100]	; 0x64
 8003280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003284:	663b      	str	r3, [r7, #96]	; 0x60
 8003286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800328e:	4b67      	ldr	r3, [pc, #412]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003296:	65ba      	str	r2, [r7, #88]	; 0x58
 8003298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d17b      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0f3      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d13c      	bne.n	8003344 <HAL_RCC_ClockConfig+0x178>
 80032ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x128>
 80032ee:	4b4f      	ldr	r3, [pc, #316]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e00f      	b.n	8003314 <HAL_RCC_ClockConfig+0x148>
 80032f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	643b      	str	r3, [r7, #64]	; 0x40
 8003308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003318:	63ba      	str	r2, [r7, #56]	; 0x38
 800331a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331c:	fa92 f2a2 	rbit	r2, r2
 8003320:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f002 021f 	and.w	r2, r2, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d13a      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0b2      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
 8003344:	2302      	movs	r3, #2
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_RCC_ClockConfig+0x1a0>
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	e00d      	b.n	8003388 <HAL_RCC_ClockConfig+0x1bc>
 800336c:	2302      	movs	r3, #2
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
 8003378:	2302      	movs	r3, #2
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2202      	movs	r2, #2
 800338a:	61ba      	str	r2, [r7, #24]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	fa92 f2a2 	rbit	r2, r2
 8003392:	617a      	str	r2, [r7, #20]
  return result;
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	fab2 f282 	clz	r2, r2
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f042 0220 	orr.w	r2, r2, #32
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f002 021f 	and.w	r2, r2, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e079      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	491a      	ldr	r1, [pc, #104]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fe f8be 	bl	8001548 <HAL_GetTick>
 80033cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fe f8ba 	bl	8001548 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e061      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_ClockConfig+0x260>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d214      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4906      	ldr	r1, [pc, #24]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <HAL_RCC_ClockConfig+0x25c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e040      	b.n	80034aa <HAL_RCC_ClockConfig+0x2de>
 8003428:	40022000 	.word	0x40022000
 800342c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	491a      	ldr	r1, [pc, #104]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4912      	ldr	r1, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800346e:	f000 f829 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003472:	4601      	mov	r1, r0
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_ClockConfig+0x2e8>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	22f0      	movs	r2, #240	; 0xf0
 800347e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	fa92 f2a2 	rbit	r2, r2
 8003486:	60fa      	str	r2, [r7, #12]
  return result;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	fab2 f282 	clz	r2, r2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	40d3      	lsrs	r3, r2
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x2ec>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	fa21 f303 	lsr.w	r3, r1, r3
 800349a:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_RCC_ClockConfig+0x2f0>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_ClockConfig+0x2f4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f80c 	bl	80014c0 <HAL_InitTick>
  
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3778      	adds	r7, #120	; 0x78
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08008fb8 	.word	0x08008fb8
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x36>
 80034f2:	e03c      	b.n	800356e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f6:	623b      	str	r3, [r7, #32]
      break;
 80034f8:	e03c      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003500:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003504:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	607a      	str	r2, [r7, #4]
  return result;
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	40d3      	lsrs	r3, r2
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_RCC_GetSysClockFreq+0xc8>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	220f      	movs	r2, #15
 8003528:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	60fa      	str	r2, [r7, #12]
  return result;
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	40d3      	lsrs	r3, r2
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_RCC_GetSysClockFreq+0xcc>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc4>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e004      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	623b      	str	r3, [r7, #32]
      break;
 800356c:	e002      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003570:	623b      	str	r3, [r7, #32]
      break;
 8003572:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003574:	6a3b      	ldr	r3, [r7, #32]
}
 8003576:	4618      	mov	r0, r3
 8003578:	372c      	adds	r7, #44	; 0x2c
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	007a1200 	.word	0x007a1200
 800358c:	08008fd0 	.word	0x08008fd0
 8003590:	08008fe0 	.word	0x08008fe0
 8003594:	003d0900 	.word	0x003d0900

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035b6:	f7ff ffef 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035ba:	4601      	mov	r1, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	fa92 f2a2 	rbit	r2, r2
 80035d0:	603a      	str	r2, [r7, #0]
  return result;
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	40d3      	lsrs	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08008fc8 	.word	0x08008fc8

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035fa:	f7ff ffcd 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035fe:	4601      	mov	r1, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003608:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800360c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	fa92 f2a2 	rbit	r2, r2
 8003614:	603a      	str	r2, [r7, #0]
  return result;
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	40d3      	lsrs	r3, r2
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	08008fc8 	.word	0x08008fc8

08003638 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b092      	sub	sp, #72	; 0x48
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80cd 	beq.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365c:	4b86      	ldr	r3, [pc, #536]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10e      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b83      	ldr	r3, [pc, #524]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	4a82      	ldr	r2, [pc, #520]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	61d3      	str	r3, [r2, #28]
 8003674:	4b80      	ldr	r3, [pc, #512]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b7d      	ldr	r3, [pc, #500]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b7a      	ldr	r3, [pc, #488]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a79      	ldr	r2, [pc, #484]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369e:	f7fd ff53 	bl	8001548 <HAL_GetTick>
 80036a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	e008      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fd ff4f 	bl	8001548 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d901      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e0db      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b70      	ldr	r3, [pc, #448]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d07d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d076      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e2:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	461a      	mov	r2, r3
 800370c:	2301      	movs	r3, #1
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	4b55      	ldr	r3, [pc, #340]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003734:	4a50      	ldr	r2, [pc, #320]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800373a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d045      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd ff00 	bl	8001548 <HAL_GetTick>
 8003748:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	e00a      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fd fefc 	bl	8001548 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e086      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003762:	2302      	movs	r3, #2
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	2302      	movs	r3, #2
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	61fb      	str	r3, [r7, #28]
  return result;
 800377a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d102      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	e007      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003796:	2302      	movs	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	4b35      	ldr	r3, [pc, #212]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2202      	movs	r2, #2
 80037a8:	613a      	str	r2, [r7, #16]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	fa92 f2a2 	rbit	r2, r2
 80037b0:	60fa      	str	r2, [r7, #12]
  return result;
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	fab2 f282 	clz	r2, r2
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f002 021f 	and.w	r2, r2, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0bd      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4926      	ldr	r1, [pc, #152]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ea:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	491a      	ldr	r1, [pc, #104]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003810:	4313      	orrs	r3, r2
 8003812:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	f023 0210 	bic.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4912      	ldr	r1, [pc, #72]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800382e:	4313      	orrs	r3, r2
 8003830:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	490b      	ldr	r1, [pc, #44]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800384c:	4313      	orrs	r3, r2
 800384e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800386a:	4313      	orrs	r3, r2
 800386c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3748      	adds	r7, #72	; 0x48
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
 8003880:	10908100 	.word	0x10908100

08003884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e049      	b.n	800392a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fc38 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f000 f9da 	bl	8003c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e040      	b.n	80039ce <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_TIM_Base_Start_IT+0xa8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x58>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d009      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x58>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_TIM_Base_Start_IT+0xac>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x58>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d115      	bne.n	80039b8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d015      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0x96>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d011      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	e008      	b.n	80039ca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e000      	b.n	80039cc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	00010007 	.word	0x00010007

080039ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d122      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0202 	mvn.w	r2, #2
 8003a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f905 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8f7 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f908 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0204 	mvn.w	r2, #4
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8db 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8cd 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8de 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0208 	mvn.w	r2, #8
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8b1 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8a3 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8b4 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0210 	mvn.w	r2, #16
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f887 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f879 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f88a 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0201 	mvn.w	r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f002 ffd0 	bl	8006b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d10e      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b80      	cmp	r3, #128	; 0x80
 8003b8a:	d107      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f960 	bl	8003e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003baa:	d10e      	bne.n	8003bca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d107      	bne.n	8003bca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f953 	bl	8003e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f838 	bl	8003c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d10e      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f06f 0220 	mvn.w	r2, #32
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f913 	bl	8003e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a32      	ldr	r2, [pc, #200]	; (8003d58 <TIM_Base_SetConfig+0xdc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <TIM_Base_SetConfig+0x28>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d003      	beq.n	8003ca4 <TIM_Base_SetConfig+0x28>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <TIM_Base_SetConfig+0xe0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d108      	bne.n	8003cb6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <TIM_Base_SetConfig+0xdc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <TIM_Base_SetConfig+0x6a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d00f      	beq.n	8003ce6 <TIM_Base_SetConfig+0x6a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <TIM_Base_SetConfig+0xe0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_Base_SetConfig+0x6a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <TIM_Base_SetConfig+0xe4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <TIM_Base_SetConfig+0x6a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <TIM_Base_SetConfig+0xe8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_Base_SetConfig+0x6a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <TIM_Base_SetConfig+0xec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <TIM_Base_SetConfig+0xdc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_Base_SetConfig+0xc0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <TIM_Base_SetConfig+0xe4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_Base_SetConfig+0xc0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <TIM_Base_SetConfig+0xe8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_Base_SetConfig+0xc0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <TIM_Base_SetConfig+0xec>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e054      	b.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d009      	beq.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10c      	bne.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40014000 	.word	0x40014000

08003e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e040      	b.n	8003f18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f9f0 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fbc4 	bl	8004650 <UART_SetConfig>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e022      	b.n	8003f18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fcf0 	bl	80048c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fd77 	bl	8004a04 <UART_CheckIdleState>
 8003f16:	4603      	mov	r3, r0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	f040 8082 	bne.w	800403e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_UART_Transmit+0x26>
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07a      	b.n	8004040 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_UART_Transmit+0x38>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e073      	b.n	8004040 <HAL_UART_Transmit+0x120>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2221      	movs	r2, #33	; 0x21
 8003f6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6e:	f7fd faeb 	bl	8001548 <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d108      	bne.n	8003fa0 <HAL_UART_Transmit+0x80>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	e003      	b.n	8003fa8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003fb0:	e02d      	b.n	800400e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2180      	movs	r1, #128	; 0x80
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fd6a 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e039      	b.n	8004040 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	e008      	b.n	8003ffc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1cb      	bne.n	8003fb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fd36 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e005      	b.n	8004040 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405a:	2b20      	cmp	r3, #32
 800405c:	d166      	bne.n	800412c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_UART_Transmit_DMA+0x22>
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e05f      	b.n	800412e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_UART_Transmit_DMA+0x34>
 8004078:	2302      	movs	r3, #2
 800407a:	e058      	b.n	800412e <HAL_UART_Transmit_DMA+0xe6>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	88fa      	ldrh	r2, [r7, #6]
 8004096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02b      	beq.n	8004108 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b4:	4a20      	ldr	r2, [pc, #128]	; (8004138 <HAL_UART_Transmit_DMA+0xf0>)
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_UART_Transmit_DMA+0xf4>)
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c4:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_UART_Transmit_DMA+0xf8>)
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d8:	4619      	mov	r1, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3328      	adds	r3, #40	; 0x28
 80040e0:	461a      	mov	r2, r3
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	f7fd fd91 	bl	8001c0a <HAL_DMA_Start_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00c      	beq.n	8004108 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2210      	movs	r2, #16
 80040f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e012      	b.n	800412e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004126:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	08004cf1 	.word	0x08004cf1
 800413c:	08004d3f 	.word	0x08004d3f
 8004140:	08004e25 	.word	0x08004e25

08004144 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004156:	2b20      	cmp	r3, #32
 8004158:	d12c      	bne.n	80041b4 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Receive_DMA+0x22>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e025      	b.n	80041b6 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive_DMA+0x34>
 8004174:	2302      	movs	r3, #2
 8004176:	e01e      	b.n	80041b6 <HAL_UART_Receive_DMA+0x72>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041a2:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fcf0 	bl	8004b90 <UART_Start_Receive_DMA>
 80041b0:	4603      	mov	r3, r0
 80041b2:	e000      	b.n	80041b6 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00e      	beq.n	8004218 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 81cd 	beq.w	80045a8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
      }
      return;
 8004216:	e1c7      	b.n	80045a8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80e3 	beq.w	80043e6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d105      	bne.n	8004236 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4ba5      	ldr	r3, [pc, #660]	; (80044c4 <HAL_UART_IRQHandler+0x304>)
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80d8 	beq.w	80043e6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <HAL_UART_IRQHandler+0xa2>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d010      	beq.n	800428e <HAL_UART_IRQHandler+0xce>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2202      	movs	r2, #2
 800427c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_UART_IRQHandler+0xfa>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2204      	movs	r2, #4
 80042a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b0:	f043 0202 	orr.w	r2, r3, #2
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e6:	f043 0208 	orr.w	r2, r3, #8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d011      	beq.n	800431e <HAL_UART_IRQHandler+0x15e>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8141 	beq.w	80045ac <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004354:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d004      	beq.n	800436e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800436a:	2b00      	cmp	r3, #0
 800436c:	d031      	beq.n	80043d2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fc8f 	bl	8004c92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d123      	bne.n	80043ca <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004390:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a4a      	ldr	r2, [pc, #296]	; (80044c8 <HAL_UART_IRQHandler+0x308>)
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd fcc7 	bl	8001d3a <HAL_DMA_Abort_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d017      	beq.n	80043e2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80043bc:	4610      	mov	r0, r2
 80043be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	e00f      	b.n	80043e2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f91a 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	e00b      	b.n	80043e2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f916 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e007      	b.n	80043e2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f912 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043e0:	e0e4      	b.n	80045ac <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e2:	bf00      	nop
    return;
 80043e4:	e0e2      	b.n	80045ac <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	f040 80a7 	bne.w	800453e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80a1 	beq.w	800453e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 809b 	beq.w	800453e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2210      	movs	r2, #16
 800440e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d156      	bne.n	80044cc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80c0 	beq.w	80045b0 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004436:	893a      	ldrh	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	f080 80b9 	bcs.w	80045b0 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	893a      	ldrh	r2, [r7, #8]
 8004442:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b20      	cmp	r3, #32
 800444e:	d02a      	beq.n	80044a6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0210 	bic.w	r2, r2, #16
 800449a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd fc11 	bl	8001cc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8a8 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044c0:	e076      	b.n	80045b0 <HAL_UART_IRQHandler+0x3f0>
 80044c2:	bf00      	nop
 80044c4:	04000120 	.word	0x04000120
 80044c8:	08004ea1 	.word	0x08004ea1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d064      	beq.n	80045b4 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80044ea:	897b      	ldrh	r3, [r7, #10]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d061      	beq.n	80045b4 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0210 	bic.w	r2, r2, #16
 8004530:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f86a 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800453c:	e03a      	b.n	80045b4 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <HAL_UART_IRQHandler+0x3a4>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800455a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fcce 	bl	8004efe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004562:	e02a      	b.n	80045ba <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
    }
    return;
 8004588:	e016      	b.n	80045b8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <HAL_UART_IRQHandler+0x3fa>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fc94 	bl	8004ecc <UART_EndTransmit_IT>
    return;
 80045a4:	bf00      	nop
 80045a6:	e008      	b.n	80045ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80045a8:	bf00      	nop
 80045aa:	e006      	b.n	80045ba <HAL_UART_IRQHandler+0x3fa>
    return;
 80045ac:	bf00      	nop
 80045ae:	e004      	b.n	80045ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80045b0:	bf00      	nop
 80045b2:	e002      	b.n	80045ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <HAL_UART_IRQHandler+0x3fa>
    return;
 80045b8:	bf00      	nop
  }

}
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004634:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800463a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4313      	orrs	r3, r2
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <UART_SetConfig+0x258>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	430b      	orrs	r3, r1
 8004686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a79      	ldr	r2, [pc, #484]	; (80048ac <UART_SetConfig+0x25c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d121      	bne.n	8004710 <UART_SetConfig+0xc0>
 80046cc:	4b78      	ldr	r3, [pc, #480]	; (80048b0 <UART_SetConfig+0x260>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d817      	bhi.n	8004708 <UART_SetConfig+0xb8>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0x90>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	08004703 	.word	0x08004703
 80046ec:	080046f7 	.word	0x080046f7
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e01e      	b.n	8004734 <UART_SetConfig+0xe4>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e01b      	b.n	8004734 <UART_SetConfig+0xe4>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e018      	b.n	8004734 <UART_SetConfig+0xe4>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e015      	b.n	8004734 <UART_SetConfig+0xe4>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	bf00      	nop
 800470e:	e011      	b.n	8004734 <UART_SetConfig+0xe4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a67      	ldr	r2, [pc, #412]	; (80048b4 <UART_SetConfig+0x264>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d102      	bne.n	8004720 <UART_SetConfig+0xd0>
 800471a:	2300      	movs	r3, #0
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e009      	b.n	8004734 <UART_SetConfig+0xe4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a64      	ldr	r2, [pc, #400]	; (80048b8 <UART_SetConfig+0x268>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d102      	bne.n	8004730 <UART_SetConfig+0xe0>
 800472a:	2300      	movs	r3, #0
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e001      	b.n	8004734 <UART_SetConfig+0xe4>
 8004730:	2310      	movs	r3, #16
 8004732:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d15c      	bne.n	80047f8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d828      	bhi.n	8004796 <UART_SetConfig+0x146>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0xfc>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe ff1e 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8004774:	61b8      	str	r0, [r7, #24]
        break;
 8004776:	e013      	b.n	80047a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe ff3c 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 800477c:	61b8      	str	r0, [r7, #24]
        break;
 800477e:	e00f      	b.n	80047a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b4e      	ldr	r3, [pc, #312]	; (80048bc <UART_SetConfig+0x26c>)
 8004782:	61bb      	str	r3, [r7, #24]
        break;
 8004784:	e00c      	b.n	80047a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe fe9d 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800478a:	61b8      	str	r0, [r7, #24]
        break;
 800478c:	e008      	b.n	80047a0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	61bb      	str	r3, [r7, #24]
        break;
 8004794:	e004      	b.n	80047a0 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	77bb      	strb	r3, [r7, #30]
        break;
 800479e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d074      	beq.n	8004890 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	005a      	lsls	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d916      	bls.n	80047f2 <UART_SetConfig+0x1a2>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d212      	bcs.n	80047f2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f023 030f 	bic.w	r3, r3, #15
 80047d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	89fa      	ldrh	r2, [r7, #14]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e04e      	b.n	8004890 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	77bb      	strb	r3, [r7, #30]
 80047f6:	e04b      	b.n	8004890 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f8:	7ffb      	ldrb	r3, [r7, #31]
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d827      	bhi.n	800484e <UART_SetConfig+0x1fe>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x1b4>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	0800484f 	.word	0x0800484f
 8004814:	0800483f 	.word	0x0800483f
 8004818:	0800484f 	.word	0x0800484f
 800481c:	0800484f 	.word	0x0800484f
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe fec2 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800482c:	61b8      	str	r0, [r7, #24]
        break;
 800482e:	e013      	b.n	8004858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7fe fee0 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8004834:	61b8      	str	r0, [r7, #24]
        break;
 8004836:	e00f      	b.n	8004858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b20      	ldr	r3, [pc, #128]	; (80048bc <UART_SetConfig+0x26c>)
 800483a:	61bb      	str	r3, [r7, #24]
        break;
 800483c:	e00c      	b.n	8004858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7fe fe41 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8004842:	61b8      	str	r0, [r7, #24]
        break;
 8004844:	e008      	b.n	8004858 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	61bb      	str	r3, [r7, #24]
        break;
 800484c:	e004      	b.n	8004858 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	77bb      	strb	r3, [r7, #30]
        break;
 8004856:	bf00      	nop
    }

    if (pclk != 0U)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	085a      	lsrs	r2, r3, #1
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	d908      	bls.n	800488c <UART_SetConfig+0x23c>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d204      	bcs.n	800488c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	e001      	b.n	8004890 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800489c:	7fbb      	ldrb	r3, [r7, #30]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	efff69f3 	.word	0xefff69f3
 80048ac:	40013800 	.word	0x40013800
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40004400 	.word	0x40004400
 80048b8:	40004800 	.word	0x40004800
 80048bc:	007a1200 	.word	0x007a1200

080048c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01a      	beq.n	80049d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d10a      	bne.n	80049d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a14:	f7fc fd98 	bl	8001548 <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d10e      	bne.n	8004a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f82d 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e023      	b.n	8004a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d10e      	bne.n	8004a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f817 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e00d      	b.n	8004a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	e05e      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d05a      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab0:	f7fc fd4a 	bl	8001548 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11b      	bne.n	8004afe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e043      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02c      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d124      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e00f      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d091      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2222      	movs	r2, #34	; 0x22
 8004bb8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d02b      	beq.n	8004c1a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <UART_Start_Receive_DMA+0xcc>)
 8004bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a24      	ldr	r2, [pc, #144]	; (8004c60 <UART_Start_Receive_DMA+0xd0>)
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <UART_Start_Receive_DMA+0xd4>)
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	2200      	movs	r2, #0
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3324      	adds	r3, #36	; 0x24
 8004bec:	4619      	mov	r1, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	f7fd f808 	bl	8001c0a <HAL_DMA_Start_IT>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2210      	movs	r2, #16
 8004c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e01c      	b.n	8004c54 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c30:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c50:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	08004d5b 	.word	0x08004d5b
 8004c60:	08004ded 	.word	0x08004ded
 8004c64:	08004e25 	.word	0x08004e25

08004c68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c7e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ca8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0210 	bic.w	r2, r2, #16
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d014      	beq.n	8004d30 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d2e:	e002      	b.n	8004d36 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fc45 	bl	80045c0 <HAL_UART_TxCpltCallback>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff fc41 	bl	80045d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d02a      	beq.n	8004dc6 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d86:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0210 	bic.w	r2, r2, #16
 8004dc4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d107      	bne.n	8004dde <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fc1a 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ddc:	e002      	b.n	8004de4 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f001 fb96 	bl	8006510 <HAL_UART_RxCpltCallback>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d109      	bne.n	8004e16 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fbfe 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e14:	e002      	b.n	8004e1c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff fbe6 	bl	80045e8 <HAL_UART_RxHalfCpltCallback>
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d109      	bne.n	8004e60 <UART_DMAError+0x3c>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b21      	cmp	r3, #33	; 0x21
 8004e50:	d106      	bne.n	8004e60 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e5a:	6978      	ldr	r0, [r7, #20]
 8004e5c:	f7ff ff04 	bl	8004c68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d109      	bne.n	8004e82 <UART_DMAError+0x5e>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b22      	cmp	r3, #34	; 0x22
 8004e72:	d106      	bne.n	8004e82 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004e7c:	6978      	ldr	r0, [r7, #20]
 8004e7e:	f7ff ff08 	bl	8004c92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e88:	f043 0210 	orr.w	r2, r3, #16
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff fbb2 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff fb9c 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fb65 	bl	80045c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>:
/*
 * Modify number value in control:
 * ex. Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t *)"n0", 25);
 */
uint8_t Nextion_Enhanced_NX3224K028_writeNumberToControl(const uint8_t *controlName, uint16_t valueToWrite)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
  uint8_t size = sprintf((char*)dataToWrite, "%s.val=%d", controlName, valueToWrite);
 8004f20:	887b      	ldrh	r3, [r7, #2]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4914      	ldr	r1, [pc, #80]	; (8004f78 <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x64>)
 8004f26:	4815      	ldr	r0, [pc, #84]	; (8004f7c <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x68>)
 8004f28:	f002 fb82 	bl	8007630 <siprintf>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	73fb      	strb	r3, [r7, #15]

  dataToWrite[size] = 0xFF;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x68>)
 8004f34:	21ff      	movs	r1, #255	; 0xff
 8004f36:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x68>)
 8004f3e:	21ff      	movs	r1, #255	; 0xff
 8004f40:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	3302      	adds	r3, #2
 8004f46:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x68>)
 8004f48:	21ff      	movs	r1, #255	; 0xff
 8004f4a:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 8004f4c:	480c      	ldr	r0, [pc, #48]	; (8004f80 <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x6c>)
 8004f4e:	f7ff fb6b 	bl	8004628 <HAL_UART_GetState>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d10a      	bne.n	8004f6e <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x5a>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3303      	adds	r3, #3
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	4906      	ldr	r1, [pc, #24]	; (8004f7c <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x68>)
 8004f64:	4806      	ldr	r0, [pc, #24]	; (8004f80 <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x6c>)
 8004f66:	f7ff f86f 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <Nextion_Enhanced_NX3224K028_writeNumberToControl+0x5c>
    }

  return 0;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08008e14 	.word	0x08008e14
 8004f7c:	200004d4 	.word	0x200004d4
 8004f80:	200003c8 	.word	0x200003c8

08004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>:
/*
 * Modify number value in control:
 * ex. Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t *)"x0", 25.55);
 */
uint8_t Nextion_Enhanced_NX3224K028_writeFloatToControl(const uint8_t *controlName, float valueToWrite)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	ed87 0a00 	vstr	s0, [r7]
  uint16_t size = sprintf((char*)dataToWrite, "%s.txt=\"%.2f\"", controlName, valueToWrite);
 8004f90:	6838      	ldr	r0, [r7, #0]
 8004f92:	f7fb fad9 	bl	8000548 <__aeabi_f2d>
 8004f96:	4603      	mov	r3, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	e9cd 3400 	strd	r3, r4, [sp]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4914      	ldr	r1, [pc, #80]	; (8004ff4 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x70>)
 8004fa2:	4815      	ldr	r0, [pc, #84]	; (8004ff8 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x74>)
 8004fa4:	f002 fb44 	bl	8007630 <siprintf>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	81fb      	strh	r3, [r7, #14]

  dataToWrite[size] = 0xFF;
 8004fac:	89fb      	ldrh	r3, [r7, #14]
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x74>)
 8004fb0:	21ff      	movs	r1, #255	; 0xff
 8004fb2:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ff8 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x74>)
 8004fba:	21ff      	movs	r1, #255	; 0xff
 8004fbc:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x74>)
 8004fc4:	21ff      	movs	r1, #255	; 0xff
 8004fc6:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 8004fc8:	480c      	ldr	r0, [pc, #48]	; (8004ffc <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x78>)
 8004fca:	f7ff fb2d 	bl	8004628 <HAL_UART_GetState>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d109      	bne.n	8004fe8 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x64>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 8004fd4:	89fb      	ldrh	r3, [r7, #14]
 8004fd6:	3303      	adds	r3, #3
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4906      	ldr	r1, [pc, #24]	; (8004ff8 <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x74>)
 8004fde:	4807      	ldr	r0, [pc, #28]	; (8004ffc <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x78>)
 8004fe0:	f7ff f832 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <Nextion_Enhanced_NX3224K028_writeFloatToControl+0x66>
    }

  return 0;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd90      	pop	{r4, r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	08008e20 	.word	0x08008e20
 8004ff8:	200004d4 	.word	0x200004d4
 8004ffc:	200003c8 	.word	0x200003c8

08005000 <Nextion_Enhanced_NX3224K028_writeFltToControl>:
/*
 * Modify number value in control:
 * ex. Nextion_Enhanced_NX3224K028_writeFltToControl((const uint8_t *)"x0", 25.55);
 */
uint8_t Nextion_Enhanced_NX3224K028_writeFltToControl(const uint8_t *controlName, uint8_t valueToWrite)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  uint16_t size = sprintf((char*)dataToWrite, "%s.txt=\"0x%.2X\"", controlName, valueToWrite);
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4914      	ldr	r1, [pc, #80]	; (8005064 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x64>)
 8005012:	4815      	ldr	r0, [pc, #84]	; (8005068 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x68>)
 8005014:	f002 fb0c 	bl	8007630 <siprintf>
 8005018:	4603      	mov	r3, r0
 800501a:	81fb      	strh	r3, [r7, #14]

  dataToWrite[size] = 0xFF;
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	4a12      	ldr	r2, [pc, #72]	; (8005068 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x68>)
 8005020:	21ff      	movs	r1, #255	; 0xff
 8005022:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	3301      	adds	r3, #1
 8005028:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x68>)
 800502a:	21ff      	movs	r1, #255	; 0xff
 800502c:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 800502e:	89fb      	ldrh	r3, [r7, #14]
 8005030:	3302      	adds	r3, #2
 8005032:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x68>)
 8005034:	21ff      	movs	r1, #255	; 0xff
 8005036:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 8005038:	480c      	ldr	r0, [pc, #48]	; (800506c <Nextion_Enhanced_NX3224K028_writeFltToControl+0x6c>)
 800503a:	f7ff faf5 	bl	8004628 <HAL_UART_GetState>
 800503e:	4603      	mov	r3, r0
 8005040:	2b20      	cmp	r3, #32
 8005042:	d109      	bne.n	8005058 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x58>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 8005044:	89fb      	ldrh	r3, [r7, #14]
 8005046:	3303      	adds	r3, #3
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	4906      	ldr	r1, [pc, #24]	; (8005068 <Nextion_Enhanced_NX3224K028_writeFltToControl+0x68>)
 800504e:	4807      	ldr	r0, [pc, #28]	; (800506c <Nextion_Enhanced_NX3224K028_writeFltToControl+0x6c>)
 8005050:	f7fe fffa 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <Nextion_Enhanced_NX3224K028_writeFltToControl+0x5a>
    }

  return 0;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	08008e30 	.word	0x08008e30
 8005068:	200004d4 	.word	0x200004d4
 800506c:	200003c8 	.word	0x200003c8

08005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>:
/*
 * Modify progress bar value in control:
 * ex. Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t *)"j0", 76);
 */
uint8_t Nextion_Enhanced_NX3224K028_writeValueToProgressBar(const uint8_t *controlName, uint8_t value, uint8_t maxAllowableValue)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
 800507c:	4613      	mov	r3, r2
 800507e:	70bb      	strb	r3, [r7, #2]
  // Wykonaj mapowanie

  uint16_t valueToWrite = (100 * value) / maxAllowableValue;
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2264      	movs	r2, #100	; 0x64
 8005084:	fb02 f203 	mul.w	r2, r2, r3
 8005088:	78bb      	ldrb	r3, [r7, #2]
 800508a:	fb92 f3f3 	sdiv	r3, r2, r3
 800508e:	81fb      	strh	r3, [r7, #14]

  uint8_t size = sprintf((char*)dataToWrite, "%s.val=%d", controlName, valueToWrite);
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4914      	ldr	r1, [pc, #80]	; (80050e8 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x78>)
 8005096:	4815      	ldr	r0, [pc, #84]	; (80050ec <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x7c>)
 8005098:	f002 faca 	bl	8007630 <siprintf>
 800509c:	4603      	mov	r3, r0
 800509e:	737b      	strb	r3, [r7, #13]

  dataToWrite[size] = 0xFF;
 80050a0:	7b7b      	ldrb	r3, [r7, #13]
 80050a2:	4a12      	ldr	r2, [pc, #72]	; (80050ec <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x7c>)
 80050a4:	21ff      	movs	r1, #255	; 0xff
 80050a6:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 80050a8:	7b7b      	ldrb	r3, [r7, #13]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x7c>)
 80050ae:	21ff      	movs	r1, #255	; 0xff
 80050b0:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	3302      	adds	r3, #2
 80050b6:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x7c>)
 80050b8:	21ff      	movs	r1, #255	; 0xff
 80050ba:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 80050bc:	480c      	ldr	r0, [pc, #48]	; (80050f0 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x80>)
 80050be:	f7ff fab3 	bl	8004628 <HAL_UART_GetState>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d10a      	bne.n	80050de <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x6e>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 80050c8:	7b7b      	ldrb	r3, [r7, #13]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3303      	adds	r3, #3
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	4906      	ldr	r1, [pc, #24]	; (80050ec <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x7c>)
 80050d4:	4806      	ldr	r0, [pc, #24]	; (80050f0 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x80>)
 80050d6:	f7fe ffb7 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar+0x70>
    }

  return 0;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08008e14 	.word	0x08008e14
 80050ec:	200004d4 	.word	0x200004d4
 80050f0:	200003c8 	.word	0x200003c8

080050f4 <Nextion_Enhanced_NX3224K028_changeControlColor>:
/*
 * Modify txt value in control:
 * ex. Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t *)"electrovalve", 31);
 */
uint8_t Nextion_Enhanced_NX3224K028_changeControlColor(const uint8_t *controlName, uint16_t color_value_565)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	807b      	strh	r3, [r7, #2]
  uint16_t size = sprintf((char*)dataToWrite, "%s.pco=%d", controlName, color_value_565);
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4914      	ldr	r1, [pc, #80]	; (8005158 <Nextion_Enhanced_NX3224K028_changeControlColor+0x64>)
 8005106:	4815      	ldr	r0, [pc, #84]	; (800515c <Nextion_Enhanced_NX3224K028_changeControlColor+0x68>)
 8005108:	f002 fa92 	bl	8007630 <siprintf>
 800510c:	4603      	mov	r3, r0
 800510e:	81fb      	strh	r3, [r7, #14]

  dataToWrite[size] = 0xFF;
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	4a12      	ldr	r2, [pc, #72]	; (800515c <Nextion_Enhanced_NX3224K028_changeControlColor+0x68>)
 8005114:	21ff      	movs	r1, #255	; 0xff
 8005116:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	3301      	adds	r3, #1
 800511c:	4a0f      	ldr	r2, [pc, #60]	; (800515c <Nextion_Enhanced_NX3224K028_changeControlColor+0x68>)
 800511e:	21ff      	movs	r1, #255	; 0xff
 8005120:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	3302      	adds	r3, #2
 8005126:	4a0d      	ldr	r2, [pc, #52]	; (800515c <Nextion_Enhanced_NX3224K028_changeControlColor+0x68>)
 8005128:	21ff      	movs	r1, #255	; 0xff
 800512a:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 800512c:	480c      	ldr	r0, [pc, #48]	; (8005160 <Nextion_Enhanced_NX3224K028_changeControlColor+0x6c>)
 800512e:	f7ff fa7b 	bl	8004628 <HAL_UART_GetState>
 8005132:	4603      	mov	r3, r0
 8005134:	2b20      	cmp	r3, #32
 8005136:	d109      	bne.n	800514c <Nextion_Enhanced_NX3224K028_changeControlColor+0x58>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	3303      	adds	r3, #3
 800513c:	b29b      	uxth	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	4906      	ldr	r1, [pc, #24]	; (800515c <Nextion_Enhanced_NX3224K028_changeControlColor+0x68>)
 8005142:	4807      	ldr	r0, [pc, #28]	; (8005160 <Nextion_Enhanced_NX3224K028_changeControlColor+0x6c>)
 8005144:	f7fe ff80 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <Nextion_Enhanced_NX3224K028_changeControlColor+0x5a>
    }

  return 0;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	08008e40 	.word	0x08008e40
 800515c:	200004d4 	.word	0x200004d4
 8005160:	200003c8 	.word	0x200003c8

08005164 <Nextion_Enhanced_NX3224K028_drawRectangle>:

uint8_t Nextion_Enhanced_NX3224K028_drawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const uint8_t *color)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af04      	add	r7, sp, #16
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	4623      	mov	r3, r4
 8005174:	80fb      	strh	r3, [r7, #6]
 8005176:	4603      	mov	r3, r0
 8005178:	80bb      	strh	r3, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	807b      	strh	r3, [r7, #2]
 800517e:	4613      	mov	r3, r2
 8005180:	803b      	strh	r3, [r7, #0]
  uint16_t size = sprintf((char*)dataToWrite, "draw %d,%d,%d,%d,%s", x1, y1, x2, y2, color);
 8005182:	88f8      	ldrh	r0, [r7, #6]
 8005184:	88bc      	ldrh	r4, [r7, #4]
 8005186:	887b      	ldrh	r3, [r7, #2]
 8005188:	883a      	ldrh	r2, [r7, #0]
 800518a:	6a39      	ldr	r1, [r7, #32]
 800518c:	9102      	str	r1, [sp, #8]
 800518e:	9201      	str	r2, [sp, #4]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	4623      	mov	r3, r4
 8005194:	4602      	mov	r2, r0
 8005196:	4914      	ldr	r1, [pc, #80]	; (80051e8 <Nextion_Enhanced_NX3224K028_drawRectangle+0x84>)
 8005198:	4814      	ldr	r0, [pc, #80]	; (80051ec <Nextion_Enhanced_NX3224K028_drawRectangle+0x88>)
 800519a:	f002 fa49 	bl	8007630 <siprintf>
 800519e:	4603      	mov	r3, r0
 80051a0:	81fb      	strh	r3, [r7, #14]

  dataToWrite[size] = 0xFF;
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	4a11      	ldr	r2, [pc, #68]	; (80051ec <Nextion_Enhanced_NX3224K028_drawRectangle+0x88>)
 80051a6:	21ff      	movs	r1, #255	; 0xff
 80051a8:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	3301      	adds	r3, #1
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <Nextion_Enhanced_NX3224K028_drawRectangle+0x88>)
 80051b0:	21ff      	movs	r1, #255	; 0xff
 80051b2:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	3302      	adds	r3, #2
 80051b8:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <Nextion_Enhanced_NX3224K028_drawRectangle+0x88>)
 80051ba:	21ff      	movs	r1, #255	; 0xff
 80051bc:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 80051be:	480c      	ldr	r0, [pc, #48]	; (80051f0 <Nextion_Enhanced_NX3224K028_drawRectangle+0x8c>)
 80051c0:	f7ff fa32 	bl	8004628 <HAL_UART_GetState>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d109      	bne.n	80051de <Nextion_Enhanced_NX3224K028_drawRectangle+0x7a>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	3303      	adds	r3, #3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	4906      	ldr	r1, [pc, #24]	; (80051ec <Nextion_Enhanced_NX3224K028_drawRectangle+0x88>)
 80051d4:	4806      	ldr	r0, [pc, #24]	; (80051f0 <Nextion_Enhanced_NX3224K028_drawRectangle+0x8c>)
 80051d6:	f7fe ff37 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <Nextion_Enhanced_NX3224K028_drawRectangle+0x7c>
    }

  return 0;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}
 80051e8:	08008e4c 	.word	0x08008e4c
 80051ec:	200004d4 	.word	0x200004d4
 80051f0:	200003c8 	.word	0x200003c8

080051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>:
 * Change using page:
 * ex. Nextion_Enhanced_NX3224K028_loadNewPage(1);
 */

uint8_t Nextion_Enhanced_NX3224K028_loadNewPage(uint8_t pageId)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
  uint8_t size = sprintf((char*)dataToWrite, "page %d", pageId);
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	461a      	mov	r2, r3
 8005202:	4915      	ldr	r1, [pc, #84]	; (8005258 <Nextion_Enhanced_NX3224K028_loadNewPage+0x64>)
 8005204:	4815      	ldr	r0, [pc, #84]	; (800525c <Nextion_Enhanced_NX3224K028_loadNewPage+0x68>)
 8005206:	f002 fa13 	bl	8007630 <siprintf>
 800520a:	4603      	mov	r3, r0
 800520c:	73fb      	strb	r3, [r7, #15]

  dataToWrite[size] = 0xFF;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	4a12      	ldr	r2, [pc, #72]	; (800525c <Nextion_Enhanced_NX3224K028_loadNewPage+0x68>)
 8005212:	21ff      	movs	r1, #255	; 0xff
 8005214:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	3301      	adds	r3, #1
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <Nextion_Enhanced_NX3224K028_loadNewPage+0x68>)
 800521c:	21ff      	movs	r1, #255	; 0xff
 800521e:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	3302      	adds	r3, #2
 8005224:	4a0d      	ldr	r2, [pc, #52]	; (800525c <Nextion_Enhanced_NX3224K028_loadNewPage+0x68>)
 8005226:	21ff      	movs	r1, #255	; 0xff
 8005228:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 800522a:	480d      	ldr	r0, [pc, #52]	; (8005260 <Nextion_Enhanced_NX3224K028_loadNewPage+0x6c>)
 800522c:	f7ff f9fc 	bl	8004628 <HAL_UART_GetState>
 8005230:	4603      	mov	r3, r0
 8005232:	2b20      	cmp	r3, #32
 8005234:	d10a      	bne.n	800524c <Nextion_Enhanced_NX3224K028_loadNewPage+0x58>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	b29b      	uxth	r3, r3
 800523a:	3303      	adds	r3, #3
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	4906      	ldr	r1, [pc, #24]	; (800525c <Nextion_Enhanced_NX3224K028_loadNewPage+0x68>)
 8005242:	4807      	ldr	r0, [pc, #28]	; (8005260 <Nextion_Enhanced_NX3224K028_loadNewPage+0x6c>)
 8005244:	f7fe ff00 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <Nextion_Enhanced_NX3224K028_loadNewPage+0x5a>
    }

  return 0;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	08008e70 	.word	0x08008e70
 800525c:	200004d4 	.word	0x200004d4
 8005260:	200003c8 	.word	0x200003c8

08005264 <Nextion_Enhanced_NX3224K028_deviceReset>:
/*
 * This function reset device:
 * ex. Nextion_Enhanced_NX3224K028_deviceReset();
 */
uint8_t Nextion_Enhanced_NX3224K028_deviceReset(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
  uint8_t size = sprintf((char*)dataToWrite, "rest");
 800526a:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <Nextion_Enhanced_NX3224K028_deviceReset+0x60>)
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <Nextion_Enhanced_NX3224K028_deviceReset+0x64>)
 800526e:	6810      	ldr	r0, [r2, #0]
 8005270:	6018      	str	r0, [r3, #0]
 8005272:	7912      	ldrb	r2, [r2, #4]
 8005274:	711a      	strb	r2, [r3, #4]
 8005276:	2304      	movs	r3, #4
 8005278:	71fb      	strb	r3, [r7, #7]

  dataToWrite[size] = 0xFF;
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <Nextion_Enhanced_NX3224K028_deviceReset+0x60>)
 800527e:	21ff      	movs	r1, #255	; 0xff
 8005280:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 1] = 0xFF;
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	3301      	adds	r3, #1
 8005286:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <Nextion_Enhanced_NX3224K028_deviceReset+0x60>)
 8005288:	21ff      	movs	r1, #255	; 0xff
 800528a:	54d1      	strb	r1, [r2, r3]
  dataToWrite[size + 2] = 0xFF;
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	3302      	adds	r3, #2
 8005290:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <Nextion_Enhanced_NX3224K028_deviceReset+0x60>)
 8005292:	21ff      	movs	r1, #255	; 0xff
 8005294:	54d1      	strb	r1, [r2, r3]

  if (HAL_UART_GetState(&UART_PORT_Nextion) == HAL_UART_STATE_READY)
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <Nextion_Enhanced_NX3224K028_deviceReset+0x68>)
 8005298:	f7ff f9c6 	bl	8004628 <HAL_UART_GetState>
 800529c:	4603      	mov	r3, r0
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d10a      	bne.n	80052b8 <Nextion_Enhanced_NX3224K028_deviceReset+0x54>
    {
      HAL_UART_Transmit_DMA(&UART_PORT_Nextion, dataToWrite, size + 3);
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3303      	adds	r3, #3
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	4905      	ldr	r1, [pc, #20]	; (80052c4 <Nextion_Enhanced_NX3224K028_deviceReset+0x60>)
 80052ae:	4807      	ldr	r0, [pc, #28]	; (80052cc <Nextion_Enhanced_NX3224K028_deviceReset+0x68>)
 80052b0:	f7fe feca 	bl	8004048 <HAL_UART_Transmit_DMA>
      return 1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <Nextion_Enhanced_NX3224K028_deviceReset+0x56>
    }

  return 0;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200004d4 	.word	0x200004d4
 80052c8:	08008ea4 	.word	0x08008ea4
 80052cc:	200003c8 	.word	0x200003c8

080052d0 <buttons_step>:
/**
* @fn buttons_step(void)
* @brief Funkcja sprawdzajaca stany przyciskow przy kazdym obiegu petli, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
void buttons_step(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(GPIOA, HALF_GAS_BUTTON_Pin) == GPIO_PIN_RESET)
 80052d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052dc:	f7fc ffce 	bl	800227c <HAL_GPIO_ReadPin>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <buttons_step+0x1e>
    {
      BUTTONS.halfGas = 1;
 80052e6:	4b4d      	ldr	r3, [pc, #308]	; (800541c <buttons_step+0x14c>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e002      	b.n	80052f4 <buttons_step+0x24>
    }
  else
    {
      BUTTONS.halfGas = 0;
 80052ee:	4b4b      	ldr	r3, [pc, #300]	; (800541c <buttons_step+0x14c>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
    }

  if (HAL_GPIO_ReadPin(GPIOA, FULL_GAS_BUTTON_Pin) == GPIO_PIN_RESET)
 80052f4:	2110      	movs	r1, #16
 80052f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052fa:	f7fc ffbf 	bl	800227c <HAL_GPIO_ReadPin>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <buttons_step+0x3c>
    {
      BUTTONS.fullGas = 1;
 8005304:	4b45      	ldr	r3, [pc, #276]	; (800541c <buttons_step+0x14c>)
 8005306:	2201      	movs	r2, #1
 8005308:	705a      	strb	r2, [r3, #1]
 800530a:	e002      	b.n	8005312 <buttons_step+0x42>
    }
  else
    {
      BUTTONS.fullGas = 0;
 800530c:	4b43      	ldr	r3, [pc, #268]	; (800541c <buttons_step+0x14c>)
 800530e:	2200      	movs	r2, #0
 8005310:	705a      	strb	r2, [r3, #1]
    }

  if (HAL_GPIO_ReadPin(GPIOA, MODE_1_BUTTON_Pin) == GPIO_PIN_RESET)
 8005312:	2102      	movs	r1, #2
 8005314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005318:	f7fc ffb0 	bl	800227c <HAL_GPIO_ReadPin>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d103      	bne.n	800532a <buttons_step+0x5a>
    {
      BUTTONS.mode1 = 1;
 8005322:	4b3e      	ldr	r3, [pc, #248]	; (800541c <buttons_step+0x14c>)
 8005324:	2201      	movs	r2, #1
 8005326:	709a      	strb	r2, [r3, #2]
 8005328:	e002      	b.n	8005330 <buttons_step+0x60>
    }
  else
    {
      BUTTONS.mode1 = 0;
 800532a:	4b3c      	ldr	r3, [pc, #240]	; (800541c <buttons_step+0x14c>)
 800532c:	2200      	movs	r2, #0
 800532e:	709a      	strb	r2, [r3, #2]
    }

  if (HAL_GPIO_ReadPin(GPIOB, MODE_2_BUTTON_Pin) == GPIO_PIN_RESET)
 8005330:	2102      	movs	r1, #2
 8005332:	483b      	ldr	r0, [pc, #236]	; (8005420 <buttons_step+0x150>)
 8005334:	f7fc ffa2 	bl	800227c <HAL_GPIO_ReadPin>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <buttons_step+0x76>
    {
      BUTTONS.mode2 = 1;
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <buttons_step+0x14c>)
 8005340:	2201      	movs	r2, #1
 8005342:	70da      	strb	r2, [r3, #3]
 8005344:	e002      	b.n	800534c <buttons_step+0x7c>
    }
  else
    {
      BUTTONS.mode2 = 0;
 8005346:	4b35      	ldr	r3, [pc, #212]	; (800541c <buttons_step+0x14c>)
 8005348:	2200      	movs	r2, #0
 800534a:	70da      	strb	r2, [r3, #3]
    }

  if (HAL_GPIO_ReadPin(GPIOB, HORN_BUTTON_Pin) == GPIO_PIN_RESET)
 800534c:	2101      	movs	r1, #1
 800534e:	4834      	ldr	r0, [pc, #208]	; (8005420 <buttons_step+0x150>)
 8005350:	f7fc ff94 	bl	800227c <HAL_GPIO_ReadPin>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <buttons_step+0x92>
    {
      BUTTONS.horn = 1;
 800535a:	4b30      	ldr	r3, [pc, #192]	; (800541c <buttons_step+0x14c>)
 800535c:	2201      	movs	r2, #1
 800535e:	711a      	strb	r2, [r3, #4]
 8005360:	e002      	b.n	8005368 <buttons_step+0x98>
    }
  else
    {
      BUTTONS.horn = 0;
 8005362:	4b2e      	ldr	r3, [pc, #184]	; (800541c <buttons_step+0x14c>)
 8005364:	2200      	movs	r2, #0
 8005366:	711a      	strb	r2, [r3, #4]
    }

  if (HAL_GPIO_ReadPin(GPIOB, SPEED_RESET_BUTTON_Pin) == GPIO_PIN_RESET)
 8005368:	2180      	movs	r1, #128	; 0x80
 800536a:	482d      	ldr	r0, [pc, #180]	; (8005420 <buttons_step+0x150>)
 800536c:	f7fc ff86 	bl	800227c <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <buttons_step+0xae>
    {
      BUTTONS.speedReset = 1;
 8005376:	4b29      	ldr	r3, [pc, #164]	; (800541c <buttons_step+0x14c>)
 8005378:	2201      	movs	r2, #1
 800537a:	715a      	strb	r2, [r3, #5]
 800537c:	e002      	b.n	8005384 <buttons_step+0xb4>
    }
  else
    {
      BUTTONS.speedReset = 0;
 800537e:	4b27      	ldr	r3, [pc, #156]	; (800541c <buttons_step+0x14c>)
 8005380:	2200      	movs	r2, #0
 8005382:	715a      	strb	r2, [r3, #5]
    }

  if (HAL_GPIO_ReadPin(GPIOB, SUPPLY_BUTTON_Pin) == GPIO_PIN_RESET)
 8005384:	2140      	movs	r1, #64	; 0x40
 8005386:	4826      	ldr	r0, [pc, #152]	; (8005420 <buttons_step+0x150>)
 8005388:	f7fc ff78 	bl	800227c <HAL_GPIO_ReadPin>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <buttons_step+0xca>
    {
      BUTTONS.powerSupply = 1;
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <buttons_step+0x14c>)
 8005394:	2201      	movs	r2, #1
 8005396:	719a      	strb	r2, [r3, #6]
 8005398:	e002      	b.n	80053a0 <buttons_step+0xd0>
    }
  else
    {
      BUTTONS.powerSupply = 0;
 800539a:	4b20      	ldr	r3, [pc, #128]	; (800541c <buttons_step+0x14c>)
 800539c:	2200      	movs	r2, #0
 800539e:	719a      	strb	r2, [r3, #6]
    }

  if (HAL_GPIO_ReadPin(GPIOA, SC_CLOSE_BUTTON_Pin) == GPIO_PIN_RESET)
 80053a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053a8:	f7fc ff68 	bl	800227c <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <buttons_step+0xea>
    {
      BUTTONS.scClose = 1;
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <buttons_step+0x14c>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	71da      	strb	r2, [r3, #7]
 80053b8:	e002      	b.n	80053c0 <buttons_step+0xf0>
    }
  else
    {
      BUTTONS.scClose = 0;
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <buttons_step+0x14c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	71da      	strb	r2, [r3, #7]
    }

  if (HAL_GPIO_ReadPin(GPIOB, FUELCELL_OFF_MODE_BUTTON_Pin) == GPIO_PIN_RESET)
 80053c0:	2110      	movs	r1, #16
 80053c2:	4817      	ldr	r0, [pc, #92]	; (8005420 <buttons_step+0x150>)
 80053c4:	f7fc ff5a 	bl	800227c <HAL_GPIO_ReadPin>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <buttons_step+0x106>
    {
      BUTTONS.fuelcellOff = 1;
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <buttons_step+0x14c>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	721a      	strb	r2, [r3, #8]
 80053d4:	e002      	b.n	80053dc <buttons_step+0x10c>
    }
  else
    {
      BUTTONS.fuelcellOff = 0;
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <buttons_step+0x14c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	721a      	strb	r2, [r3, #8]
    }

  if (HAL_GPIO_ReadPin(GPIOB, FUELCELL_PREPARETORACE_MODE_BUTTON_Pin) == GPIO_PIN_RESET)
 80053dc:	2120      	movs	r1, #32
 80053de:	4810      	ldr	r0, [pc, #64]	; (8005420 <buttons_step+0x150>)
 80053e0:	f7fc ff4c 	bl	800227c <HAL_GPIO_ReadPin>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <buttons_step+0x122>
    {
      BUTTONS.fuelcellPrepareToRace = 1;
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <buttons_step+0x14c>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	725a      	strb	r2, [r3, #9]
 80053f0:	e002      	b.n	80053f8 <buttons_step+0x128>
    }
  else
    {
      BUTTONS.fuelcellPrepareToRace = 0;
 80053f2:	4b0a      	ldr	r3, [pc, #40]	; (800541c <buttons_step+0x14c>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	725a      	strb	r2, [r3, #9]
    }

  if (HAL_GPIO_ReadPin(GPIOA, FUELCELL_RACE_MODE_BUTTON_Pin) == GPIO_PIN_RESET)
 80053f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005400:	f7fc ff3c 	bl	800227c <HAL_GPIO_ReadPin>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <buttons_step+0x142>
    {
      BUTTONS.fuelcellRace = 1;
 800540a:	4b04      	ldr	r3, [pc, #16]	; (800541c <buttons_step+0x14c>)
 800540c:	2201      	movs	r2, #1
 800540e:	729a      	strb	r2, [r3, #10]
    }
  else
    {
      BUTTONS.fuelcellRace = 0;
    }
}
 8005410:	e002      	b.n	8005418 <buttons_step+0x148>
      BUTTONS.fuelcellRace = 0;
 8005412:	4b02      	ldr	r3, [pc, #8]	; (800541c <buttons_step+0x14c>)
 8005414:	2200      	movs	r2, #0
 8005416:	729a      	strb	r2, [r3, #10]
}
 8005418:	bf00      	nop
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000538 	.word	0x20000538
 8005420:	48000400 	.word	0x48000400

08005424 <hydrogreen_init>:
/**
* @fn hydrogreen_init(void)
* @brief Glowna funkcja inicjalizujaca, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static void hydrogreen_init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  watchdog_init();
 8005428:	f001 fb96 	bl	8006b58 <watchdog_init>
  timers_init();
 800542c:	f001 fa98 	bl	8006960 <timers_init>
  rs485_init();
 8005430:	f000 ffae 	bl	8006390 <rs485_init>
}
 8005434:	bf00      	nop
 8005436:	bd80      	pop	{r7, pc}

08005438 <hydrogreen_step1kHz>:
/**
* @fn hydrogreen_step1kHz(void)
* @brief Glowna funkcja wykonywana co T = 1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step1kHz(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_RESET);
#endif
  leds_step();
 800543c:	f000 ff68 	bl	8006310 <leds_step>
  buttons_step();
 8005440:	f7ff ff46 	bl	80052d0 <buttons_step>
  lcd_control_step();
 8005444:	f000 f838 	bl	80054b8 <lcd_control_step>
  watchdog_step();
 8005448:	f001 fc5a 	bl	8006d00 <watchdog_step>
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_SET);
#endif
}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}

08005450 <hydrogreen_step10kHz>:
/**
* @fn hydrogreen_step(void)
* @brief Glowna funkcja wykonywana co T = 0,1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step10kHz(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  rs485_step();
 8005454:	f000 ffac 	bl	80063b0 <rs485_step>
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}

0800545c <hydrogreen_main>:
/**
* @fn hydrogreen_main(void)
* @brief Glowna funkcja programu, powinna zostac wywolana w pliku main.c, pomiedzy  USER CODE BEGIN 2 a USER CODE END 2
*/
void hydrogreen_main(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  hydrogreen_init();
 8005460:	f7ff ffe0 	bl	8005424 <hydrogreen_init>

  while (1)
    {
      //Sprawdz czy wystapil tick timera nastepujacy z f = 1kHz
      if (timers_tick1kHz)
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <hydrogreen_main+0x3c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <hydrogreen_main+0x24>
	{
	  timers_beforeStep1kHz();
 800546e:	f001 fad5 	bl	8006a1c <timers_beforeStep1kHz>

	  hydrogreen_step1kHz();
 8005472:	f7ff ffe1 	bl	8005438 <hydrogreen_step1kHz>

	  timers_afterStep1kHz();
 8005476:	f001 fadd 	bl	8006a34 <timers_afterStep1kHz>

	  timers_tick1kHz = 0;
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <hydrogreen_main+0x3c>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
	}

      //Sprawdz czy wystapil tick timera nastepujacy z f = 10kHz
      if (timers_tick10kHz)
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <hydrogreen_main+0x40>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ec      	beq.n	8005464 <hydrogreen_main+0x8>
	{
	  hydrogreen_step10kHz();
 800548a:	f7ff ffe1 	bl	8005450 <hydrogreen_step10kHz>
	  timers_tick10kHz = 0;
 800548e:	4b03      	ldr	r3, [pc, #12]	; (800549c <hydrogreen_main+0x40>)
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
      if (timers_tick1kHz)
 8005494:	e7e6      	b.n	8005464 <hydrogreen_main+0x8>
 8005496:	bf00      	nop
 8005498:	20000570 	.word	0x20000570
 800549c:	2000056c 	.word	0x2000056c

080054a0 <hydrogreen_hardFault>:
/**
* @fn hydrogreen_hardFault(void)
* @brief Sygnalizacja wystapienia hard fault'a, wywolac w pliku main.c, w funkcji Error_Handler()
*/
void hydrogreen_hardFault(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, LED_NUCLEO_Pin, GPIO_PIN_SET);
 80054a4:	2201      	movs	r2, #1
 80054a6:	2108      	movs	r1, #8
 80054a8:	4802      	ldr	r0, [pc, #8]	; (80054b4 <hydrogreen_hardFault+0x14>)
 80054aa:	f7fc feff 	bl	80022ac <HAL_GPIO_WritePin>
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	48000400 	.word	0x48000400

080054b8 <lcd_control_step>:
/**
* @fn lcd_control_step(void)
* @brief Glowna funkcja obslugujaca wyswietlacz, powinna zostac wywolana wewnatrz hydrogreen_step1kHz()
*/
void lcd_control_step(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  if (initCplt) choosePage();	//Zmiana strony jest mozliwa dopiero po zakonczeniu inicjalizacji LCD (initCplt musi wynosic 1)
 80054bc:	4b13      	ldr	r3, [pc, #76]	; (800550c <lcd_control_step+0x54>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <lcd_control_step+0x10>
 80054c4:	f000 fe24 	bl	8006110 <choosePage>

  switch (mainStepFsm)
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <lcd_control_step+0x58>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d819      	bhi.n	8005504 <lcd_control_step+0x4c>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <lcd_control_step+0x20>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054ed 	.word	0x080054ed
 80054dc:	080054f3 	.word	0x080054f3
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	08005505 	.word	0x08005505
 80054e8:	080054ff 	.word	0x080054ff
  {
    case INIT_PAGE:
      initPage();
 80054ec:	f000 f812 	bl	8005514 <initPage>
      break;
 80054f0:	e009      	b.n	8005506 <lcd_control_step+0x4e>

    case MODE1_PAGE:
      mode1Page();
 80054f2:	f000 f8eb 	bl	80056cc <mode1Page>
      break;
 80054f6:	e006      	b.n	8005506 <lcd_control_step+0x4e>

    case MODE2_PAGE:
      mode2Page();
 80054f8:	f000 fbe2 	bl	8005cc0 <mode2Page>
      break;
 80054fc:	e003      	b.n	8005506 <lcd_control_step+0x4e>
      leakPage();
#endif
      break;

    case EM_PAGE:
      emPage();
 80054fe:	f000 fdd7 	bl	80060b0 <emPage>
      break;
 8005502:	e000      	b.n	8005506 <lcd_control_step+0x4e>

    default:
      break;
 8005504:	bf00      	nop
  }
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000208 	.word	0x20000208
 8005510:	20000206 	.word	0x20000206

08005514 <initPage>:
/**
* @fn initPage(void)
* @brief Inicjalizacja wyswietlacza
*/
static void initPage(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af02      	add	r7, sp, #8
  cntTickInitPage++;
 800551a:	4b65      	ldr	r3, [pc, #404]	; (80056b0 <initPage+0x19c>)
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	4b63      	ldr	r3, [pc, #396]	; (80056b0 <initPage+0x19c>)
 8005524:	801a      	strh	r2, [r3, #0]

  switch (initFsm)
 8005526:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <initPage+0x1a0>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	f200 80ab 	bhi.w	8005686 <initPage+0x172>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <initPage+0x24>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800556d 	.word	0x0800556d
 800553c:	08005587 	.word	0x08005587
 8005540:	080055a3 	.word	0x080055a3
 8005544:	08005687 	.word	0x08005687
 8005548:	08005687 	.word	0x08005687
 800554c:	08005687 	.word	0x08005687
 8005550:	08005687 	.word	0x08005687
 8005554:	08005687 	.word	0x08005687
 8005558:	08005687 	.word	0x08005687
 800555c:	08005687 	.word	0x08005687
 8005560:	08005687 	.word	0x08005687
 8005564:	080055c3 	.word	0x080055c3
 8005568:	080055e3 	.word	0x080055e3
  {
    //Zresetuj wyswietlacz
    case 0:
      if (Nextion_Enhanced_NX3224K028_deviceReset()) initFsm++;
 800556c:	f7ff fe7a 	bl	8005264 <Nextion_Enhanced_NX3224K028_deviceReset>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8089 	beq.w	800568a <initPage+0x176>
 8005578:	4b4e      	ldr	r3, [pc, #312]	; (80056b4 <initPage+0x1a0>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	b2da      	uxtb	r2, r3
 8005580:	4b4c      	ldr	r3, [pc, #304]	; (80056b4 <initPage+0x1a0>)
 8005582:	701a      	strb	r2, [r3, #0]
      break;
 8005584:	e081      	b.n	800568a <initPage+0x176>

    //Odczekaj 150ms (jest to czas inicjalizacji wyswietlacza)
    case 1:
      if (cntTickInitPage > 150 * PERIOD_1MS)
 8005586:	4b4a      	ldr	r3, [pc, #296]	; (80056b0 <initPage+0x19c>)
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	2b96      	cmp	r3, #150	; 0x96
 800558c:	d97f      	bls.n	800568e <initPage+0x17a>
	{
	  cntTickInitPage = 0;
 800558e:	4b48      	ldr	r3, [pc, #288]	; (80056b0 <initPage+0x19c>)
 8005590:	2200      	movs	r2, #0
 8005592:	801a      	strh	r2, [r3, #0]
	  initFsm++;
 8005594:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <initPage+0x1a0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	b2da      	uxtb	r2, r3
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <initPage+0x1a0>)
 800559e:	701a      	strb	r2, [r3, #0]
	}
      break;
 80055a0:	e075      	b.n	800568e <initPage+0x17a>

      //Narysuj prostokat wyznaczajacy krawedzie LCD
    case 2:
      if (Nextion_Enhanced_NX3224K028_drawRectangle(0, 0, 320, 240, (const uint8_t *)"GRAY"))
 80055a2:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <initPage+0x1a4>)
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	23f0      	movs	r3, #240	; 0xf0
 80055a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80055ac:	2100      	movs	r1, #0
 80055ae:	2000      	movs	r0, #0
 80055b0:	f7ff fdd8 	bl	8005164 <Nextion_Enhanced_NX3224K028_drawRectangle>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d06b      	beq.n	8005692 <initPage+0x17e>
	{
#if USE_EXPANSION_BOARD == 1
	  initFsm++;
#else
	  initFsm = 11;
 80055ba:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <initPage+0x1a0>)
 80055bc:	220b      	movs	r2, #11
 80055be:	701a      	strb	r2, [r3, #0]
#endif
	}
      break;
 80055c0:	e067      	b.n	8005692 <initPage+0x17e>
      break;
#endif

      //Wyswietlaj przez 3 sekundy strone startowa
    case 11:
      if (cntTickInitPage >= 3 * PERIOD_1S)
 80055c2:	4b3b      	ldr	r3, [pc, #236]	; (80056b0 <initPage+0x19c>)
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d963      	bls.n	8005696 <initPage+0x182>
	{
	  cntTickInitPage = 0;
 80055ce:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <initPage+0x19c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	801a      	strh	r2, [r3, #0]
	  initFsm++;
 80055d4:	4b37      	ldr	r3, [pc, #220]	; (80056b4 <initPage+0x1a0>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <initPage+0x1a0>)
 80055de:	701a      	strb	r2, [r3, #0]
	}
      break;
 80055e0:	e059      	b.n	8005696 <initPage+0x182>

    case 12:
      //Sprawdz czy wykryto wyciek wodoru
      if (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin == 1)
 80055e2:	4b36      	ldr	r3, [pc, #216]	; (80056bc <initPage+0x1a8>)
 80055e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d10f      	bne.n	800560c <initPage+0xf8>
	{
	  //Wyciek wodoru wykryty, przejdz do strony LEAK_PAGE
	  if (Nextion_Enhanced_NX3224K028_loadNewPage(3))
 80055ec:	2003      	movs	r0, #3
 80055ee:	f7ff fe01 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d050      	beq.n	800569a <initPage+0x186>
	    {
	      mainStepFsm = LEAK_PAGE;
 80055f8:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <initPage+0x1ac>)
 80055fa:	2203      	movs	r2, #3
 80055fc:	701a      	strb	r2, [r3, #0]
	      initCplt = 1;
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <initPage+0x1b0>)
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
	      cntTickInitPage = 0;
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <initPage+0x19c>)
 8005606:	2200      	movs	r2, #0
 8005608:	801a      	strh	r2, [r3, #0]
	    }
	  break;
 800560a:	e046      	b.n	800569a <initPage+0x186>
	}

      //Sprawdz czy przycisk bezpieczenstwa nie jest wduszony
      if (RS485_RX_VERIFIED_DATA.emergencyButton == 1)
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <initPage+0x1a8>)
 800560e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10f      	bne.n	8005636 <initPage+0x122>
	{
	  //Przycisk bezpieczenstwa jest wcisniety, przejdz do strony EM_PAGE
	  if (Nextion_Enhanced_NX3224K028_loadNewPage(4))
 8005616:	2004      	movs	r0, #4
 8005618:	f7ff fdec 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03d      	beq.n	800569e <initPage+0x18a>
	    {
	      mainStepFsm = EM_PAGE;
 8005622:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <initPage+0x1ac>)
 8005624:	2204      	movs	r2, #4
 8005626:	701a      	strb	r2, [r3, #0]
	      initCplt = 1;
 8005628:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <initPage+0x1b0>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
	      cntTickInitPage = 0;
 800562e:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <initPage+0x19c>)
 8005630:	2200      	movs	r2, #0
 8005632:	801a      	strh	r2, [r3, #0]
	    }
	  break;
 8005634:	e033      	b.n	800569e <initPage+0x18a>
	}

      //Sprawdz czy przycisk trybu mode2 nie jest wduszony
      if ( (BUTTONS.mode1 == 0) && (BUTTONS.mode2 == 1) )
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <initPage+0x1b4>)
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <initPage+0x152>
 800563e:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <initPage+0x1b4>)
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d10f      	bne.n	8005666 <initPage+0x152>
	{
	  //Przycisk MODE 2 jest wcisniety, przejdz do strony MODE2_PAGE
	  if (Nextion_Enhanced_NX3224K028_loadNewPage(2))
 8005646:	2002      	movs	r0, #2
 8005648:	f7ff fdd4 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d027      	beq.n	80056a2 <initPage+0x18e>
	    {
	      mainStepFsm = MODE2_PAGE;
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <initPage+0x1ac>)
 8005654:	2202      	movs	r2, #2
 8005656:	701a      	strb	r2, [r3, #0]
	      initCplt = 1;
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <initPage+0x1b0>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
	      cntTickInitPage = 0;
 800565e:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <initPage+0x19c>)
 8005660:	2200      	movs	r2, #0
 8005662:	801a      	strh	r2, [r3, #0]
	    }
	  break;
 8005664:	e01d      	b.n	80056a2 <initPage+0x18e>
	}

      // Nie spelniono zadnej z powyzszych opcji, przejdz do domyslnego MODE1_PAGE
      if (Nextion_Enhanced_NX3224K028_loadNewPage(1))
 8005666:	2001      	movs	r0, #1
 8005668:	f7ff fdc4 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d019      	beq.n	80056a6 <initPage+0x192>
	{
	  mainStepFsm = MODE1_PAGE;
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <initPage+0x1ac>)
 8005674:	2201      	movs	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
	  initCplt = 1;
 8005678:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <initPage+0x1b0>)
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
	  cntTickInitPage = 0;
 800567e:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <initPage+0x19c>)
 8005680:	2200      	movs	r2, #0
 8005682:	801a      	strh	r2, [r3, #0]
	}
      break;
 8005684:	e00f      	b.n	80056a6 <initPage+0x192>

    default:
      break;
 8005686:	bf00      	nop
 8005688:	e00e      	b.n	80056a8 <initPage+0x194>
      break;
 800568a:	bf00      	nop
 800568c:	e00c      	b.n	80056a8 <initPage+0x194>
      break;
 800568e:	bf00      	nop
 8005690:	e00a      	b.n	80056a8 <initPage+0x194>
      break;
 8005692:	bf00      	nop
 8005694:	e008      	b.n	80056a8 <initPage+0x194>
      break;
 8005696:	bf00      	nop
 8005698:	e006      	b.n	80056a8 <initPage+0x194>
	  break;
 800569a:	bf00      	nop
 800569c:	e004      	b.n	80056a8 <initPage+0x194>
	  break;
 800569e:	bf00      	nop
 80056a0:	e002      	b.n	80056a8 <initPage+0x194>
	  break;
 80056a2:	bf00      	nop
 80056a4:	e000      	b.n	80056a8 <initPage+0x194>
      break;
 80056a6:	bf00      	nop
  }
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200001fc 	.word	0x200001fc
 80056b4:	20000207 	.word	0x20000207
 80056b8:	08008eac 	.word	0x08008eac
 80056bc:	20000544 	.word	0x20000544
 80056c0:	20000206 	.word	0x20000206
 80056c4:	20000208 	.word	0x20000208
 80056c8:	20000538 	.word	0x20000538

080056cc <mode1Page>:
/**
* @fn mode1Page(void)
* @brief Wyswietlanie informacji na LCD w trybie MODE_1
*/
static void mode1Page(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af02      	add	r7, sp, #8
  cntTickMode1Page++;
 80056d2:	4bb8      	ldr	r3, [pc, #736]	; (80059b4 <mode1Page+0x2e8>)
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	4bb6      	ldr	r3, [pc, #728]	; (80059b4 <mode1Page+0x2e8>)
 80056dc:	801a      	strh	r2, [r3, #0]

  //Sprawdz czy czas miedzy aktualizacjami minal
  if (cntTickMode1Page >= 5 * PERIOD_1MS)
 80056de:	4bb5      	ldr	r3, [pc, #724]	; (80059b4 <mode1Page+0x2e8>)
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	f240 82c3 	bls.w	8005c6e <mode1Page+0x5a2>
    {
      cntTickMode1Page = 0;
 80056e8:	4bb2      	ldr	r3, [pc, #712]	; (80059b4 <mode1Page+0x2e8>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	801a      	strh	r2, [r3, #0]

      //Wyswietlaj w pierwszej kolejnosci wartosci krytyczne (m.in paski postepu wymagajace czestego odswiezania)
      switch (mode1FsmHighVal)
 80056ee:	4bb2      	ldr	r3, [pc, #712]	; (80059b8 <mode1Page+0x2ec>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	f200 82bd 	bhi.w	8005c72 <mode1Page+0x5a6>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <mode1Page+0x34>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005729 	.word	0x08005729
 8005704:	08005779 	.word	0x08005779
 8005708:	080057dd 	.word	0x080057dd
 800570c:	0800582d 	.word	0x0800582d
 8005710:	0800587d 	.word	0x0800587d
 8005714:	080058e1 	.word	0x080058e1
 8005718:	08005931 	.word	0x08005931
 800571c:	08005955 	.word	0x08005955
 8005720:	08005c73 	.word	0x08005c73
 8005724:	08005971 	.word	0x08005971
      {
	//Pasek postepu napiecie ogniwa
	case 0:
	  if (RS485_RX_VERIFIED_DATA.FC_V.value <= 20.00)
 8005728:	4ba4      	ldr	r3, [pc, #656]	; (80059bc <mode1Page+0x2f0>)
 800572a:	edd3 7a00 	vldr	s15, [r3]
 800572e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573a:	d817      	bhi.n	800576c <mode1Page+0xa0>
	    {
	      if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "FCBr", RS485_RX_VERIFIED_DATA.FC_V.value, 60))
 800573c:	4b9f      	ldr	r3, [pc, #636]	; (80059bc <mode1Page+0x2f0>)
 800573e:	edd3 7a00 	vldr	s15, [r3]
 8005742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005746:	edc7 7a01 	vstr	s15, [r7, #4]
 800574a:	793b      	ldrb	r3, [r7, #4]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	223c      	movs	r2, #60	; 0x3c
 8005750:	4619      	mov	r1, r3
 8005752:	489b      	ldr	r0, [pc, #620]	; (80059c0 <mode1Page+0x2f4>)
 8005754:	f7ff fc8c 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <mode1Page+0xac>
		{
		  mode1FsmHighVal++;
 800575e:	4b96      	ldr	r3, [pc, #600]	; (80059b8 <mode1Page+0x2ec>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	4b94      	ldr	r3, [pc, #592]	; (80059b8 <mode1Page+0x2ec>)
 8005768:	701a      	strb	r2, [r3, #0]
		  break;
 800576a:	e287      	b.n	8005c7c <mode1Page+0x5b0>
		}
	    }
	  else
	    {
	      mode1FsmHighVal++;
 800576c:	4b92      	ldr	r3, [pc, #584]	; (80059b8 <mode1Page+0x2ec>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b90      	ldr	r3, [pc, #576]	; (80059b8 <mode1Page+0x2ec>)
 8005776:	701a      	strb	r2, [r3, #0]
	    }

	case 1:
	  if ((RS485_RX_VERIFIED_DATA.FC_V.value > 20.00) && (RS485_RX_VERIFIED_DATA.FC_V.value < 40.00))
 8005778:	4b90      	ldr	r3, [pc, #576]	; (80059bc <mode1Page+0x2f0>)
 800577a:	edd3 7a00 	vldr	s15, [r3]
 800577e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578a:	dd21      	ble.n	80057d0 <mode1Page+0x104>
 800578c:	4b8b      	ldr	r3, [pc, #556]	; (80059bc <mode1Page+0x2f0>)
 800578e:	edd3 7a00 	vldr	s15, [r3]
 8005792:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80059c4 <mode1Page+0x2f8>
 8005796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800579a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579e:	d517      	bpl.n	80057d0 <mode1Page+0x104>
	    {
	      if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "FCBy", RS485_RX_VERIFIED_DATA.FC_V.value, 60))
 80057a0:	4b86      	ldr	r3, [pc, #536]	; (80059bc <mode1Page+0x2f0>)
 80057a2:	edd3 7a00 	vldr	s15, [r3]
 80057a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80057ae:	793b      	ldrb	r3, [r7, #4]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	223c      	movs	r2, #60	; 0x3c
 80057b4:	4619      	mov	r1, r3
 80057b6:	4884      	ldr	r0, [pc, #528]	; (80059c8 <mode1Page+0x2fc>)
 80057b8:	f7ff fc5a 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <mode1Page+0x110>
		{
		  mode1FsmHighVal++;
 80057c2:	4b7d      	ldr	r3, [pc, #500]	; (80059b8 <mode1Page+0x2ec>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	3301      	adds	r3, #1
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4b7b      	ldr	r3, [pc, #492]	; (80059b8 <mode1Page+0x2ec>)
 80057cc:	701a      	strb	r2, [r3, #0]
		  break;
 80057ce:	e255      	b.n	8005c7c <mode1Page+0x5b0>
		}
	    }
	  else
	    {
	      mode1FsmHighVal++;
 80057d0:	4b79      	ldr	r3, [pc, #484]	; (80059b8 <mode1Page+0x2ec>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	4b77      	ldr	r3, [pc, #476]	; (80059b8 <mode1Page+0x2ec>)
 80057da:	701a      	strb	r2, [r3, #0]
	    }

	case 2:
	  if (RS485_RX_VERIFIED_DATA.FC_V.value >= 40.00)
 80057dc:	4b77      	ldr	r3, [pc, #476]	; (80059bc <mode1Page+0x2f0>)
 80057de:	edd3 7a00 	vldr	s15, [r3]
 80057e2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80059c4 <mode1Page+0x2f8>
 80057e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	db17      	blt.n	8005820 <mode1Page+0x154>
	    {
	      if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "FCBg", RS485_RX_VERIFIED_DATA.FC_V.value, 60))
 80057f0:	4b72      	ldr	r3, [pc, #456]	; (80059bc <mode1Page+0x2f0>)
 80057f2:	edd3 7a00 	vldr	s15, [r3]
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80057fe:	793b      	ldrb	r3, [r7, #4]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	223c      	movs	r2, #60	; 0x3c
 8005804:	4619      	mov	r1, r3
 8005806:	4871      	ldr	r0, [pc, #452]	; (80059cc <mode1Page+0x300>)
 8005808:	f7ff fc32 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <mode1Page+0x160>
		{
		  mode1FsmHighVal++;
 8005812:	4b69      	ldr	r3, [pc, #420]	; (80059b8 <mode1Page+0x2ec>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <mode1Page+0x2ec>)
 800581c:	701a      	strb	r2, [r3, #0]
		  break;
 800581e:	e22d      	b.n	8005c7c <mode1Page+0x5b0>
		}
	    }
	  else
	    {
	      mode1FsmHighVal++;
 8005820:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <mode1Page+0x2ec>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <mode1Page+0x2ec>)
 800582a:	701a      	strb	r2, [r3, #0]
	    }

	  //Pasek postepu napiecie superkondensatorow
	case 3:
	  if (RS485_RX_VERIFIED_DATA.SC_V.value <= 20.00)
 800582c:	4b63      	ldr	r3, [pc, #396]	; (80059bc <mode1Page+0x2f0>)
 800582e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005832:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800583a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583e:	d817      	bhi.n	8005870 <mode1Page+0x1a4>
	    {
	      if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "SCBr", RS485_RX_VERIFIED_DATA.SC_V.value, 60))
 8005840:	4b5e      	ldr	r3, [pc, #376]	; (80059bc <mode1Page+0x2f0>)
 8005842:	edd3 7a04 	vldr	s15, [r3, #16]
 8005846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584a:	edc7 7a01 	vstr	s15, [r7, #4]
 800584e:	793b      	ldrb	r3, [r7, #4]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	223c      	movs	r2, #60	; 0x3c
 8005854:	4619      	mov	r1, r3
 8005856:	485e      	ldr	r0, [pc, #376]	; (80059d0 <mode1Page+0x304>)
 8005858:	f7ff fc0a 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <mode1Page+0x1b0>
		{
		  mode1FsmHighVal++;
 8005862:	4b55      	ldr	r3, [pc, #340]	; (80059b8 <mode1Page+0x2ec>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <mode1Page+0x2ec>)
 800586c:	701a      	strb	r2, [r3, #0]
		  break;
 800586e:	e205      	b.n	8005c7c <mode1Page+0x5b0>
		}
	    }
	  else
	    {
	      mode1FsmHighVal++;
 8005870:	4b51      	ldr	r3, [pc, #324]	; (80059b8 <mode1Page+0x2ec>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	b2da      	uxtb	r2, r3
 8005878:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <mode1Page+0x2ec>)
 800587a:	701a      	strb	r2, [r3, #0]
	    }

	case 4:
	  if ((RS485_RX_VERIFIED_DATA.SC_V.value > 20.00) && (RS485_RX_VERIFIED_DATA.SC_V.value < 40.00))
 800587c:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <mode1Page+0x2f0>)
 800587e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005882:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800588a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588e:	dd21      	ble.n	80058d4 <mode1Page+0x208>
 8005890:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <mode1Page+0x2f0>)
 8005892:	edd3 7a04 	vldr	s15, [r3, #16]
 8005896:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80059c4 <mode1Page+0x2f8>
 800589a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a2:	d517      	bpl.n	80058d4 <mode1Page+0x208>
	    {
	      if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "SCBy", RS485_RX_VERIFIED_DATA.SC_V.value, 60))
 80058a4:	4b45      	ldr	r3, [pc, #276]	; (80059bc <mode1Page+0x2f0>)
 80058a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80058aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80058b2:	793b      	ldrb	r3, [r7, #4]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	223c      	movs	r2, #60	; 0x3c
 80058b8:	4619      	mov	r1, r3
 80058ba:	4846      	ldr	r0, [pc, #280]	; (80059d4 <mode1Page+0x308>)
 80058bc:	f7ff fbd8 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <mode1Page+0x214>
		{
		  mode1FsmHighVal++;
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <mode1Page+0x2ec>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <mode1Page+0x2ec>)
 80058d0:	701a      	strb	r2, [r3, #0]
		  break;
 80058d2:	e1d3      	b.n	8005c7c <mode1Page+0x5b0>
		}
	    }
	  else
	    {
	      mode1FsmHighVal++;
 80058d4:	4b38      	ldr	r3, [pc, #224]	; (80059b8 <mode1Page+0x2ec>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <mode1Page+0x2ec>)
 80058de:	701a      	strb	r2, [r3, #0]
	    }

	case 5:
	  if (RS485_RX_VERIFIED_DATA.SC_V.value >= 40.00)
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <mode1Page+0x2f0>)
 80058e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80058e6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80059c4 <mode1Page+0x2f8>
 80058ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	db17      	blt.n	8005924 <mode1Page+0x258>
	    {
	      if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "SCBg", RS485_RX_VERIFIED_DATA.SC_V.value, 60))
 80058f4:	4b31      	ldr	r3, [pc, #196]	; (80059bc <mode1Page+0x2f0>)
 80058f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80058fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8005902:	793b      	ldrb	r3, [r7, #4]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	223c      	movs	r2, #60	; 0x3c
 8005908:	4619      	mov	r1, r3
 800590a:	4833      	ldr	r0, [pc, #204]	; (80059d8 <mode1Page+0x30c>)
 800590c:	f7ff fbb0 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <mode1Page+0x264>
		{
		  mode1FsmHighVal++;
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <mode1Page+0x2ec>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <mode1Page+0x2ec>)
 8005920:	701a      	strb	r2, [r3, #0]
		  break;
 8005922:	e1ab      	b.n	8005c7c <mode1Page+0x5b0>
		}
	    }
	  else
	    {
	      mode1FsmHighVal++;
 8005924:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <mode1Page+0x2ec>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	b2da      	uxtb	r2, r3
 800592c:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <mode1Page+0x2ec>)
 800592e:	701a      	strb	r2, [r3, #0]
	    }

	  //Pasek postepu predkosc chwilowa
	case 6:
	  if (Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t*) "SB", RS485_RX_VERIFIED_DATA.interimSpeed, 50)) mode1FsmHighVal++;
 8005930:	4b22      	ldr	r3, [pc, #136]	; (80059bc <mode1Page+0x2f0>)
 8005932:	7f9b      	ldrb	r3, [r3, #30]
 8005934:	2232      	movs	r2, #50	; 0x32
 8005936:	4619      	mov	r1, r3
 8005938:	4828      	ldr	r0, [pc, #160]	; (80059dc <mode1Page+0x310>)
 800593a:	f7ff fb99 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8198 	beq.w	8005c76 <mode1Page+0x5aa>
 8005946:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <mode1Page+0x2ec>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <mode1Page+0x2ec>)
 8005950:	701a      	strb	r2, [r3, #0]
	  break;
 8005952:	e190      	b.n	8005c76 <mode1Page+0x5aa>

	  //Czas okrazenia (milisekundy)
	case 7:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "ms", RS485_RX_VERIFIED_DATA.laptime_miliseconds.value))
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <mode1Page+0x2f0>)
 8005956:	8b5b      	ldrh	r3, [r3, #26]
 8005958:	4619      	mov	r1, r3
 800595a:	4821      	ldr	r0, [pc, #132]	; (80059e0 <mode1Page+0x314>)
 800595c:	f7ff fada 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8189 	beq.w	8005c7a <mode1Page+0x5ae>
	    {
#if USE_EXPANSION_BOARD == 1
	      mode1FsmHighVal++;
#else
	      mode1FsmHighVal = 9;
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <mode1Page+0x2ec>)
 800596a:	2209      	movs	r2, #9
 800596c:	701a      	strb	r2, [r3, #0]
#endif
	    }
	  break;
 800596e:	e184      	b.n	8005c7a <mode1Page+0x5ae>
	      break;
#endif

	  //Wyswietlaj wartosci nie wymagajace tak czestego odswiezania
	case 9:
	  mode1FsmHighVal = 0;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <mode1Page+0x2ec>)
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]

	  switch (mode1FsmLowVal)
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <mode1Page+0x318>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b0a      	cmp	r3, #10
 800597c:	f200 815f 	bhi.w	8005c3e <mode1Page+0x572>
 8005980:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <mode1Page+0x2bc>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059e9 	.word	0x080059e9
 800598c:	08005a0f 	.word	0x08005a0f
 8005990:	08005a31 	.word	0x08005a31
 8005994:	08005a57 	.word	0x08005a57
 8005998:	08005a7d 	.word	0x08005a7d
 800599c:	08005aa1 	.word	0x08005aa1
 80059a0:	08005ac5 	.word	0x08005ac5
 80059a4:	08005ae7 	.word	0x08005ae7
 80059a8:	08005b0d 	.word	0x08005b0d
 80059ac:	08005b65 	.word	0x08005b65
 80059b0:	08005c03 	.word	0x08005c03
 80059b4:	200001fe 	.word	0x200001fe
 80059b8:	2000020a 	.word	0x2000020a
 80059bc:	20000544 	.word	0x20000544
 80059c0:	08008eb4 	.word	0x08008eb4
 80059c4:	42200000 	.word	0x42200000
 80059c8:	08008ebc 	.word	0x08008ebc
 80059cc:	08008ec4 	.word	0x08008ec4
 80059d0:	08008ecc 	.word	0x08008ecc
 80059d4:	08008ed4 	.word	0x08008ed4
 80059d8:	08008edc 	.word	0x08008edc
 80059dc:	08008ee4 	.word	0x08008ee4
 80059e0:	08008ee8 	.word	0x08008ee8
 80059e4:	20000209 	.word	0x20000209
	    {

	    //Temperatura ogniwa
	    case 0:
	      if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "temp", RS485_RX_VERIFIED_DATA.FC_TEMP.value)) mode1FsmLowVal++;
 80059e8:	4ba6      	ldr	r3, [pc, #664]	; (8005c84 <mode1Page+0x5b8>)
 80059ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80059ee:	eeb0 0a67 	vmov.f32	s0, s15
 80059f2:	48a5      	ldr	r0, [pc, #660]	; (8005c88 <mode1Page+0x5bc>)
 80059f4:	f7ff fac6 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8121 	beq.w	8005c42 <mode1Page+0x576>
 8005a00:	4ba2      	ldr	r3, [pc, #648]	; (8005c8c <mode1Page+0x5c0>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	3301      	adds	r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4ba0      	ldr	r3, [pc, #640]	; (8005c8c <mode1Page+0x5c0>)
 8005a0a:	701a      	strb	r2, [r3, #0]
	      break;
 8005a0c:	e119      	b.n	8005c42 <mode1Page+0x576>

	      //Obroty wentylatora ogniwa
	    case 1:
	      if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "RPM", RS485_RX_VERIFIED_DATA.fcFanRPM.value)) mode1FsmLowVal++;
 8005a0e:	4b9d      	ldr	r3, [pc, #628]	; (8005c84 <mode1Page+0x5b8>)
 8005a10:	8b9b      	ldrh	r3, [r3, #28]
 8005a12:	4619      	mov	r1, r3
 8005a14:	489e      	ldr	r0, [pc, #632]	; (8005c90 <mode1Page+0x5c4>)
 8005a16:	f7ff fa7d 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8112 	beq.w	8005c46 <mode1Page+0x57a>
 8005a22:	4b9a      	ldr	r3, [pc, #616]	; (8005c8c <mode1Page+0x5c0>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b98      	ldr	r3, [pc, #608]	; (8005c8c <mode1Page+0x5c0>)
 8005a2c:	701a      	strb	r2, [r3, #0]
	      break;
 8005a2e:	e10a      	b.n	8005c46 <mode1Page+0x57a>

	      //Napiecie ogniwa
	    case 2:
	      if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "FCV", RS485_RX_VERIFIED_DATA.FC_V.value)) mode1FsmLowVal++;
 8005a30:	4b94      	ldr	r3, [pc, #592]	; (8005c84 <mode1Page+0x5b8>)
 8005a32:	edd3 7a00 	vldr	s15, [r3]
 8005a36:	eeb0 0a67 	vmov.f32	s0, s15
 8005a3a:	4896      	ldr	r0, [pc, #600]	; (8005c94 <mode1Page+0x5c8>)
 8005a3c:	f7ff faa2 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8101 	beq.w	8005c4a <mode1Page+0x57e>
 8005a48:	4b90      	ldr	r3, [pc, #576]	; (8005c8c <mode1Page+0x5c0>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b8e      	ldr	r3, [pc, #568]	; (8005c8c <mode1Page+0x5c0>)
 8005a52:	701a      	strb	r2, [r3, #0]
	      break;
 8005a54:	e0f9      	b.n	8005c4a <mode1Page+0x57e>

	      //Napiecie superkondensatorow
	    case 3:
	      if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "SCV", RS485_RX_VERIFIED_DATA.SC_V.value)) mode1FsmLowVal++;
 8005a56:	4b8b      	ldr	r3, [pc, #556]	; (8005c84 <mode1Page+0x5b8>)
 8005a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a60:	488d      	ldr	r0, [pc, #564]	; (8005c98 <mode1Page+0x5cc>)
 8005a62:	f7ff fa8f 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80f0 	beq.w	8005c4e <mode1Page+0x582>
 8005a6e:	4b87      	ldr	r3, [pc, #540]	; (8005c8c <mode1Page+0x5c0>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	3301      	adds	r3, #1
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4b85      	ldr	r3, [pc, #532]	; (8005c8c <mode1Page+0x5c0>)
 8005a78:	701a      	strb	r2, [r3, #0]
	      break;
 8005a7a:	e0e8      	b.n	8005c4e <mode1Page+0x582>

	      //Predkosc chwilowa
	    case 4:
	      if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "V", RS485_RX_VERIFIED_DATA.interimSpeed)) mode1FsmLowVal++;
 8005a7c:	4b81      	ldr	r3, [pc, #516]	; (8005c84 <mode1Page+0x5b8>)
 8005a7e:	7f9b      	ldrb	r3, [r3, #30]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	4885      	ldr	r0, [pc, #532]	; (8005c9c <mode1Page+0x5d0>)
 8005a86:	f7ff fa45 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80e0 	beq.w	8005c52 <mode1Page+0x586>
 8005a92:	4b7e      	ldr	r3, [pc, #504]	; (8005c8c <mode1Page+0x5c0>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <mode1Page+0x5c0>)
 8005a9c:	701a      	strb	r2, [r3, #0]
	      break;
 8005a9e:	e0d8      	b.n	8005c52 <mode1Page+0x586>

	      //Predkosc srednia
	    case 5:
	      if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "Avg", RS485_RX_VERIFIED_DATA.averageSpeed)) mode1FsmLowVal++;
 8005aa0:	4b78      	ldr	r3, [pc, #480]	; (8005c84 <mode1Page+0x5b8>)
 8005aa2:	7fdb      	ldrb	r3, [r3, #31]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	487d      	ldr	r0, [pc, #500]	; (8005ca0 <mode1Page+0x5d4>)
 8005aaa:	f7ff fa33 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80d0 	beq.w	8005c56 <mode1Page+0x58a>
 8005ab6:	4b75      	ldr	r3, [pc, #468]	; (8005c8c <mode1Page+0x5c0>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	4b73      	ldr	r3, [pc, #460]	; (8005c8c <mode1Page+0x5c0>)
 8005ac0:	701a      	strb	r2, [r3, #0]
	      break;
 8005ac2:	e0c8      	b.n	8005c56 <mode1Page+0x58a>

	      //Czas okrazenia (minuty)
	    case 6:
	      if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "mi", RS485_RX_VERIFIED_DATA.laptime_minutes.value))mode1FsmLowVal++;
 8005ac4:	4b6f      	ldr	r3, [pc, #444]	; (8005c84 <mode1Page+0x5b8>)
 8005ac6:	8b1b      	ldrh	r3, [r3, #24]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4876      	ldr	r0, [pc, #472]	; (8005ca4 <mode1Page+0x5d8>)
 8005acc:	f7ff fa22 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80c1 	beq.w	8005c5a <mode1Page+0x58e>
 8005ad8:	4b6c      	ldr	r3, [pc, #432]	; (8005c8c <mode1Page+0x5c0>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	4b6a      	ldr	r3, [pc, #424]	; (8005c8c <mode1Page+0x5c0>)
 8005ae2:	701a      	strb	r2, [r3, #0]
	      break;
 8005ae4:	e0b9      	b.n	8005c5a <mode1Page+0x58e>

	      //Czas okrazenia (sekundy)
	    case 7:
	      if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "sec", RS485_RX_VERIFIED_DATA.laptime_seconds)) mode1FsmLowVal++;
 8005ae6:	4b67      	ldr	r3, [pc, #412]	; (8005c84 <mode1Page+0x5b8>)
 8005ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	486d      	ldr	r0, [pc, #436]	; (8005ca8 <mode1Page+0x5dc>)
 8005af2:	f7ff fa0f 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80b0 	beq.w	8005c5e <mode1Page+0x592>
 8005afe:	4b63      	ldr	r3, [pc, #396]	; (8005c8c <mode1Page+0x5c0>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	4b61      	ldr	r3, [pc, #388]	; (8005c8c <mode1Page+0x5c0>)
 8005b08:	701a      	strb	r2, [r3, #0]
	      break;
 8005b0a:	e0a8      	b.n	8005c5e <mode1Page+0x592>

	      //Sygnalizuj stan przycisku SUPPLY_BUTTON w postaci kolorowej obwodki na wokol ekranu (jezeli czerwona - zasilanie jest wylaczone)
	    case 8:
	      if (BUTTONS.powerSupply == 1)
 8005b0c:	4b67      	ldr	r3, [pc, #412]	; (8005cac <mode1Page+0x5e0>)
 8005b0e:	799b      	ldrb	r3, [r3, #6]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d113      	bne.n	8005b3c <mode1Page+0x470>
		{
		  if (Nextion_Enhanced_NX3224K028_drawRectangle(0, 0, 320, 240, (const uint8_t*) "GRAY")) mode1FsmLowVal++;
 8005b14:	4b66      	ldr	r3, [pc, #408]	; (8005cb0 <mode1Page+0x5e4>)
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	23f0      	movs	r3, #240	; 0xf0
 8005b1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b1e:	2100      	movs	r1, #0
 8005b20:	2000      	movs	r0, #0
 8005b22:	f7ff fb1f 	bl	8005164 <Nextion_Enhanced_NX3224K028_drawRectangle>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 809a 	beq.w	8005c62 <mode1Page+0x596>
 8005b2e:	4b57      	ldr	r3, [pc, #348]	; (8005c8c <mode1Page+0x5c0>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b55      	ldr	r3, [pc, #340]	; (8005c8c <mode1Page+0x5c0>)
 8005b38:	701a      	strb	r2, [r3, #0]
		}
	      else
		{
		  if (Nextion_Enhanced_NX3224K028_drawRectangle(0, 0, 320, 240, (const uint8_t*) "RED")) mode1FsmLowVal++;
		}
	      break;
 8005b3a:	e092      	b.n	8005c62 <mode1Page+0x596>
		  if (Nextion_Enhanced_NX3224K028_drawRectangle(0, 0, 320, 240, (const uint8_t*) "RED")) mode1FsmLowVal++;
 8005b3c:	4b5d      	ldr	r3, [pc, #372]	; (8005cb4 <mode1Page+0x5e8>)
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	23f0      	movs	r3, #240	; 0xf0
 8005b42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b46:	2100      	movs	r1, #0
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f7ff fb0b 	bl	8005164 <Nextion_Enhanced_NX3224K028_drawRectangle>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8086 	beq.w	8005c62 <mode1Page+0x596>
 8005b56:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <mode1Page+0x5c0>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <mode1Page+0x5c0>)
 8005b60:	701a      	strb	r2, [r3, #0]
	      break;
 8005b62:	e07e      	b.n	8005c62 <mode1Page+0x596>

	      //Tryby ogniwa
	    case 9:
	      if ((BUTTONS.fuelcellOff == 1) && (BUTTONS.fuelcellPrepareToRace == 0) && (BUTTONS.fuelcellRace == 0))
 8005b64:	4b51      	ldr	r3, [pc, #324]	; (8005cac <mode1Page+0x5e0>)
 8005b66:	7a1b      	ldrb	r3, [r3, #8]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d115      	bne.n	8005b98 <mode1Page+0x4cc>
 8005b6c:	4b4f      	ldr	r3, [pc, #316]	; (8005cac <mode1Page+0x5e0>)
 8005b6e:	7a5b      	ldrb	r3, [r3, #9]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d111      	bne.n	8005b98 <mode1Page+0x4cc>
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <mode1Page+0x5e0>)
 8005b76:	7a9b      	ldrb	r3, [r3, #10]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10d      	bne.n	8005b98 <mode1Page+0x4cc>
		{
		  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "FCM", 1)) mode1FsmLowVal++;	// Fuelcell Off
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	484e      	ldr	r0, [pc, #312]	; (8005cb8 <mode1Page+0x5ec>)
 8005b80:	f7ff f9c8 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d03a      	beq.n	8005c00 <mode1Page+0x534>
 8005b8a:	4b40      	ldr	r3, [pc, #256]	; (8005c8c <mode1Page+0x5c0>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <mode1Page+0x5c0>)
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e033      	b.n	8005c00 <mode1Page+0x534>
		}
	      else if ((BUTTONS.fuelcellOff == 0) && (BUTTONS.fuelcellPrepareToRace == 0) && (BUTTONS.fuelcellRace == 0))
 8005b98:	4b44      	ldr	r3, [pc, #272]	; (8005cac <mode1Page+0x5e0>)
 8005b9a:	7a1b      	ldrb	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d115      	bne.n	8005bcc <mode1Page+0x500>
 8005ba0:	4b42      	ldr	r3, [pc, #264]	; (8005cac <mode1Page+0x5e0>)
 8005ba2:	7a5b      	ldrb	r3, [r3, #9]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d111      	bne.n	8005bcc <mode1Page+0x500>
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <mode1Page+0x5e0>)
 8005baa:	7a9b      	ldrb	r3, [r3, #10]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <mode1Page+0x500>
		{
		  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "FCM", 2)) mode1FsmLowVal++;	// Fuelcell prepare to race
 8005bb0:	2102      	movs	r1, #2
 8005bb2:	4841      	ldr	r0, [pc, #260]	; (8005cb8 <mode1Page+0x5ec>)
 8005bb4:	f7ff f9ae 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <mode1Page+0x534>
 8005bbe:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <mode1Page+0x5c0>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <mode1Page+0x5c0>)
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e019      	b.n	8005c00 <mode1Page+0x534>
		}
	      else if ((BUTTONS.fuelcellOff == 0) && (BUTTONS.fuelcellPrepareToRace == 0) && (BUTTONS.fuelcellRace == 1))
 8005bcc:	4b37      	ldr	r3, [pc, #220]	; (8005cac <mode1Page+0x5e0>)
 8005bce:	7a1b      	ldrb	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d148      	bne.n	8005c66 <mode1Page+0x59a>
 8005bd4:	4b35      	ldr	r3, [pc, #212]	; (8005cac <mode1Page+0x5e0>)
 8005bd6:	7a5b      	ldrb	r3, [r3, #9]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d144      	bne.n	8005c66 <mode1Page+0x59a>
 8005bdc:	4b33      	ldr	r3, [pc, #204]	; (8005cac <mode1Page+0x5e0>)
 8005bde:	7a9b      	ldrb	r3, [r3, #10]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d140      	bne.n	8005c66 <mode1Page+0x59a>
		{
		  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "FCM", 3)) mode1FsmLowVal++;	// Fuelcell prepare to race
 8005be4:	2103      	movs	r1, #3
 8005be6:	4834      	ldr	r0, [pc, #208]	; (8005cb8 <mode1Page+0x5ec>)
 8005be8:	f7ff f994 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d039      	beq.n	8005c66 <mode1Page+0x59a>
 8005bf2:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <mode1Page+0x5c0>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <mode1Page+0x5c0>)
 8005bfc:	701a      	strb	r2, [r3, #0]
		}
	      break;
 8005bfe:	e032      	b.n	8005c66 <mode1Page+0x59a>
 8005c00:	e031      	b.n	8005c66 <mode1Page+0x59a>

	      //Stan superkondensatorow (wlaczone lub wylaczona)
	    case 10:
	      if (BUTTONS.scClose == 0)
 8005c02:	4b2a      	ldr	r3, [pc, #168]	; (8005cac <mode1Page+0x5e0>)
 8005c04:	79db      	ldrb	r3, [r3, #7]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <mode1Page+0x554>
		{
		  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "SCM", 1)) mode1FsmLowVal = 0;  // supercapacitors off
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	482b      	ldr	r0, [pc, #172]	; (8005cbc <mode1Page+0x5f0>)
 8005c0e:	f7ff f981 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d028      	beq.n	8005c6a <mode1Page+0x59e>
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <mode1Page+0x5c0>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
		}
	      else if (BUTTONS.scClose == 1)
		{
		  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "SCM", 2)) mode1FsmLowVal = 0;	// supercapacitors on
		}
	      break;
 8005c1e:	e024      	b.n	8005c6a <mode1Page+0x59e>
	      else if (BUTTONS.scClose == 1)
 8005c20:	4b22      	ldr	r3, [pc, #136]	; (8005cac <mode1Page+0x5e0>)
 8005c22:	79db      	ldrb	r3, [r3, #7]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d120      	bne.n	8005c6a <mode1Page+0x59e>
		  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "SCM", 2)) mode1FsmLowVal = 0;	// supercapacitors on
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4824      	ldr	r0, [pc, #144]	; (8005cbc <mode1Page+0x5f0>)
 8005c2c:	f7ff f972 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d019      	beq.n	8005c6a <mode1Page+0x59e>
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <mode1Page+0x5c0>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
	      break;
 8005c3c:	e015      	b.n	8005c6a <mode1Page+0x59e>

	    default:
	      break;
 8005c3e:	bf00      	nop
 8005c40:	e017      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c42:	bf00      	nop
 8005c44:	e015      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c46:	bf00      	nop
 8005c48:	e013      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c4a:	bf00      	nop
 8005c4c:	e011      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c4e:	bf00      	nop
 8005c50:	e00f      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c52:	bf00      	nop
 8005c54:	e00d      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c56:	bf00      	nop
 8005c58:	e00b      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c5a:	bf00      	nop
 8005c5c:	e009      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c5e:	bf00      	nop
 8005c60:	e007      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c62:	bf00      	nop
 8005c64:	e005      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c66:	bf00      	nop
 8005c68:	e003      	b.n	8005c72 <mode1Page+0x5a6>
	      break;
 8005c6a:	bf00      	nop

	  break;
	    }

	default:
	  break;
 8005c6c:	e001      	b.n	8005c72 <mode1Page+0x5a6>
	}
    }
 8005c6e:	bf00      	nop
 8005c70:	e004      	b.n	8005c7c <mode1Page+0x5b0>
	  break;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <mode1Page+0x5b0>
	  break;
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <mode1Page+0x5b0>
	  break;
 8005c7a:	bf00      	nop
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000544 	.word	0x20000544
 8005c88:	08008eec 	.word	0x08008eec
 8005c8c:	20000209 	.word	0x20000209
 8005c90:	08008ef4 	.word	0x08008ef4
 8005c94:	08008ef8 	.word	0x08008ef8
 8005c98:	08008efc 	.word	0x08008efc
 8005c9c:	08008f00 	.word	0x08008f00
 8005ca0:	08008f04 	.word	0x08008f04
 8005ca4:	08008f08 	.word	0x08008f08
 8005ca8:	08008f0c 	.word	0x08008f0c
 8005cac:	20000538 	.word	0x20000538
 8005cb0:	08008eac 	.word	0x08008eac
 8005cb4:	08008f10 	.word	0x08008f10
 8005cb8:	08008f14 	.word	0x08008f14
 8005cbc:	08008f18 	.word	0x08008f18

08005cc0 <mode2Page>:
/**
* @fn mode2Page(void)
* @brief Wyswietlanie informacji na LCD w trybie MODE_2
*/
static void mode2Page(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af02      	add	r7, sp, #8
  cntTickMode2Page++;
 8005cc6:	4bb3      	ldr	r3, [pc, #716]	; (8005f94 <mode2Page+0x2d4>)
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	4bb1      	ldr	r3, [pc, #708]	; (8005f94 <mode2Page+0x2d4>)
 8005cd0:	801a      	strh	r2, [r3, #0]

  //Sprawdz czy czas juz minal
  if (cntTickMode2Page >= 5 * PERIOD_1MS)
 8005cd2:	4bb0      	ldr	r3, [pc, #704]	; (8005f94 <mode2Page+0x2d4>)
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	f240 81b4 	bls.w	8006044 <mode2Page+0x384>
    {
      cntTickMode2Page = 0;
 8005cdc:	4bad      	ldr	r3, [pc, #692]	; (8005f94 <mode2Page+0x2d4>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	801a      	strh	r2, [r3, #0]

      switch (mode2Fsm)
 8005ce2:	4bad      	ldr	r3, [pc, #692]	; (8005f98 <mode2Page+0x2d8>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	f200 81ae 	bhi.w	8006048 <mode2Page+0x388>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <mode2Page+0x34>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d39 	.word	0x08005d39
 8005cf8:	08005d61 	.word	0x08005d61
 8005cfc:	08005d87 	.word	0x08005d87
 8005d00:	08005dad 	.word	0x08005dad
 8005d04:	08005ddd 	.word	0x08005ddd
 8005d08:	08005e03 	.word	0x08005e03
 8005d0c:	08005e29 	.word	0x08005e29
 8005d10:	08005e4f 	.word	0x08005e4f
 8005d14:	08005e71 	.word	0x08005e71
 8005d18:	08005eb9 	.word	0x08005eb9
 8005d1c:	08005edb 	.word	0x08005edb
 8005d20:	08005f23 	.word	0x08005f23
 8005d24:	08005f49 	.word	0x08005f49
 8005d28:	08005f6f 	.word	0x08005f6f
 8005d2c:	08005fe5 	.word	0x08005fe5
 8005d30:	08006007 	.word	0x08006007
 8005d34:	08006029 	.word	0x08006029
	{
	//Szara obwodka wokol ekranu
	case 0:
	  if (Nextion_Enhanced_NX3224K028_drawRectangle(0, 0, 320, 240, (const uint8_t *)"GRAY")) mode2Fsm++;
 8005d38:	4b98      	ldr	r3, [pc, #608]	; (8005f9c <mode2Page+0x2dc>)
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	23f0      	movs	r3, #240	; 0xf0
 8005d3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005d42:	2100      	movs	r1, #0
 8005d44:	2000      	movs	r0, #0
 8005d46:	f7ff fa0d 	bl	8005164 <Nextion_Enhanced_NX3224K028_drawRectangle>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 817d 	beq.w	800604c <mode2Page+0x38c>
 8005d52:	4b91      	ldr	r3, [pc, #580]	; (8005f98 <mode2Page+0x2d8>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	3301      	adds	r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b8f      	ldr	r3, [pc, #572]	; (8005f98 <mode2Page+0x2d8>)
 8005d5c:	701a      	strb	r2, [r3, #0]
	  break;
 8005d5e:	e175      	b.n	800604c <mode2Page+0x38c>

	  //Prad ogniwo -> superkondensatory
	case 1:
	  if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "FCSCA", RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_FC_TO_SC.value)) mode2Fsm++;
 8005d60:	4b8f      	ldr	r3, [pc, #572]	; (8005fa0 <mode2Page+0x2e0>)
 8005d62:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d66:	eeb0 0a67 	vmov.f32	s0, s15
 8005d6a:	488e      	ldr	r0, [pc, #568]	; (8005fa4 <mode2Page+0x2e4>)
 8005d6c:	f7ff f90a 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 816c 	beq.w	8006050 <mode2Page+0x390>
 8005d78:	4b87      	ldr	r3, [pc, #540]	; (8005f98 <mode2Page+0x2d8>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b85      	ldr	r3, [pc, #532]	; (8005f98 <mode2Page+0x2d8>)
 8005d82:	701a      	strb	r2, [r3, #0]
	  break;
 8005d84:	e164      	b.n	8006050 <mode2Page+0x390>

	  //Prad superkondensatory -> silnik
	case 2:
	  if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "SCMA", RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_SC_TO_MOTOR.value)) mode2Fsm++;
 8005d86:	4b86      	ldr	r3, [pc, #536]	; (8005fa0 <mode2Page+0x2e0>)
 8005d88:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d90:	4885      	ldr	r0, [pc, #532]	; (8005fa8 <mode2Page+0x2e8>)
 8005d92:	f7ff f8f7 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 815b 	beq.w	8006054 <mode2Page+0x394>
 8005d9e:	4b7e      	ldr	r3, [pc, #504]	; (8005f98 <mode2Page+0x2d8>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4b7c      	ldr	r3, [pc, #496]	; (8005f98 <mode2Page+0x2d8>)
 8005da8:	701a      	strb	r2, [r3, #0]
	  break;
 8005daa:	e153      	b.n	8006054 <mode2Page+0x394>

	  //Sumaryczny pobor pradu
	case 3:
	  if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "TotalPWRA",
	  (RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_FC_TO_SC.value+ RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_SC_TO_MOTOR.value))) mode2Fsm++;
 8005dac:	4b7c      	ldr	r3, [pc, #496]	; (8005fa0 <mode2Page+0x2e0>)
 8005dae:	ed93 7a02 	vldr	s14, [r3, #8]
 8005db2:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <mode2Page+0x2e0>)
 8005db4:	edd3 7a03 	vldr	s15, [r3, #12]
	  if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "TotalPWRA",
 8005db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005dc0:	487a      	ldr	r0, [pc, #488]	; (8005fac <mode2Page+0x2ec>)
 8005dc2:	f7ff f8df 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8145 	beq.w	8006058 <mode2Page+0x398>
	  (RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_FC_TO_SC.value+ RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_SC_TO_MOTOR.value))) mode2Fsm++;
 8005dce:	4b72      	ldr	r3, [pc, #456]	; (8005f98 <mode2Page+0x2d8>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	4b70      	ldr	r3, [pc, #448]	; (8005f98 <mode2Page+0x2d8>)
 8005dd8:	701a      	strb	r2, [r3, #0]
	  break;
 8005dda:	e13d      	b.n	8006058 <mode2Page+0x398>

	  //PWM mosfeta znajdujacego sie pomiedzy ogniwem a superkondensatorami
	case 4:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "MFCSCPWM", RS485_RX_VERIFIED_DATA.fcToScMosfetPWM)) mode2Fsm++;
 8005ddc:	4b70      	ldr	r3, [pc, #448]	; (8005fa0 <mode2Page+0x2e0>)
 8005dde:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4619      	mov	r1, r3
 8005de6:	4872      	ldr	r0, [pc, #456]	; (8005fb0 <mode2Page+0x2f0>)
 8005de8:	f7ff f894 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8134 	beq.w	800605c <mode2Page+0x39c>
 8005df4:	4b68      	ldr	r3, [pc, #416]	; (8005f98 <mode2Page+0x2d8>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	4b66      	ldr	r3, [pc, #408]	; (8005f98 <mode2Page+0x2d8>)
 8005dfe:	701a      	strb	r2, [r3, #0]
	  break;
 8005e00:	e12c      	b.n	800605c <mode2Page+0x39c>

	  //PWM silnika
	case 5:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "MOTORPWM", RS485_RX_VERIFIED_DATA.motorPWM)) mode2Fsm++;
 8005e02:	4b67      	ldr	r3, [pc, #412]	; (8005fa0 <mode2Page+0x2e0>)
 8005e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4869      	ldr	r0, [pc, #420]	; (8005fb4 <mode2Page+0x2f4>)
 8005e0e:	f7ff f881 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8123 	beq.w	8006060 <mode2Page+0x3a0>
 8005e1a:	4b5f      	ldr	r3, [pc, #380]	; (8005f98 <mode2Page+0x2d8>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4b5d      	ldr	r3, [pc, #372]	; (8005f98 <mode2Page+0x2d8>)
 8005e24:	701a      	strb	r2, [r3, #0]
	  break;
 8005e26:	e11b      	b.n	8006060 <mode2Page+0x3a0>

	  //Odczyt napiecia z czujnika wodoru
	case 6:
	  if (Nextion_Enhanced_NX3224K028_writeFloatToControl((const uint8_t*) "H2sensor", RS485_RX_VERIFIED_DATA.H2_SENSOR_V.value)) mode2Fsm++;
 8005e28:	4b5d      	ldr	r3, [pc, #372]	; (8005fa0 <mode2Page+0x2e0>)
 8005e2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e32:	4861      	ldr	r0, [pc, #388]	; (8005fb8 <mode2Page+0x2f8>)
 8005e34:	f7ff f8a6 	bl	8004f84 <Nextion_Enhanced_NX3224K028_writeFloatToControl>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8112 	beq.w	8006064 <mode2Page+0x3a4>
 8005e40:	4b55      	ldr	r3, [pc, #340]	; (8005f98 <mode2Page+0x2d8>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	4b53      	ldr	r3, [pc, #332]	; (8005f98 <mode2Page+0x2d8>)
 8005e4a:	701a      	strb	r2, [r3, #0]
	  break;
 8005e4c:	e10a      	b.n	8006064 <mode2Page+0x3a4>

	  //Kod bledu watchdoga
	case 7:
	  if (Nextion_Enhanced_NX3224K028_writeFltToControl((const uint8_t*) "watchdog", watchdog_flt)) mode2Fsm++;
 8005e4e:	4b5b      	ldr	r3, [pc, #364]	; (8005fbc <mode2Page+0x2fc>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	485a      	ldr	r0, [pc, #360]	; (8005fc0 <mode2Page+0x300>)
 8005e56:	f7ff f8d3 	bl	8005000 <Nextion_Enhanced_NX3224K028_writeFltToControl>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8103 	beq.w	8006068 <mode2Page+0x3a8>
 8005e62:	4b4d      	ldr	r3, [pc, #308]	; (8005f98 <mode2Page+0x2d8>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <mode2Page+0x2d8>)
 8005e6c:	701a      	strb	r2, [r3, #0]
	  break;
 8005e6e:	e0fb      	b.n	8006068 <mode2Page+0x3a8>

	case 8:
	  if (watchdog_flt == 0x00)
 8005e70:	4b52      	ldr	r3, [pc, #328]	; (8005fbc <mode2Page+0x2fc>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10f      	bne.n	8005e98 <mode2Page+0x1d8>
	    {
	      if (Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t*) "watchdog", 2016)) mode2Fsm++;
 8005e78:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8005e7c:	4850      	ldr	r0, [pc, #320]	; (8005fc0 <mode2Page+0x300>)
 8005e7e:	f7ff f939 	bl	80050f4 <Nextion_Enhanced_NX3224K028_changeControlColor>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80f1 	beq.w	800606c <mode2Page+0x3ac>
 8005e8a:	4b43      	ldr	r3, [pc, #268]	; (8005f98 <mode2Page+0x2d8>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <mode2Page+0x2d8>)
 8005e94:	701a      	strb	r2, [r3, #0]
	    }
	  else
	    {
	      if (Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t*) "watchdog", 63488)) mode2Fsm++;
	    }
	  break;
 8005e96:	e0e9      	b.n	800606c <mode2Page+0x3ac>
	      if (Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t*) "watchdog", 63488)) mode2Fsm++;
 8005e98:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8005e9c:	4848      	ldr	r0, [pc, #288]	; (8005fc0 <mode2Page+0x300>)
 8005e9e:	f7ff f929 	bl	80050f4 <Nextion_Enhanced_NX3224K028_changeControlColor>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80e1 	beq.w	800606c <mode2Page+0x3ac>
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <mode2Page+0x2d8>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <mode2Page+0x2d8>)
 8005eb4:	701a      	strb	r2, [r3, #0]
	  break;
 8005eb6:	e0d9      	b.n	800606c <mode2Page+0x3ac>

	  //Kod bledu modulu komunikacji
	case 9:
	  if (Nextion_Enhanced_NX3224K028_writeFltToControl((const uint8_t*) "rs485", rs485_flt)) mode2Fsm++;
 8005eb8:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <mode2Page+0x304>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4842      	ldr	r0, [pc, #264]	; (8005fc8 <mode2Page+0x308>)
 8005ec0:	f7ff f89e 	bl	8005000 <Nextion_Enhanced_NX3224K028_writeFltToControl>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80d2 	beq.w	8006070 <mode2Page+0x3b0>
 8005ecc:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <mode2Page+0x2d8>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	4b30      	ldr	r3, [pc, #192]	; (8005f98 <mode2Page+0x2d8>)
 8005ed6:	701a      	strb	r2, [r3, #0]
	  break;
 8005ed8:	e0ca      	b.n	8006070 <mode2Page+0x3b0>

	case 10:
	  if (rs485_flt == 0x00)
 8005eda:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <mode2Page+0x304>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10f      	bne.n	8005f02 <mode2Page+0x242>
	    {
	      if (Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t*) "rs485", 2016)) mode2Fsm++;
 8005ee2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8005ee6:	4838      	ldr	r0, [pc, #224]	; (8005fc8 <mode2Page+0x308>)
 8005ee8:	f7ff f904 	bl	80050f4 <Nextion_Enhanced_NX3224K028_changeControlColor>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80c0 	beq.w	8006074 <mode2Page+0x3b4>
 8005ef4:	4b28      	ldr	r3, [pc, #160]	; (8005f98 <mode2Page+0x2d8>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <mode2Page+0x2d8>)
 8005efe:	701a      	strb	r2, [r3, #0]
	    }
	  else
	    {
	      if (Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t*) "rs485", 63488)) mode2Fsm++;
	    }
	  break;
 8005f00:	e0b8      	b.n	8006074 <mode2Page+0x3b4>
	      if (Nextion_Enhanced_NX3224K028_changeControlColor((const uint8_t*) "rs485", 63488)) mode2Fsm++;
 8005f02:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8005f06:	4830      	ldr	r0, [pc, #192]	; (8005fc8 <mode2Page+0x308>)
 8005f08:	f7ff f8f4 	bl	80050f4 <Nextion_Enhanced_NX3224K028_changeControlColor>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80b0 	beq.w	8006074 <mode2Page+0x3b4>
 8005f14:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <mode2Page+0x2d8>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <mode2Page+0x2d8>)
 8005f1e:	701a      	strb	r2, [r3, #0]
	  break;
 8005f20:	e0a8      	b.n	8006074 <mode2Page+0x3b4>

	  //Czas pracy systemu (godziny)
	case 11:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "hours", timers_mainTimeHours)) mode2Fsm++;
 8005f22:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <mode2Page+0x30c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4828      	ldr	r0, [pc, #160]	; (8005fd0 <mode2Page+0x310>)
 8005f2e:	f7fe fff1 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 809f 	beq.w	8006078 <mode2Page+0x3b8>
 8005f3a:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <mode2Page+0x2d8>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <mode2Page+0x2d8>)
 8005f44:	701a      	strb	r2, [r3, #0]
	  break;
 8005f46:	e097      	b.n	8006078 <mode2Page+0x3b8>

	  //Czas pracy systemu (minuty)
	case 12:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "minutes", timers_mainTimeMinutes)) mode2Fsm++;
 8005f48:	4b22      	ldr	r3, [pc, #136]	; (8005fd4 <mode2Page+0x314>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4619      	mov	r1, r3
 8005f52:	4821      	ldr	r0, [pc, #132]	; (8005fd8 <mode2Page+0x318>)
 8005f54:	f7fe ffde 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 808e 	beq.w	800607c <mode2Page+0x3bc>
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <mode2Page+0x2d8>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <mode2Page+0x2d8>)
 8005f6a:	701a      	strb	r2, [r3, #0]
	  break;
 8005f6c:	e086      	b.n	800607c <mode2Page+0x3bc>

	  //Czas pracy systemu (sekundy)
	case 13:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "seconds", timers_mainTimeSeconds)) mode2Fsm++;
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <mode2Page+0x31c>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	4819      	ldr	r0, [pc, #100]	; (8005fe0 <mode2Page+0x320>)
 8005f7a:	f7fe ffcb 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d07d      	beq.n	8006080 <mode2Page+0x3c0>
 8005f84:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <mode2Page+0x2d8>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	4b02      	ldr	r3, [pc, #8]	; (8005f98 <mode2Page+0x2d8>)
 8005f8e:	701a      	strb	r2, [r3, #0]
	  break;
 8005f90:	e076      	b.n	8006080 <mode2Page+0x3c0>
 8005f92:	bf00      	nop
 8005f94:	20000200 	.word	0x20000200
 8005f98:	2000020b 	.word	0x2000020b
 8005f9c:	08008eac 	.word	0x08008eac
 8005fa0:	20000544 	.word	0x20000544
 8005fa4:	08008f1c 	.word	0x08008f1c
 8005fa8:	08008f24 	.word	0x08008f24
 8005fac:	08008f2c 	.word	0x08008f2c
 8005fb0:	08008f38 	.word	0x08008f38
 8005fb4:	08008f44 	.word	0x08008f44
 8005fb8:	08008f50 	.word	0x08008f50
 8005fbc:	20000588 	.word	0x20000588
 8005fc0:	08008f5c 	.word	0x08008f5c
 8005fc4:	20000009 	.word	0x20000009
 8005fc8:	08008f68 	.word	0x08008f68
 8005fcc:	20000571 	.word	0x20000571
 8005fd0:	08008f70 	.word	0x08008f70
 8005fd4:	20000578 	.word	0x20000578
 8005fd8:	08008f78 	.word	0x08008f78
 8005fdc:	20000580 	.word	0x20000580
 8005fe0:	08008f80 	.word	0x08008f80

	  //Sredni czas trwania obiegu petli hydrogreen_step1kHz()
	case 14:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "avg_cycle", timers_avgSysCyclePeriod)) mode2Fsm++;
 8005fe4:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <mode2Page+0x3d4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	4619      	mov	r1, r3
 8005fec:	482a      	ldr	r0, [pc, #168]	; (8006098 <mode2Page+0x3d8>)
 8005fee:	f7fe ff91 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d045      	beq.n	8006084 <mode2Page+0x3c4>
 8005ff8:	4b28      	ldr	r3, [pc, #160]	; (800609c <mode2Page+0x3dc>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b26      	ldr	r3, [pc, #152]	; (800609c <mode2Page+0x3dc>)
 8006002:	701a      	strb	r2, [r3, #0]
	  break;
 8006004:	e03e      	b.n	8006084 <mode2Page+0x3c4>

	  //Najmniejszy zanotowany czas trwania obiegu petli hydrogreen_step1kHz()
	case 15:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "min_cycle", timers_minSysCyclePeriod)) mode2Fsm++;
 8006006:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <mode2Page+0x3e0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	4825      	ldr	r0, [pc, #148]	; (80060a4 <mode2Page+0x3e4>)
 8006010:	f7fe ff80 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d036      	beq.n	8006088 <mode2Page+0x3c8>
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <mode2Page+0x3dc>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4b1e      	ldr	r3, [pc, #120]	; (800609c <mode2Page+0x3dc>)
 8006024:	701a      	strb	r2, [r3, #0]
	  break;
 8006026:	e02f      	b.n	8006088 <mode2Page+0x3c8>

	  //Najwiekszy zanotowany czas trwania obiegu petli hydrogreen_step1kHz()
	case 16:
	  if (Nextion_Enhanced_NX3224K028_writeNumberToControl((const uint8_t*) "max_cycle", timers_maxSysCyclePeriod)) mode2Fsm = 0;
 8006028:	4b1f      	ldr	r3, [pc, #124]	; (80060a8 <mode2Page+0x3e8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	4619      	mov	r1, r3
 8006030:	481e      	ldr	r0, [pc, #120]	; (80060ac <mode2Page+0x3ec>)
 8006032:	f7fe ff6f 	bl	8004f14 <Nextion_Enhanced_NX3224K028_writeNumberToControl>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d027      	beq.n	800608c <mode2Page+0x3cc>
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <mode2Page+0x3dc>)
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
	  break;
 8006042:	e023      	b.n	800608c <mode2Page+0x3cc>

	default:
	  break;
	}
    }
 8006044:	bf00      	nop
 8006046:	e022      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006048:	bf00      	nop
 800604a:	e020      	b.n	800608e <mode2Page+0x3ce>
	  break;
 800604c:	bf00      	nop
 800604e:	e01e      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006050:	bf00      	nop
 8006052:	e01c      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006054:	bf00      	nop
 8006056:	e01a      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006058:	bf00      	nop
 800605a:	e018      	b.n	800608e <mode2Page+0x3ce>
	  break;
 800605c:	bf00      	nop
 800605e:	e016      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006060:	bf00      	nop
 8006062:	e014      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006064:	bf00      	nop
 8006066:	e012      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006068:	bf00      	nop
 800606a:	e010      	b.n	800608e <mode2Page+0x3ce>
	  break;
 800606c:	bf00      	nop
 800606e:	e00e      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006070:	bf00      	nop
 8006072:	e00c      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006074:	bf00      	nop
 8006076:	e00a      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006078:	bf00      	nop
 800607a:	e008      	b.n	800608e <mode2Page+0x3ce>
	  break;
 800607c:	bf00      	nop
 800607e:	e006      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006080:	bf00      	nop
 8006082:	e004      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006084:	bf00      	nop
 8006086:	e002      	b.n	800608e <mode2Page+0x3ce>
	  break;
 8006088:	bf00      	nop
 800608a:	e000      	b.n	800608e <mode2Page+0x3ce>
	  break;
 800608c:	bf00      	nop
}
 800608e:	bf00      	nop
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000584 	.word	0x20000584
 8006098:	08008f88 	.word	0x08008f88
 800609c:	2000020b 	.word	0x2000020b
 80060a0:	2000057c 	.word	0x2000057c
 80060a4:	08008f94 	.word	0x08008f94
 80060a8:	20000574 	.word	0x20000574
 80060ac:	08008fa0 	.word	0x08008fa0

080060b0 <emPage>:
/**
* @fn emPage(void)
* @brief Wyswietlanie informacji na LCD w trybie EM_PAGE
*/
static uint8_t emPage(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  cntTickEmPage++;
 80060b4:	4b14      	ldr	r3, [pc, #80]	; (8006108 <emPage+0x58>)
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <emPage+0x58>)
 80060be:	801a      	strh	r2, [r3, #0]

  if ( (cntTickEmPage >= PERIOD_1S) && (cntTickEmPage < 2 * PERIOD_1S) )
 80060c0:	4b11      	ldr	r3, [pc, #68]	; (8006108 <emPage+0x58>)
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060c8:	d30b      	bcc.n	80060e2 <emPage+0x32>
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <emPage+0x58>)
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80060d2:	d206      	bcs.n	80060e2 <emPage+0x32>
    {
      Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t *)"em_button", 100, 100);
 80060d4:	2264      	movs	r2, #100	; 0x64
 80060d6:	2164      	movs	r1, #100	; 0x64
 80060d8:	480c      	ldr	r0, [pc, #48]	; (800610c <emPage+0x5c>)
 80060da:	f7fe ffc9 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>

      return 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	e00f      	b.n	8006102 <emPage+0x52>
    }
  else if (cntTickEmPage >= 2 * PERIOD_1S)
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <emPage+0x58>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80060ea:	d309      	bcc.n	8006100 <emPage+0x50>
    {
      Nextion_Enhanced_NX3224K028_writeValueToProgressBar((const uint8_t *)"em_button", 0, 100);
 80060ec:	2264      	movs	r2, #100	; 0x64
 80060ee:	2100      	movs	r1, #0
 80060f0:	4806      	ldr	r0, [pc, #24]	; (800610c <emPage+0x5c>)
 80060f2:	f7fe ffbd 	bl	8005070 <Nextion_Enhanced_NX3224K028_writeValueToProgressBar>
      cntTickEmPage = 0;
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <emPage+0x58>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	801a      	strh	r2, [r3, #0]
      return 1;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <emPage+0x52>
    }

  return 0;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000202 	.word	0x20000202
 800610c:	08008fac 	.word	0x08008fac

08006110 <choosePage>:
/**
* @fn choosePage(void)
* @brief Wybor aktualnie wyswietlanej strony na LCD
*/
static uint8_t choosePage(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  //Sprawdz czy wykryto wyciek wodoru
  if ( (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin == 1) && mainStepFsm != LEAK_PAGE )
 8006114:	4b5f      	ldr	r3, [pc, #380]	; (8006294 <choosePage+0x184>)
 8006116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800611a:	2b01      	cmp	r3, #1
 800611c:	d10d      	bne.n	800613a <choosePage+0x2a>
 800611e:	4b5e      	ldr	r3, [pc, #376]	; (8006298 <choosePage+0x188>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d009      	beq.n	800613a <choosePage+0x2a>
    {
      resetAllCntAndFsmState();
 8006126:	f000 f8bf 	bl	80062a8 <resetAllCntAndFsmState>
      Nextion_Enhanced_NX3224K028_loadNewPage(3);
 800612a:	2003      	movs	r0, #3
 800612c:	f7ff f862 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
      mainStepFsm = LEAK_PAGE;
 8006130:	4b59      	ldr	r3, [pc, #356]	; (8006298 <choosePage+0x188>)
 8006132:	2203      	movs	r2, #3
 8006134:	701a      	strb	r2, [r3, #0]

      return 1;
 8006136:	2301      	movs	r3, #1
 8006138:	e0aa      	b.n	8006290 <choosePage+0x180>
    }
  //Sprawdz czy
  else if ( (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin != 1) && (RS485_RX_VERIFIED_DATA.emergencyButton != 1)
 800613a:	4b56      	ldr	r3, [pc, #344]	; (8006294 <choosePage+0x184>)
 800613c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006140:	2b01      	cmp	r3, #1
 8006142:	d012      	beq.n	800616a <choosePage+0x5a>
 8006144:	4b53      	ldr	r3, [pc, #332]	; (8006294 <choosePage+0x184>)
 8006146:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800614a:	2b01      	cmp	r3, #1
 800614c:	d00d      	beq.n	800616a <choosePage+0x5a>
      && mainStepFsm == LEAK_PAGE )
 800614e:	4b52      	ldr	r3, [pc, #328]	; (8006298 <choosePage+0x188>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d109      	bne.n	800616a <choosePage+0x5a>
    {
      resetAllCntAndFsmState();
 8006156:	f000 f8a7 	bl	80062a8 <resetAllCntAndFsmState>
      Nextion_Enhanced_NX3224K028_loadNewPage(1);
 800615a:	2001      	movs	r0, #1
 800615c:	f7ff f84a 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
      mainStepFsm = MODE1_PAGE;
 8006160:	4b4d      	ldr	r3, [pc, #308]	; (8006298 <choosePage+0x188>)
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]

      return 1;
 8006166:	2301      	movs	r3, #1
 8006168:	e092      	b.n	8006290 <choosePage+0x180>
    }
  //Jezeli nie wykryto wycieku wodoru a przycisk bezpieczenstwa jest wcisniety
  else if ( (RS485_RX_VERIFIED_DATA.emergencyButton == 1) &&  (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin == 0) && mainStepFsm != EM_PAGE  )
 800616a:	4b4a      	ldr	r3, [pc, #296]	; (8006294 <choosePage+0x184>)
 800616c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006170:	2b01      	cmp	r3, #1
 8006172:	d112      	bne.n	800619a <choosePage+0x8a>
 8006174:	4b47      	ldr	r3, [pc, #284]	; (8006294 <choosePage+0x184>)
 8006176:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <choosePage+0x8a>
 800617e:	4b46      	ldr	r3, [pc, #280]	; (8006298 <choosePage+0x188>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b04      	cmp	r3, #4
 8006184:	d009      	beq.n	800619a <choosePage+0x8a>
    {
      resetAllCntAndFsmState();
 8006186:	f000 f88f 	bl	80062a8 <resetAllCntAndFsmState>
      Nextion_Enhanced_NX3224K028_loadNewPage(4);
 800618a:	2004      	movs	r0, #4
 800618c:	f7ff f832 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
      mainStepFsm = EM_PAGE;
 8006190:	4b41      	ldr	r3, [pc, #260]	; (8006298 <choosePage+0x188>)
 8006192:	2204      	movs	r2, #4
 8006194:	701a      	strb	r2, [r3, #0]

      return 1;
 8006196:	2301      	movs	r3, #1
 8006198:	e07a      	b.n	8006290 <choosePage+0x180>
    }
  else if ( (RS485_RX_VERIFIED_DATA.emergencyButton != 1) && (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin != 1)
 800619a:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <choosePage+0x184>)
 800619c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d016      	beq.n	80061d2 <choosePage+0xc2>
 80061a4:	4b3b      	ldr	r3, [pc, #236]	; (8006294 <choosePage+0x184>)
 80061a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d011      	beq.n	80061d2 <choosePage+0xc2>
      && mainStepFsm == EM_PAGE  && mainStepFsm != LEAK_PAGE)
 80061ae:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <choosePage+0x188>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d10d      	bne.n	80061d2 <choosePage+0xc2>
 80061b6:	4b38      	ldr	r3, [pc, #224]	; (8006298 <choosePage+0x188>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d009      	beq.n	80061d2 <choosePage+0xc2>
    {
      resetAllCntAndFsmState();
 80061be:	f000 f873 	bl	80062a8 <resetAllCntAndFsmState>
      Nextion_Enhanced_NX3224K028_loadNewPage(1);
 80061c2:	2001      	movs	r0, #1
 80061c4:	f7ff f816 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
      mainStepFsm = MODE1_PAGE;
 80061c8:	4b33      	ldr	r3, [pc, #204]	; (8006298 <choosePage+0x188>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]

      return 1;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e05e      	b.n	8006290 <choosePage+0x180>
    }
  //Sprawdz czy przycisk mode1 jest wcisniety
  else if ( (BUTTONS.mode1 == 1) && (BUTTONS.mode2 == 0) && (mainStepFsm != MODE1_PAGE) &&
 80061d2:	4b32      	ldr	r3, [pc, #200]	; (800629c <choosePage+0x18c>)
 80061d4:	789b      	ldrb	r3, [r3, #2]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d11b      	bne.n	8006212 <choosePage+0x102>
 80061da:	4b30      	ldr	r3, [pc, #192]	; (800629c <choosePage+0x18c>)
 80061dc:	78db      	ldrb	r3, [r3, #3]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d117      	bne.n	8006212 <choosePage+0x102>
 80061e2:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <choosePage+0x188>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d013      	beq.n	8006212 <choosePage+0x102>
      (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin != 1) && (RS485_RX_VERIFIED_DATA.emergencyButton != 1) )
 80061ea:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <choosePage+0x184>)
 80061ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  else if ( (BUTTONS.mode1 == 1) && (BUTTONS.mode2 == 0) && (mainStepFsm != MODE1_PAGE) &&
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d00e      	beq.n	8006212 <choosePage+0x102>
      (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin != 1) && (RS485_RX_VERIFIED_DATA.emergencyButton != 1) )
 80061f4:	4b27      	ldr	r3, [pc, #156]	; (8006294 <choosePage+0x184>)
 80061f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d009      	beq.n	8006212 <choosePage+0x102>
    {
      resetAllCntAndFsmState();
 80061fe:	f000 f853 	bl	80062a8 <resetAllCntAndFsmState>
      Nextion_Enhanced_NX3224K028_loadNewPage(1);
 8006202:	2001      	movs	r0, #1
 8006204:	f7fe fff6 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
      mainStepFsm = MODE1_PAGE;
 8006208:	4b23      	ldr	r3, [pc, #140]	; (8006298 <choosePage+0x188>)
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]

      return 1;
 800620e:	2301      	movs	r3, #1
 8006210:	e03e      	b.n	8006290 <choosePage+0x180>
    }
  //Sprawdz czy przycisk mode2 jest wcisniety
  else if ( (BUTTONS.mode1 == 0) && (BUTTONS.mode2 == 1) && (mainStepFsm != MODE2_PAGE)  &&
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <choosePage+0x18c>)
 8006214:	789b      	ldrb	r3, [r3, #2]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d11b      	bne.n	8006252 <choosePage+0x142>
 800621a:	4b20      	ldr	r3, [pc, #128]	; (800629c <choosePage+0x18c>)
 800621c:	78db      	ldrb	r3, [r3, #3]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d117      	bne.n	8006252 <choosePage+0x142>
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <choosePage+0x188>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d013      	beq.n	8006252 <choosePage+0x142>
      (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin != 1) && (RS485_RX_VERIFIED_DATA.emergencyButton != 1))
 800622a:	4b1a      	ldr	r3, [pc, #104]	; (8006294 <choosePage+0x184>)
 800622c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  else if ( (BUTTONS.mode1 == 0) && (BUTTONS.mode2 == 1) && (mainStepFsm != MODE2_PAGE)  &&
 8006230:	2b01      	cmp	r3, #1
 8006232:	d00e      	beq.n	8006252 <choosePage+0x142>
      (RS485_RX_VERIFIED_DATA.h2SensorDigitalPin != 1) && (RS485_RX_VERIFIED_DATA.emergencyButton != 1))
 8006234:	4b17      	ldr	r3, [pc, #92]	; (8006294 <choosePage+0x184>)
 8006236:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800623a:	2b01      	cmp	r3, #1
 800623c:	d009      	beq.n	8006252 <choosePage+0x142>
    {
      resetAllCntAndFsmState();
 800623e:	f000 f833 	bl	80062a8 <resetAllCntAndFsmState>
      Nextion_Enhanced_NX3224K028_loadNewPage(2);
 8006242:	2002      	movs	r0, #2
 8006244:	f7fe ffd6 	bl	80051f4 <Nextion_Enhanced_NX3224K028_loadNewPage>
      mainStepFsm = MODE2_PAGE;
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <choosePage+0x188>)
 800624a:	2202      	movs	r2, #2
 800624c:	701a      	strb	r2, [r3, #0]

      return 1;
 800624e:	2301      	movs	r3, #1
 8006250:	e01e      	b.n	8006290 <choosePage+0x180>
    }
  //Sprawdz czy przyciski mode1 oraz mode2 sa wcisniete jednoczesne
  else if ((BUTTONS.mode1 == 1) && (BUTTONS.mode2 == 1))
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <choosePage+0x18c>)
 8006254:	789b      	ldrb	r3, [r3, #2]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d119      	bne.n	800628e <choosePage+0x17e>
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <choosePage+0x18c>)
 800625c:	78db      	ldrb	r3, [r3, #3]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d115      	bne.n	800628e <choosePage+0x17e>
    {
      cntTickDevReset++;
 8006262:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <choosePage+0x190>)
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <choosePage+0x190>)
 800626c:	801a      	strh	r2, [r3, #0]

      //Odczekaj 5 sekund, nastepnie ponownie zainicjalizuj wyswietlacz
      if (cntTickDevReset >= 5 * PERIOD_1S)
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <choosePage+0x190>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	f241 3287 	movw	r2, #4999	; 0x1387
 8006276:	4293      	cmp	r3, r2
 8006278:	d909      	bls.n	800628e <choosePage+0x17e>
	{
	  resetAllCntAndFsmState();
 800627a:	f000 f815 	bl	80062a8 <resetAllCntAndFsmState>
	  initCplt = 0;
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <choosePage+0x194>)
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
	  mainStepFsm = INIT_PAGE;
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <choosePage+0x188>)
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]

	  return 1;
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <choosePage+0x180>
	}
    }

  return 0;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000544 	.word	0x20000544
 8006298:	20000206 	.word	0x20000206
 800629c:	20000538 	.word	0x20000538
 80062a0:	20000204 	.word	0x20000204
 80062a4:	20000208 	.word	0x20000208

080062a8 <resetAllCntAndFsmState>:
/**
* @fn resetAllCntAndFsmState(void)
* @brief Funkcja resetujaca wszystkie zmienne odmierzajaca czas w bibliotece
*/
static void resetAllCntAndFsmState(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  cntTickInitPage = 0;
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <resetAllCntAndFsmState+0x44>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	801a      	strh	r2, [r3, #0]
  cntTickMode1Page = 0;
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <resetAllCntAndFsmState+0x48>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	801a      	strh	r2, [r3, #0]
  cntTickMode2Page = 0;
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <resetAllCntAndFsmState+0x4c>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	801a      	strh	r2, [r3, #0]
  cntTickEmPage = 0;
 80062be:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <resetAllCntAndFsmState+0x50>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	801a      	strh	r2, [r3, #0]
#if USE_EXPANSION_BOARD == 1
  cntTickLeakPage = 0;
#endif
  cntTickDevReset = 0;
 80062c4:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <resetAllCntAndFsmState+0x54>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	801a      	strh	r2, [r3, #0]

  initFsm = 0;
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <resetAllCntAndFsmState+0x58>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
  mode1FsmLowVal = 0;
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <resetAllCntAndFsmState+0x5c>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
  mode1FsmHighVal = 0;
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <resetAllCntAndFsmState+0x60>)
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
  mode2Fsm = 0;
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <resetAllCntAndFsmState+0x64>)
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	200001fc 	.word	0x200001fc
 80062f0:	200001fe 	.word	0x200001fe
 80062f4:	20000200 	.word	0x20000200
 80062f8:	20000202 	.word	0x20000202
 80062fc:	20000204 	.word	0x20000204
 8006300:	20000207 	.word	0x20000207
 8006304:	20000209 	.word	0x20000209
 8006308:	2000020a 	.word	0x2000020a
 800630c:	2000020b 	.word	0x2000020b

08006310 <leds_step>:
/**
* @fn leds_step(void)
* @brief Obsluga diody LED_STS, wywolac wewnatrz hydrogreen_step1kHz()
*/
void leds_step(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  static uint8_t ledsFsm;
  static uint16_t period;

  if (watchdog_flt == WATCHDOG_FLT_NONE)
 8006314:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <leds_step+0x74>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <leds_step+0x14>
    {
      ledsFsm = FREQ_5HZ;
 800631c:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <leds_step+0x78>)
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e002      	b.n	800632a <leds_step+0x1a>
    }
  else
    {
      ledsFsm = FREQ_1HZ;
 8006324:	4b18      	ldr	r3, [pc, #96]	; (8006388 <leds_step+0x78>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
    }

  period++;
 800632a:	4b18      	ldr	r3, [pc, #96]	; (800638c <leds_step+0x7c>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	4b16      	ldr	r3, [pc, #88]	; (800638c <leds_step+0x7c>)
 8006334:	801a      	strh	r2, [r3, #0]

  switch (ledsFsm)
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <leds_step+0x78>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <leds_step+0x34>
 800633e:	2b01      	cmp	r3, #1
 8006340:	d00e      	beq.n	8006360 <leds_step+0x50>
	  period = 0;
	}
      break;

    default:
      break;
 8006342:	e01d      	b.n	8006380 <leds_step+0x70>
      if (period >= 500 * PERIOD_1MS)
 8006344:	4b11      	ldr	r3, [pc, #68]	; (800638c <leds_step+0x7c>)
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800634c:	d315      	bcc.n	800637a <leds_step+0x6a>
	  HAL_GPIO_TogglePin(GPIOA, LED_STS_Pin);
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006354:	f7fb ffc2 	bl	80022dc <HAL_GPIO_TogglePin>
	  period = 0;
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <leds_step+0x7c>)
 800635a:	2200      	movs	r2, #0
 800635c:	801a      	strh	r2, [r3, #0]
      break;
 800635e:	e00c      	b.n	800637a <leds_step+0x6a>
      if (period >= 100 * PERIOD_1MS)
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <leds_step+0x7c>)
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	2b63      	cmp	r3, #99	; 0x63
 8006366:	d90a      	bls.n	800637e <leds_step+0x6e>
	  HAL_GPIO_TogglePin(GPIOA, LED_STS_Pin);
 8006368:	2180      	movs	r1, #128	; 0x80
 800636a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800636e:	f7fb ffb5 	bl	80022dc <HAL_GPIO_TogglePin>
	  period = 0;
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <leds_step+0x7c>)
 8006374:	2200      	movs	r2, #0
 8006376:	801a      	strh	r2, [r3, #0]
      break;
 8006378:	e001      	b.n	800637e <leds_step+0x6e>
      break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <leds_step+0x70>
      break;
 800637e:	bf00      	nop
  }
}
 8006380:	bf00      	nop
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000588 	.word	0x20000588
 8006388:	2000020c 	.word	0x2000020c
 800638c:	2000020e 	.word	0x2000020e

08006390 <rs485_init>:
/**
* @fn rs485_init(void)
* @brief Inicjalizacja magistrali RS-485, umiescic wewnatrz hydrogreen_init(void)
*/
void rs485_init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1);				//Rozpocznij nasluchiwanie
 8006394:	2201      	movs	r2, #1
 8006396:	4904      	ldr	r1, [pc, #16]	; (80063a8 <rs485_init+0x18>)
 8006398:	4804      	ldr	r0, [pc, #16]	; (80063ac <rs485_init+0x1c>)
 800639a:	f7fd fed3 	bl	8004144 <HAL_UART_Receive_DMA>
  prepareNewDataToSend();								//Przygotuj nowy pakiet danych
 800639e:	f000 f8eb 	bl	8006578 <prepareNewDataToSend>
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000024d 	.word	0x2000024d
 80063ac:	2000044c 	.word	0x2000044c

080063b0 <rs485_step>:
/**
* @fn rs485_step(void)
* @brief Funkcja obslugujaca magistrale, umiescic wewnatrz hydrogreen_step(void)
*/
void rs485_step(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  receiveData();
 80063b4:	f000 f840 	bl	8006438 <receiveData>
  sendData();
 80063b8:	f000 f802 	bl	80063c0 <sendData>
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}

080063c0 <sendData>:
/**
* @fn sendData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii TX, powinna zostac umieszczona w wewnatrz rs485_step()
*/
static void sendData(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  static uint16_t cntEndOfTxTick;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy wyslano cala ramke danych
  if (posInTxTab < TX_FRAME_LENGHT)
 80063c4:	4b17      	ldr	r3, [pc, #92]	; (8006424 <sendData+0x64>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	2b0a      	cmp	r3, #10
 80063ca:	d816      	bhi.n	80063fa <sendData+0x3a>
    {
      //Nie, wysylaj dalej
      RS485_BUFF.tx = dataToTx[posInTxTab];
 80063cc:	4b15      	ldr	r3, [pc, #84]	; (8006424 <sendData+0x64>)
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <sendData+0x68>)
 80063d4:	5c9a      	ldrb	r2, [r3, r2]
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <sendData+0x6c>)
 80063d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063da:	b672      	cpsid	i

      //Na czas wysylania danych wylacz przerwania
      __disable_irq();
      HAL_UART_Transmit(&UART_PORT_RS485, &RS485_BUFF.tx, 1, HAL_MAX_DELAY);
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295
 80063e0:	2201      	movs	r2, #1
 80063e2:	4912      	ldr	r1, [pc, #72]	; (800642c <sendData+0x6c>)
 80063e4:	4812      	ldr	r0, [pc, #72]	; (8006430 <sendData+0x70>)
 80063e6:	f7fd fd9b 	bl	8003f20 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 80063ea:	b662      	cpsie	i
      __enable_irq();

      posInTxTab++;
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <sendData+0x64>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <sendData+0x64>)
 80063f6:	801a      	strh	r2, [r3, #0]
      cntEndOfTxTick = 0;
      posInTxTab = 0;

      prepareNewDataToSend();
    }
}
 80063f8:	e012      	b.n	8006420 <sendData+0x60>
  else if (cntEndOfTxTick < TX_FRAME_LENGHT)
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <sendData+0x74>)
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	2b0a      	cmp	r3, #10
 8006400:	d806      	bhi.n	8006410 <sendData+0x50>
      cntEndOfTxTick++;
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <sendData+0x74>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <sendData+0x74>)
 800640c:	801a      	strh	r2, [r3, #0]
}
 800640e:	e007      	b.n	8006420 <sendData+0x60>
      cntEndOfTxTick = 0;
 8006410:	4b08      	ldr	r3, [pc, #32]	; (8006434 <sendData+0x74>)
 8006412:	2200      	movs	r2, #0
 8006414:	801a      	strh	r2, [r3, #0]
      posInTxTab = 0;
 8006416:	4b03      	ldr	r3, [pc, #12]	; (8006424 <sendData+0x64>)
 8006418:	2200      	movs	r2, #0
 800641a:	801a      	strh	r2, [r3, #0]
      prepareNewDataToSend();
 800641c:	f000 f8ac 	bl	8006578 <prepareNewDataToSend>
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000248 	.word	0x20000248
 8006428:	2000023c 	.word	0x2000023c
 800642c:	2000024c 	.word	0x2000024c
 8006430:	2000044c 	.word	0x2000044c
 8006434:	2000024e 	.word	0x2000024e

08006438 <receiveData>:
/**
* @fn receiveData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii RX, umiescic wewnatrz rs485_step()
*/
static void receiveData(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
  static uint32_t rejectedFramesInRow;							//Zmienna przechowujaca liczbe straconych ramek z rzedu
  static uint32_t cntEndOfRxTick;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy otrzymano nowe dane
  if (!intRxCplt)
 800643e:	4b2d      	ldr	r3, [pc, #180]	; (80064f4 <receiveData+0xbc>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <receiveData+0x1c>
    {
      //Nie otrzymano nowych danych, zacznij odliczac czas
      cntEndOfRxTick++;
 8006448:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <receiveData+0xc0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <receiveData+0xc0>)
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e007      	b.n	8006464 <receiveData+0x2c>
    }
  else if (intRxCplt)
 8006454:	4b27      	ldr	r3, [pc, #156]	; (80064f4 <receiveData+0xbc>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <receiveData+0x2c>
    {
      //Nowe dane zostaly otrzymane, zeruj flage informujaca o zakonczeniu transmisji
      intRxCplt = 0;
 800645e:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <receiveData+0xbc>)
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
    }

  //Sprawdz czy minal juz czas wynoszacy RX_FRAME_LENGHT
  if (cntEndOfRxTick > RX_FRAME_LENGHT)
 8006464:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <receiveData+0xc0>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b27      	cmp	r3, #39	; 0x27
 800646a:	d93f      	bls.n	80064ec <receiveData+0xb4>
  __ASM volatile ("cpsid i" : : : "memory");
 800646c:	b672      	cpsid	i
    {
      //Na czas przetwarzania danych wylacz przerwania
      __disable_irq();

      //Czas minal, oznacza to koniec ramki
      cntEndOfRxTick = 0;
 800646e:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <receiveData+0xc0>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
      posInRxTab = 0;
 8006474:	4b21      	ldr	r3, [pc, #132]	; (80064fc <receiveData+0xc4>)
 8006476:	2200      	movs	r2, #0
 8006478:	801a      	strh	r2, [r3, #0]

      //OBLICZ SUME KONTROLNA
      uint8_t crcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataFromRx, (RX_FRAME_LENGHT - 2));
 800647a:	2225      	movs	r2, #37	; 0x25
 800647c:	4920      	ldr	r1, [pc, #128]	; (8006500 <receiveData+0xc8>)
 800647e:	4821      	ldr	r0, [pc, #132]	; (8006504 <receiveData+0xcc>)
 8006480:	f7fb f9e4 	bl	800184c <HAL_CRC_Calculate>
 8006484:	4603      	mov	r3, r0
 8006486:	71bb      	strb	r3, [r7, #6]

      //Sprawdz czy sumy kontrolne oraz bajt EOT (End Of Tranmission) sie zgadzaja
      if ( (dataFromRx[RX_FRAME_LENGHT - 2] == EOT_BYTE) && (crcSumOnMCU == dataFromRx[RX_FRAME_LENGHT - 1]) )
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <receiveData+0xc8>)
 800648a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b17      	cmp	r3, #23
 8006492:	d10f      	bne.n	80064b4 <receiveData+0x7c>
 8006494:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <receiveData+0xc8>)
 8006496:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800649a:	b2db      	uxtb	r3, r3
 800649c:	79ba      	ldrb	r2, [r7, #6]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d108      	bne.n	80064b4 <receiveData+0x7c>
	{
	  processReceivedData();
 80064a2:	f000 f8cf 	bl	8006644 <processReceivedData>
	  rs485_flt = RS485_FLT_NONE;
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <receiveData+0xd0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
	  rejectedFramesInRow = 0;
 80064ac:	4b17      	ldr	r3, [pc, #92]	; (800650c <receiveData+0xd4>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e00d      	b.n	80064d0 <receiveData+0x98>
	}
      else
	{
	  rejectedFramesInRow++;
 80064b4:	4b15      	ldr	r3, [pc, #84]	; (800650c <receiveData+0xd4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	4a14      	ldr	r2, [pc, #80]	; (800650c <receiveData+0xd4>)
 80064bc:	6013      	str	r3, [r2, #0]

	  //Jezeli odrzucono wiecej niz 50 ramek z rzedu uznaj ze tranmisja zostala zerwana
	  if (rejectedFramesInRow > 50)
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <receiveData+0xd4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b32      	cmp	r3, #50	; 0x32
 80064c4:	d904      	bls.n	80064d0 <receiveData+0x98>
	    {
	      resetActData();
 80064c6:	f000 f9c9 	bl	800685c <resetActData>
	      rs485_flt = RS485_NEW_DATA_TIMEOUT;
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <receiveData+0xd0>)
 80064cc:	2211      	movs	r2, #17
 80064ce:	701a      	strb	r2, [r3, #0]
	    }
	}

      //Wyczysc bufor odbiorczy
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	71fb      	strb	r3, [r7, #7]
 80064d4:	e006      	b.n	80064e4 <receiveData+0xac>
	{
	  dataFromRx[i] = 0x00;
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <receiveData+0xc8>)
 80064da:	2100      	movs	r1, #0
 80064dc:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	3301      	adds	r3, #1
 80064e2:	71fb      	strb	r3, [r7, #7]
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	2b26      	cmp	r3, #38	; 0x26
 80064e8:	d9f5      	bls.n	80064d6 <receiveData+0x9e>
  __ASM volatile ("cpsie i" : : : "memory");
 80064ea:	b662      	cpsie	i
	}

      __enable_irq();
    }
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	2000023a 	.word	0x2000023a
 80064f8:	20000250 	.word	0x20000250
 80064fc:	20000238 	.word	0x20000238
 8006500:	20000210 	.word	0x20000210
 8006504:	20000274 	.word	0x20000274
 8006508:	20000009 	.word	0x20000009
 800650c:	20000254 	.word	0x20000254

08006510 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1);			//Ponownie rozpocznij nasluchiwanie nasluchiwanie
 8006518:	2201      	movs	r2, #1
 800651a:	4911      	ldr	r1, [pc, #68]	; (8006560 <HAL_UART_RxCpltCallback+0x50>)
 800651c:	4811      	ldr	r0, [pc, #68]	; (8006564 <HAL_UART_RxCpltCallback+0x54>)
 800651e:	f7fd fe11 	bl	8004144 <HAL_UART_Receive_DMA>

  intRxCplt = 1;								//Ustaw flage informujaca o otrzymaniu nowych danych
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <HAL_UART_RxCpltCallback+0x58>)
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]

  if (posInRxTab > RX_FRAME_LENGHT) posInRxTab = 0;				//Zabezpieczenie przed wyjsciem poza zakres tablicy
 8006528:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_UART_RxCpltCallback+0x5c>)
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b27      	cmp	r3, #39	; 0x27
 8006530:	d902      	bls.n	8006538 <HAL_UART_RxCpltCallback+0x28>
 8006532:	4b0e      	ldr	r3, [pc, #56]	; (800656c <HAL_UART_RxCpltCallback+0x5c>)
 8006534:	2200      	movs	r2, #0
 8006536:	801a      	strh	r2, [r3, #0]

  dataFromRx[posInRxTab] = RS485_BUFF.rx;					//Przypisz otrzymany bajt do analizowanej tablicy
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <HAL_UART_RxCpltCallback+0x5c>)
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_UART_RxCpltCallback+0x60>)
 8006542:	7859      	ldrb	r1, [r3, #1]
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_UART_RxCpltCallback+0x64>)
 8006546:	5499      	strb	r1, [r3, r2]
  posInRxTab++;
 8006548:	4b08      	ldr	r3, [pc, #32]	; (800656c <HAL_UART_RxCpltCallback+0x5c>)
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	3301      	adds	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	4b06      	ldr	r3, [pc, #24]	; (800656c <HAL_UART_RxCpltCallback+0x5c>)
 8006554:	801a      	strh	r2, [r3, #0]
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	2000024d 	.word	0x2000024d
 8006564:	2000044c 	.word	0x2000044c
 8006568:	2000023a 	.word	0x2000023a
 800656c:	20000238 	.word	0x20000238
 8006570:	2000024c 	.word	0x2000024c
 8006574:	20000210 	.word	0x20000210

08006578 <prepareNewDataToSend>:
/**
* @fn prepareNewDataToSend(void)
* @brief Funkcja przygotowujaca dane do wysylki, wykorzystana wewnatrz sendData(void)
*/
static void prepareNewDataToSend(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
  uint8_t j = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	71fb      	strb	r3, [r7, #7]

  ///< Stany przyciskow
  dataToTx[j] = BUTTONS.halfGas;
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <prepareNewDataToSend+0xc0>)
 8006586:	7811      	ldrb	r1, [r2, #0]
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <prepareNewDataToSend+0xc4>)
 800658a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.fullGas;
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	3301      	adds	r3, #1
 8006590:	71fb      	strb	r3, [r7, #7]
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	4a28      	ldr	r2, [pc, #160]	; (8006638 <prepareNewDataToSend+0xc0>)
 8006596:	7851      	ldrb	r1, [r2, #1]
 8006598:	4a28      	ldr	r2, [pc, #160]	; (800663c <prepareNewDataToSend+0xc4>)
 800659a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.horn;
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	3301      	adds	r3, #1
 80065a0:	71fb      	strb	r3, [r7, #7]
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4a24      	ldr	r2, [pc, #144]	; (8006638 <prepareNewDataToSend+0xc0>)
 80065a6:	7911      	ldrb	r1, [r2, #4]
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <prepareNewDataToSend+0xc4>)
 80065aa:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.speedReset;
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	3301      	adds	r3, #1
 80065b0:	71fb      	strb	r3, [r7, #7]
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <prepareNewDataToSend+0xc0>)
 80065b6:	7951      	ldrb	r1, [r2, #5]
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <prepareNewDataToSend+0xc4>)
 80065ba:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.powerSupply;
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	3301      	adds	r3, #1
 80065c0:	71fb      	strb	r3, [r7, #7]
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	4a1c      	ldr	r2, [pc, #112]	; (8006638 <prepareNewDataToSend+0xc0>)
 80065c6:	7991      	ldrb	r1, [r2, #6]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <prepareNewDataToSend+0xc4>)
 80065ca:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.scClose;
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	3301      	adds	r3, #1
 80065d0:	71fb      	strb	r3, [r7, #7]
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <prepareNewDataToSend+0xc0>)
 80065d6:	79d1      	ldrb	r1, [r2, #7]
 80065d8:	4a18      	ldr	r2, [pc, #96]	; (800663c <prepareNewDataToSend+0xc4>)
 80065da:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.fuelcellOff;
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	3301      	adds	r3, #1
 80065e0:	71fb      	strb	r3, [r7, #7]
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <prepareNewDataToSend+0xc0>)
 80065e6:	7a11      	ldrb	r1, [r2, #8]
 80065e8:	4a14      	ldr	r2, [pc, #80]	; (800663c <prepareNewDataToSend+0xc4>)
 80065ea:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.fuelcellPrepareToRace;
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	3301      	adds	r3, #1
 80065f0:	71fb      	strb	r3, [r7, #7]
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	4a10      	ldr	r2, [pc, #64]	; (8006638 <prepareNewDataToSend+0xc0>)
 80065f6:	7a51      	ldrb	r1, [r2, #9]
 80065f8:	4a10      	ldr	r2, [pc, #64]	; (800663c <prepareNewDataToSend+0xc4>)
 80065fa:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = BUTTONS.fuelcellRace;
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	3301      	adds	r3, #1
 8006600:	71fb      	strb	r3, [r7, #7]
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <prepareNewDataToSend+0xc0>)
 8006606:	7a91      	ldrb	r1, [r2, #10]
 8006608:	4a0c      	ldr	r2, [pc, #48]	; (800663c <prepareNewDataToSend+0xc4>)
 800660a:	54d1      	strb	r1, [r2, r3]

  dataToTx[++j] = EOT_BYTE;
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	3301      	adds	r3, #1
 8006610:	71fb      	strb	r3, [r7, #7]
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	4a09      	ldr	r2, [pc, #36]	; (800663c <prepareNewDataToSend+0xc4>)
 8006616:	2117      	movs	r1, #23
 8006618:	54d1      	strb	r1, [r2, r3]

  //OBLICZ SUME KONTROLNA
  uint8_t calculatedCrcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataToTx, (TX_FRAME_LENGHT - 2) );
 800661a:	2209      	movs	r2, #9
 800661c:	4907      	ldr	r1, [pc, #28]	; (800663c <prepareNewDataToSend+0xc4>)
 800661e:	4808      	ldr	r0, [pc, #32]	; (8006640 <prepareNewDataToSend+0xc8>)
 8006620:	f7fb f914 	bl	800184c <HAL_CRC_Calculate>
 8006624:	4603      	mov	r3, r0
 8006626:	71bb      	strb	r3, [r7, #6]

  //Wrzuc obliczona sume kontrolna na koniec wysylanej tablicy
  dataToTx[TX_FRAME_LENGHT - 1] = calculatedCrcSumOnMCU;
 8006628:	4a04      	ldr	r2, [pc, #16]	; (800663c <prepareNewDataToSend+0xc4>)
 800662a:	79bb      	ldrb	r3, [r7, #6]
 800662c:	7293      	strb	r3, [r2, #10]
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000538 	.word	0x20000538
 800663c:	2000023c 	.word	0x2000023c
 8006640:	20000274 	.word	0x20000274

08006644 <processReceivedData>:
/**
* @fn processReveivedData()
* @brief Funkcja przypisujaca odebrane dane do zmiennych docelowych
*/
static void processReceivedData(void)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]

  RS485_RX_VERIFIED_DATA.interimSpeed = dataFromRx[i];
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	4a80      	ldr	r2, [pc, #512]	; (8006854 <processReceivedData+0x210>)
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	4b80      	ldr	r3, [pc, #512]	; (8006858 <processReceivedData+0x214>)
 8006658:	779a      	strb	r2, [r3, #30]
  RS485_RX_VERIFIED_DATA.averageSpeed = dataFromRx[++i];
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	3301      	adds	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	4a7c      	ldr	r2, [pc, #496]	; (8006854 <processReceivedData+0x210>)
 8006664:	5cd3      	ldrb	r3, [r2, r3]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	4b7b      	ldr	r3, [pc, #492]	; (8006858 <processReceivedData+0x214>)
 800666a:	77da      	strb	r2, [r3, #31]

  for (uint8_t k = 0; k < 2; k++)
 800666c:	2300      	movs	r3, #0
 800666e:	73bb      	strb	r3, [r7, #14]
 8006670:	e00e      	b.n	8006690 <processReceivedData+0x4c>
    {
      RS485_RX_VERIFIED_DATA.laptime_minutes.array[k] = dataFromRx[++i];
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	3301      	adds	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
 8006678:	7bfa      	ldrb	r2, [r7, #15]
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	4975      	ldr	r1, [pc, #468]	; (8006854 <processReceivedData+0x210>)
 800667e:	5c8a      	ldrb	r2, [r1, r2]
 8006680:	b2d1      	uxtb	r1, r2
 8006682:	4a75      	ldr	r2, [pc, #468]	; (8006858 <processReceivedData+0x214>)
 8006684:	4413      	add	r3, r2
 8006686:	460a      	mov	r2, r1
 8006688:	761a      	strb	r2, [r3, #24]
  for (uint8_t k = 0; k < 2; k++)
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	3301      	adds	r3, #1
 800668e:	73bb      	strb	r3, [r7, #14]
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d9ed      	bls.n	8006672 <processReceivedData+0x2e>
    }

  RS485_RX_VERIFIED_DATA.laptime_seconds = dataFromRx[++i];
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	3301      	adds	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	4a6d      	ldr	r2, [pc, #436]	; (8006854 <processReceivedData+0x210>)
 80066a0:	5cd3      	ldrb	r3, [r2, r3]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <processReceivedData+0x214>)
 80066a6:	f883 2020 	strb.w	r2, [r3, #32]

  for (uint8_t k = 0; k < 2; k++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	737b      	strb	r3, [r7, #13]
 80066ae:	e00e      	b.n	80066ce <processReceivedData+0x8a>
    {
      RS485_RX_VERIFIED_DATA.laptime_miliseconds.array[k] = dataFromRx[++i];
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	3301      	adds	r3, #1
 80066b4:	73fb      	strb	r3, [r7, #15]
 80066b6:	7bfa      	ldrb	r2, [r7, #15]
 80066b8:	7b7b      	ldrb	r3, [r7, #13]
 80066ba:	4966      	ldr	r1, [pc, #408]	; (8006854 <processReceivedData+0x210>)
 80066bc:	5c8a      	ldrb	r2, [r1, r2]
 80066be:	b2d1      	uxtb	r1, r2
 80066c0:	4a65      	ldr	r2, [pc, #404]	; (8006858 <processReceivedData+0x214>)
 80066c2:	4413      	add	r3, r2
 80066c4:	460a      	mov	r2, r1
 80066c6:	769a      	strb	r2, [r3, #26]
  for (uint8_t k = 0; k < 2; k++)
 80066c8:	7b7b      	ldrb	r3, [r7, #13]
 80066ca:	3301      	adds	r3, #1
 80066cc:	737b      	strb	r3, [r7, #13]
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d9ed      	bls.n	80066b0 <processReceivedData+0x6c>
    }
  for (uint8_t k = 0; k < 4; k++)
 80066d4:	2300      	movs	r3, #0
 80066d6:	733b      	strb	r3, [r7, #12]
 80066d8:	e00c      	b.n	80066f4 <processReceivedData+0xb0>
    {
      RS485_RX_VERIFIED_DATA.FC_V.array[k] = dataFromRx[++i];
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	3301      	adds	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	7bfa      	ldrb	r2, [r7, #15]
 80066e2:	7b3b      	ldrb	r3, [r7, #12]
 80066e4:	495b      	ldr	r1, [pc, #364]	; (8006854 <processReceivedData+0x210>)
 80066e6:	5c8a      	ldrb	r2, [r1, r2]
 80066e8:	b2d1      	uxtb	r1, r2
 80066ea:	4a5b      	ldr	r2, [pc, #364]	; (8006858 <processReceivedData+0x214>)
 80066ec:	54d1      	strb	r1, [r2, r3]
  for (uint8_t k = 0; k < 4; k++)
 80066ee:	7b3b      	ldrb	r3, [r7, #12]
 80066f0:	3301      	adds	r3, #1
 80066f2:	733b      	strb	r3, [r7, #12]
 80066f4:	7b3b      	ldrb	r3, [r7, #12]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d9ef      	bls.n	80066da <processReceivedData+0x96>
    }

  for (uint8_t k = 0; k < 4; k++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	72fb      	strb	r3, [r7, #11]
 80066fe:	e00e      	b.n	800671e <processReceivedData+0xda>
    {
      RS485_RX_VERIFIED_DATA.FC_TEMP.array[k] = dataFromRx[++i];
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	3301      	adds	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
 8006706:	7bfa      	ldrb	r2, [r7, #15]
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	4952      	ldr	r1, [pc, #328]	; (8006854 <processReceivedData+0x210>)
 800670c:	5c8a      	ldrb	r2, [r1, r2]
 800670e:	b2d1      	uxtb	r1, r2
 8006710:	4a51      	ldr	r2, [pc, #324]	; (8006858 <processReceivedData+0x214>)
 8006712:	4413      	add	r3, r2
 8006714:	460a      	mov	r2, r1
 8006716:	711a      	strb	r2, [r3, #4]
  for (uint8_t k = 0; k < 4; k++)
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
 800671e:	7afb      	ldrb	r3, [r7, #11]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d9ed      	bls.n	8006700 <processReceivedData+0xbc>
    }

  for (uint8_t k = 0; k < 2; k++)
 8006724:	2300      	movs	r3, #0
 8006726:	72bb      	strb	r3, [r7, #10]
 8006728:	e00e      	b.n	8006748 <processReceivedData+0x104>
    {
      RS485_RX_VERIFIED_DATA.fcFanRPM.array[k] = dataFromRx[++i];
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	3301      	adds	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	7abb      	ldrb	r3, [r7, #10]
 8006734:	4947      	ldr	r1, [pc, #284]	; (8006854 <processReceivedData+0x210>)
 8006736:	5c8a      	ldrb	r2, [r1, r2]
 8006738:	b2d1      	uxtb	r1, r2
 800673a:	4a47      	ldr	r2, [pc, #284]	; (8006858 <processReceivedData+0x214>)
 800673c:	4413      	add	r3, r2
 800673e:	460a      	mov	r2, r1
 8006740:	771a      	strb	r2, [r3, #28]
  for (uint8_t k = 0; k < 2; k++)
 8006742:	7abb      	ldrb	r3, [r7, #10]
 8006744:	3301      	adds	r3, #1
 8006746:	72bb      	strb	r3, [r7, #10]
 8006748:	7abb      	ldrb	r3, [r7, #10]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d9ed      	bls.n	800672a <processReceivedData+0xe6>
    }

  for (uint8_t k = 0; k < 4; k++)
 800674e:	2300      	movs	r3, #0
 8006750:	727b      	strb	r3, [r7, #9]
 8006752:	e00e      	b.n	8006772 <processReceivedData+0x12e>
    {
      RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_FC_TO_SC.array[k] = dataFromRx[++i];
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	3301      	adds	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	7bfa      	ldrb	r2, [r7, #15]
 800675c:	7a7b      	ldrb	r3, [r7, #9]
 800675e:	493d      	ldr	r1, [pc, #244]	; (8006854 <processReceivedData+0x210>)
 8006760:	5c8a      	ldrb	r2, [r1, r2]
 8006762:	b2d1      	uxtb	r1, r2
 8006764:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <processReceivedData+0x214>)
 8006766:	4413      	add	r3, r2
 8006768:	460a      	mov	r2, r1
 800676a:	721a      	strb	r2, [r3, #8]
  for (uint8_t k = 0; k < 4; k++)
 800676c:	7a7b      	ldrb	r3, [r7, #9]
 800676e:	3301      	adds	r3, #1
 8006770:	727b      	strb	r3, [r7, #9]
 8006772:	7a7b      	ldrb	r3, [r7, #9]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d9ed      	bls.n	8006754 <processReceivedData+0x110>
    }

  for (uint8_t k = 0; k < 4; k++)
 8006778:	2300      	movs	r3, #0
 800677a:	723b      	strb	r3, [r7, #8]
 800677c:	e00e      	b.n	800679c <processReceivedData+0x158>
    {
      RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_SC_TO_MOTOR.array[k] = dataFromRx[++i];
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	3301      	adds	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
 8006784:	7bfa      	ldrb	r2, [r7, #15]
 8006786:	7a3b      	ldrb	r3, [r7, #8]
 8006788:	4932      	ldr	r1, [pc, #200]	; (8006854 <processReceivedData+0x210>)
 800678a:	5c8a      	ldrb	r2, [r1, r2]
 800678c:	b2d1      	uxtb	r1, r2
 800678e:	4a32      	ldr	r2, [pc, #200]	; (8006858 <processReceivedData+0x214>)
 8006790:	4413      	add	r3, r2
 8006792:	460a      	mov	r2, r1
 8006794:	731a      	strb	r2, [r3, #12]
  for (uint8_t k = 0; k < 4; k++)
 8006796:	7a3b      	ldrb	r3, [r7, #8]
 8006798:	3301      	adds	r3, #1
 800679a:	723b      	strb	r3, [r7, #8]
 800679c:	7a3b      	ldrb	r3, [r7, #8]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d9ed      	bls.n	800677e <processReceivedData+0x13a>
    }

  RS485_RX_VERIFIED_DATA.fcToScMosfetPWM = dataFromRx[++i];
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	3301      	adds	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	4a2a      	ldr	r2, [pc, #168]	; (8006854 <processReceivedData+0x210>)
 80067ac:	5cd3      	ldrb	r3, [r2, r3]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	4b29      	ldr	r3, [pc, #164]	; (8006858 <processReceivedData+0x214>)
 80067b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  RS485_RX_VERIFIED_DATA.motorPWM = dataFromRx[++i];
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	3301      	adds	r3, #1
 80067ba:	73fb      	strb	r3, [r7, #15]
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	4a25      	ldr	r2, [pc, #148]	; (8006854 <processReceivedData+0x210>)
 80067c0:	5cd3      	ldrb	r3, [r2, r3]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <processReceivedData+0x214>)
 80067c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  for (uint8_t k = 0; k < 4; k++)
 80067ca:	2300      	movs	r3, #0
 80067cc:	71fb      	strb	r3, [r7, #7]
 80067ce:	e00e      	b.n	80067ee <processReceivedData+0x1aa>
    {
      RS485_RX_VERIFIED_DATA.SC_V.array[k] = dataFromRx[++i];
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	3301      	adds	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	491e      	ldr	r1, [pc, #120]	; (8006854 <processReceivedData+0x210>)
 80067dc:	5c8a      	ldrb	r2, [r1, r2]
 80067de:	b2d1      	uxtb	r1, r2
 80067e0:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <processReceivedData+0x214>)
 80067e2:	4413      	add	r3, r2
 80067e4:	460a      	mov	r2, r1
 80067e6:	741a      	strb	r2, [r3, #16]
  for (uint8_t k = 0; k < 4; k++)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	3301      	adds	r3, #1
 80067ec:	71fb      	strb	r3, [r7, #7]
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d9ed      	bls.n	80067d0 <processReceivedData+0x18c>
    }

  for (uint8_t k = 0; k < 4; k++)
 80067f4:	2300      	movs	r3, #0
 80067f6:	71bb      	strb	r3, [r7, #6]
 80067f8:	e00e      	b.n	8006818 <processReceivedData+0x1d4>
    {
      RS485_RX_VERIFIED_DATA.H2_SENSOR_V.array[k] = dataFromRx[++i];
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	3301      	adds	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	7bfa      	ldrb	r2, [r7, #15]
 8006802:	79bb      	ldrb	r3, [r7, #6]
 8006804:	4913      	ldr	r1, [pc, #76]	; (8006854 <processReceivedData+0x210>)
 8006806:	5c8a      	ldrb	r2, [r1, r2]
 8006808:	b2d1      	uxtb	r1, r2
 800680a:	4a13      	ldr	r2, [pc, #76]	; (8006858 <processReceivedData+0x214>)
 800680c:	4413      	add	r3, r2
 800680e:	460a      	mov	r2, r1
 8006810:	751a      	strb	r2, [r3, #20]
  for (uint8_t k = 0; k < 4; k++)
 8006812:	79bb      	ldrb	r3, [r7, #6]
 8006814:	3301      	adds	r3, #1
 8006816:	71bb      	strb	r3, [r7, #6]
 8006818:	79bb      	ldrb	r3, [r7, #6]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d9ed      	bls.n	80067fa <processReceivedData+0x1b6>
    }

  RS485_RX_VERIFIED_DATA.h2SensorDigitalPin = dataFromRx[++i];
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	3301      	adds	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	4a0b      	ldr	r2, [pc, #44]	; (8006854 <processReceivedData+0x210>)
 8006828:	5cd3      	ldrb	r3, [r2, r3]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <processReceivedData+0x214>)
 800682e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  RS485_RX_VERIFIED_DATA.emergencyButton = dataFromRx[++i];
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	3301      	adds	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4a06      	ldr	r2, [pc, #24]	; (8006854 <processReceivedData+0x210>)
 800683c:	5cd3      	ldrb	r3, [r2, r3]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <processReceivedData+0x214>)
 8006842:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006846:	bf00      	nop
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000210 	.word	0x20000210
 8006858:	20000544 	.word	0x20000544

0800685c <resetActData>:
/**
* @fn resetActData
* @brief Zerowanie zmiennych docelowych (odbywa sie m.in w przypadku zerwania transmisji)
*/
static void resetActData(void)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
  RS485_RX_VERIFIED_DATA.interimSpeed = 0;
 8006862:	4b3e      	ldr	r3, [pc, #248]	; (800695c <resetActData+0x100>)
 8006864:	2200      	movs	r2, #0
 8006866:	779a      	strb	r2, [r3, #30]
  RS485_RX_VERIFIED_DATA.averageSpeed = 0;
 8006868:	4b3c      	ldr	r3, [pc, #240]	; (800695c <resetActData+0x100>)
 800686a:	2200      	movs	r2, #0
 800686c:	77da      	strb	r2, [r3, #31]

  RS485_RX_VERIFIED_DATA.laptime_minutes.value = 0;
 800686e:	4b3b      	ldr	r3, [pc, #236]	; (800695c <resetActData+0x100>)
 8006870:	2200      	movs	r2, #0
 8006872:	831a      	strh	r2, [r3, #24]
  RS485_RX_VERIFIED_DATA.laptime_seconds = 0;
 8006874:	4b39      	ldr	r3, [pc, #228]	; (800695c <resetActData+0x100>)
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2020 	strb.w	r2, [r3, #32]
  RS485_RX_VERIFIED_DATA.laptime_miliseconds.value = 0;
 800687c:	4b37      	ldr	r3, [pc, #220]	; (800695c <resetActData+0x100>)
 800687e:	2200      	movs	r2, #0
 8006880:	835a      	strh	r2, [r3, #26]

  for (uint8_t k = 0; k < 4; k++)
 8006882:	2300      	movs	r3, #0
 8006884:	71fb      	strb	r3, [r7, #7]
 8006886:	e006      	b.n	8006896 <resetActData+0x3a>
    {
      RS485_RX_VERIFIED_DATA.FC_V.array[k] = 0;
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	4a34      	ldr	r2, [pc, #208]	; (800695c <resetActData+0x100>)
 800688c:	2100      	movs	r1, #0
 800688e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t k = 0; k < 4; k++)
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	3301      	adds	r3, #1
 8006894:	71fb      	strb	r3, [r7, #7]
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d9f5      	bls.n	8006888 <resetActData+0x2c>
    }

  for (uint8_t k = 0; k < 4; k++)
 800689c:	2300      	movs	r3, #0
 800689e:	71bb      	strb	r3, [r7, #6]
 80068a0:	e007      	b.n	80068b2 <resetActData+0x56>
    {
      RS485_RX_VERIFIED_DATA.FC_TEMP.array[k] = 0;
 80068a2:	79bb      	ldrb	r3, [r7, #6]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	; (800695c <resetActData+0x100>)
 80068a6:	4413      	add	r3, r2
 80068a8:	2200      	movs	r2, #0
 80068aa:	711a      	strb	r2, [r3, #4]
  for (uint8_t k = 0; k < 4; k++)
 80068ac:	79bb      	ldrb	r3, [r7, #6]
 80068ae:	3301      	adds	r3, #1
 80068b0:	71bb      	strb	r3, [r7, #6]
 80068b2:	79bb      	ldrb	r3, [r7, #6]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d9f4      	bls.n	80068a2 <resetActData+0x46>
    }

  RS485_RX_VERIFIED_DATA.fcFanRPM.value = 0;
 80068b8:	4b28      	ldr	r3, [pc, #160]	; (800695c <resetActData+0x100>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	839a      	strh	r2, [r3, #28]

  for (uint8_t k = 0; k < 4; k++)
 80068be:	2300      	movs	r3, #0
 80068c0:	717b      	strb	r3, [r7, #5]
 80068c2:	e007      	b.n	80068d4 <resetActData+0x78>
    {
      RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_FC_TO_SC.array[k] = 0;
 80068c4:	797b      	ldrb	r3, [r7, #5]
 80068c6:	4a25      	ldr	r2, [pc, #148]	; (800695c <resetActData+0x100>)
 80068c8:	4413      	add	r3, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	721a      	strb	r2, [r3, #8]
  for (uint8_t k = 0; k < 4; k++)
 80068ce:	797b      	ldrb	r3, [r7, #5]
 80068d0:	3301      	adds	r3, #1
 80068d2:	717b      	strb	r3, [r7, #5]
 80068d4:	797b      	ldrb	r3, [r7, #5]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d9f4      	bls.n	80068c4 <resetActData+0x68>
    }

  for (uint8_t k = 0; k < 4; k++)
 80068da:	2300      	movs	r3, #0
 80068dc:	713b      	strb	r3, [r7, #4]
 80068de:	e007      	b.n	80068f0 <resetActData+0x94>
    {
      RS485_RX_VERIFIED_DATA.CURRENT_SENSOR_SC_TO_MOTOR.array[k] = 0;
 80068e0:	793b      	ldrb	r3, [r7, #4]
 80068e2:	4a1e      	ldr	r2, [pc, #120]	; (800695c <resetActData+0x100>)
 80068e4:	4413      	add	r3, r2
 80068e6:	2200      	movs	r2, #0
 80068e8:	731a      	strb	r2, [r3, #12]
  for (uint8_t k = 0; k < 4; k++)
 80068ea:	793b      	ldrb	r3, [r7, #4]
 80068ec:	3301      	adds	r3, #1
 80068ee:	713b      	strb	r3, [r7, #4]
 80068f0:	793b      	ldrb	r3, [r7, #4]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d9f4      	bls.n	80068e0 <resetActData+0x84>
    }

  RS485_RX_VERIFIED_DATA.fcToScMosfetPWM = 0;
 80068f6:	4b19      	ldr	r3, [pc, #100]	; (800695c <resetActData+0x100>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  RS485_RX_VERIFIED_DATA.motorPWM = 0;
 80068fe:	4b17      	ldr	r3, [pc, #92]	; (800695c <resetActData+0x100>)
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  for (uint8_t k = 0; k < 4; k++)
 8006906:	2300      	movs	r3, #0
 8006908:	70fb      	strb	r3, [r7, #3]
 800690a:	e007      	b.n	800691c <resetActData+0xc0>
    {
      RS485_RX_VERIFIED_DATA.SC_V.array[k] = 0;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <resetActData+0x100>)
 8006910:	4413      	add	r3, r2
 8006912:	2200      	movs	r2, #0
 8006914:	741a      	strb	r2, [r3, #16]
  for (uint8_t k = 0; k < 4; k++)
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	3301      	adds	r3, #1
 800691a:	70fb      	strb	r3, [r7, #3]
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	2b03      	cmp	r3, #3
 8006920:	d9f4      	bls.n	800690c <resetActData+0xb0>
    }

  for (uint8_t k = 0; k < 4; k++)
 8006922:	2300      	movs	r3, #0
 8006924:	70bb      	strb	r3, [r7, #2]
 8006926:	e007      	b.n	8006938 <resetActData+0xdc>
    {
      RS485_RX_VERIFIED_DATA.H2_SENSOR_V.array[k] = 0;
 8006928:	78bb      	ldrb	r3, [r7, #2]
 800692a:	4a0c      	ldr	r2, [pc, #48]	; (800695c <resetActData+0x100>)
 800692c:	4413      	add	r3, r2
 800692e:	2200      	movs	r2, #0
 8006930:	751a      	strb	r2, [r3, #20]
  for (uint8_t k = 0; k < 4; k++)
 8006932:	78bb      	ldrb	r3, [r7, #2]
 8006934:	3301      	adds	r3, #1
 8006936:	70bb      	strb	r3, [r7, #2]
 8006938:	78bb      	ldrb	r3, [r7, #2]
 800693a:	2b03      	cmp	r3, #3
 800693c:	d9f4      	bls.n	8006928 <resetActData+0xcc>
    }

  RS485_RX_VERIFIED_DATA.h2SensorDigitalPin = 0;
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <resetActData+0x100>)
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  RS485_RX_VERIFIED_DATA.emergencyButton = 0;
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <resetActData+0x100>)
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000544 	.word	0x20000544

08006960 <timers_init>:
/**
* @fn timers_init(void)
* @brief Funkcja inicjalizujaca timery
*/
void timers_init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim6);		//Inicjalizuj TIM6 pracujacy z czestotliwoscia 10kHz
 8006964:	4803      	ldr	r0, [pc, #12]	; (8006974 <timers_init+0x14>)
 8006966:	f7fc ffe5 	bl	8003934 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);		//Inicjalizuj TIM7 pracujacy z czestotliwoscia 100kHz
 800696a:	4803      	ldr	r0, [pc, #12]	; (8006978 <timers_init+0x18>)
 800696c:	f7fc ffe2 	bl	8003934 <HAL_TIM_Base_Start_IT>
}
 8006970:	bf00      	nop
 8006972:	bd80      	pop	{r7, pc}
 8006974:	200002a8 	.word	0x200002a8
 8006978:	200002f4 	.word	0x200002f4

0800697c <timers_step>:
/**
* @fn timers_main(void)
* @brief Glowna funkcja odpowiadajaca za interwaly czasowe wykorzystywane w systemie
*/
static inline void timers_step(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  timers_tick1kHz = 1;
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <timers_step+0x14>)
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]

  setSystemOperatingTime();
 8006986:	f000 f805 	bl	8006994 <setSystemOperatingTime>
}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000570 	.word	0x20000570

08006994 <setSystemOperatingTime>:
/**
* @fn setSystemOperatingTime(void)
* @brief Funkcja przeliczajaca czas pracy systemu na milisekundy, sekundy, minuty oraz godziny
*/
static inline void setSystemOperatingTime(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  timers_mainTimeMiliseconds++;
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <setSystemOperatingTime+0x78>)
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <setSystemOperatingTime+0x78>)
 80069a4:	801a      	strh	r2, [r3, #0]

  //Sekundy
  if (timers_mainTimeMiliseconds >= PERIOD_1S)
 80069a6:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <setSystemOperatingTime+0x78>)
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b0:	d309      	bcc.n	80069c6 <setSystemOperatingTime+0x32>
    {
      timers_mainTimeMiliseconds = 0;
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <setSystemOperatingTime+0x78>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	801a      	strh	r2, [r3, #0]
      timers_mainTimeSeconds++;
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <setSystemOperatingTime+0x7c>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	3301      	adds	r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <setSystemOperatingTime+0x7c>)
 80069c4:	701a      	strb	r2, [r3, #0]
    }

  //Minuty
  if (timers_mainTimeSeconds >= 60)
 80069c6:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <setSystemOperatingTime+0x7c>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b3b      	cmp	r3, #59	; 0x3b
 80069ce:	d909      	bls.n	80069e4 <setSystemOperatingTime+0x50>
    {
      timers_mainTimeSeconds = 0;
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <setSystemOperatingTime+0x7c>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
      timers_mainTimeMinutes++;
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <setSystemOperatingTime+0x80>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	3301      	adds	r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <setSystemOperatingTime+0x80>)
 80069e2:	701a      	strb	r2, [r3, #0]
    }

  //Godziny
  if (timers_mainTimeMinutes >= 60)
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <setSystemOperatingTime+0x80>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b3b      	cmp	r3, #59	; 0x3b
 80069ec:	d909      	bls.n	8006a02 <setSystemOperatingTime+0x6e>
    {
      timers_mainTimeMinutes = 0;
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <setSystemOperatingTime+0x80>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
      timers_mainTimeHours++;
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <setSystemOperatingTime+0x84>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	3301      	adds	r3, #1
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <setSystemOperatingTime+0x84>)
 8006a00:	701a      	strb	r2, [r3, #0]
    }
}
 8006a02:	bf00      	nop
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	2000056e 	.word	0x2000056e
 8006a10:	20000580 	.word	0x20000580
 8006a14:	20000578 	.word	0x20000578
 8006a18:	20000571 	.word	0x20000571

08006a1c <timers_beforeStep1kHz>:
/**
* @fn timers_beforeStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac przed hydrogreen_step()
*/
void timers_beforeStep1kHz(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  timers_sysCycle100kHzCnt = 0;
 8006a20:	4b03      	ldr	r3, [pc, #12]	; (8006a30 <timers_beforeStep1kHz+0x14>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	bf00      	nop
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000258 	.word	0x20000258

08006a34 <timers_afterStep1kHz>:
/**
* @fn timers_afterStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac po hydrogreen_step()
*/
void timers_afterStep1kHz(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  static uint32_t actSysCyclePeriod;
  static uint32_t avgSysCyclePeriodSum;
  static uint16_t avgCnt;

  //Warunek wykorzystywany przy inicjalizacji systemu (tylko raz)
  if (!initFlag)
 8006a38:	4b2a      	ldr	r3, [pc, #168]	; (8006ae4 <timers_afterStep1kHz+0xb0>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <timers_afterStep1kHz+0x24>
    {
      timers_minSysCyclePeriod = 10 * timers_sysCycle100kHzCnt;
 8006a40:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <timers_afterStep1kHz+0xb4>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <timers_afterStep1kHz+0xb8>)
 8006a50:	601a      	str	r2, [r3, #0]
      initFlag = 1;
 8006a52:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <timers_afterStep1kHz+0xb0>)
 8006a54:	2201      	movs	r2, #1
 8006a56:	701a      	strb	r2, [r3, #0]
    }

  actSysCyclePeriod = 10 * timers_sysCycle100kHzCnt; //Przeliczenie otrzymanej wartosci na mikrosekundy
 8006a58:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <timers_afterStep1kHz+0xb4>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <timers_afterStep1kHz+0xbc>)
 8006a68:	601a      	str	r2, [r3, #0]

  timers_sysCycle100kHzCnt = 0;
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <timers_afterStep1kHz+0xb4>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]

  //Oblicz sredni czas trwania cyklu ze 100 probek
  if (avgCnt <= 100)
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <timers_afterStep1kHz+0xc0>)
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	2b64      	cmp	r3, #100	; 0x64
 8006a76:	d80d      	bhi.n	8006a94 <timers_afterStep1kHz+0x60>
    {
      avgSysCyclePeriodSum = avgSysCyclePeriodSum + actSysCyclePeriod;
 8006a78:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <timers_afterStep1kHz+0xc4>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <timers_afterStep1kHz+0xbc>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4413      	add	r3, r2
 8006a82:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <timers_afterStep1kHz+0xc4>)
 8006a84:	6013      	str	r3, [r2, #0]
      avgCnt++;
 8006a86:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <timers_afterStep1kHz+0xc0>)
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <timers_afterStep1kHz+0xc0>)
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e00d      	b.n	8006ab0 <timers_afterStep1kHz+0x7c>
    }
  else
    {
      timers_avgSysCyclePeriod =  avgSysCyclePeriodSum / avgCnt;
 8006a94:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <timers_afterStep1kHz+0xc4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <timers_afterStep1kHz+0xc0>)
 8006a9a:	8812      	ldrh	r2, [r2, #0]
 8006a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa0:	4a16      	ldr	r2, [pc, #88]	; (8006afc <timers_afterStep1kHz+0xc8>)
 8006aa2:	6013      	str	r3, [r2, #0]
      avgSysCyclePeriodSum = 0;
 8006aa4:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <timers_afterStep1kHz+0xc4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
      avgCnt = 0;
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <timers_afterStep1kHz+0xc0>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	801a      	strh	r2, [r3, #0]
    }

  //Najkrotszy czas trwania cyklu
  if (actSysCyclePeriod < timers_minSysCyclePeriod)
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <timers_afterStep1kHz+0xbc>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <timers_afterStep1kHz+0xb8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d203      	bcs.n	8006ac4 <timers_afterStep1kHz+0x90>
    {
      timers_minSysCyclePeriod =  actSysCyclePeriod;
 8006abc:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <timers_afterStep1kHz+0xbc>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <timers_afterStep1kHz+0xb8>)
 8006ac2:	6013      	str	r3, [r2, #0]
    }

  //Najdluzszy czas trwania cyklu
  if (actSysCyclePeriod > timers_maxSysCyclePeriod)
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <timers_afterStep1kHz+0xbc>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <timers_afterStep1kHz+0xcc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d903      	bls.n	8006ad8 <timers_afterStep1kHz+0xa4>
    {
      timers_maxSysCyclePeriod = actSysCyclePeriod;
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <timers_afterStep1kHz+0xbc>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <timers_afterStep1kHz+0xcc>)
 8006ad6:	6013      	str	r3, [r2, #0]
    }
}
 8006ad8:	bf00      	nop
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000025c 	.word	0x2000025c
 8006ae8:	20000258 	.word	0x20000258
 8006aec:	2000057c 	.word	0x2000057c
 8006af0:	20000260 	.word	0x20000260
 8006af4:	20000264 	.word	0x20000264
 8006af8:	20000268 	.word	0x20000268
 8006afc:	20000584 	.word	0x20000584
 8006b00:	20000574 	.word	0x20000574

08006b04 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  timers_step();
 8006b08:	f7ff ff38 	bl	800697c <timers_step>
}
 8006b0c:	bf00      	nop
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d102      	bne.n	8006b28 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      timers_tick10kHz = 1;
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	701a      	strb	r2, [r3, #0]
    }

  if (htim->Instance == TIM7)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d104      	bne.n	8006b3c <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      timers_sysCycle100kHzCnt++;
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	4a06      	ldr	r2, [pc, #24]	; (8006b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006b3a:	6013      	str	r3, [r2, #0]
    }
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40001000 	.word	0x40001000
 8006b4c:	2000056c 	.word	0x2000056c
 8006b50:	40001400 	.word	0x40001400
 8006b54:	20000258 	.word	0x20000258

08006b58 <watchdog_init>:
/**
* @fn watchdog_init(void)
* @brief Funkcja sprawdzajaca przyczyne zresetowania systemu i inicjalizujaca watchdoga
*/
void watchdog_init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0a0      	sub	sp, #128	; 0x80
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b66:	fa93 f3a3 	rbit	r3, r3
 8006b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b70:	677b      	str	r3, [r7, #116]	; 0x74
 8006b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b74:	fa93 f3a3 	rbit	r3, r3
 8006b78:	673b      	str	r3, [r7, #112]	; 0x70
 8006b7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b82:	fa93 f3a3 	rbit	r3, r3
 8006b86:	66bb      	str	r3, [r7, #104]	; 0x68
  //Warunek sprawdzajacy czy system zostal zresetowany z powodu zaniku zasilania
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8006b88:	4b5a      	ldr	r3, [pc, #360]	; (8006cf4 <watchdog_init+0x19c>)
 8006b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b90:	667b      	str	r3, [r7, #100]	; 0x64
 8006b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b94:	fa93 f3a3 	rbit	r3, r3
 8006b98:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <watchdog_init+0x68>
    {
      watchdog_flt = WATCHDOG_FLT_LPWRRST;
 8006bb8:	4b4f      	ldr	r3, [pc, #316]	; (8006cf8 <watchdog_init+0x1a0>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e091      	b.n	8006ce4 <watchdog_init+0x18c>
 8006bc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc8:	fa93 f3a3 	rbit	r3, r3
 8006bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8006bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd6:	fa93 f3a3 	rbit	r3, r3
 8006bda:	653b      	str	r3, [r7, #80]	; 0x50
 8006bdc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be4:	fa93 f3a3 	rbit	r3, r3
 8006be8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

  //Warunek sprawdzajacy czy system zaczal prace po wykorzystaniu resetu przez uklad czuwajacy
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8006bea:	4b42      	ldr	r3, [pc, #264]	; (8006cf4 <watchdog_init+0x19c>)
 8006bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf6:	fa93 f3a3 	rbit	r3, r3
 8006bfa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2101      	movs	r1, #1
 8006c10:	fa01 f303 	lsl.w	r3, r1, r3
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <watchdog_init+0xca>
    {
      watchdog_flt = WATCHDOG_FLT_IWDGRST;
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <watchdog_init+0x1a0>)
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e060      	b.n	8006ce4 <watchdog_init+0x18c>
 8006c22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2a:	fa93 f3a3 	rbit	r3, r3
 8006c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	fa93 f3a3 	rbit	r3, r3
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	fa93 f3a3 	rbit	r3, r3
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

  //Warunek sprawdzajacy czy reset systemu zostal wywolany w programie
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8006c4c:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <watchdog_init+0x19c>)
 8006c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	fa93 f3a3 	rbit	r3, r3
 8006c5c:	623b      	str	r3, [r7, #32]
  return result;
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	fab3 f383 	clz	r3, r3
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <watchdog_init+0x12c>
    {
      watchdog_flt = WATCHDOG_FLT_SFTRST;
 8006c7c:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <watchdog_init+0x1a0>)
 8006c7e:	2203      	movs	r2, #3
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	e02f      	b.n	8006ce4 <watchdog_init+0x18c>
 8006c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa93 f3a3 	rbit	r3, r3
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	fa93 f3a3 	rbit	r3, r3
 8006cac:	60bb      	str	r3, [r7, #8]
    }

  //Warunek sprawdzajacy czy reset systemu nastapil poprzez wlaczenie badz odlaczenie zasilania
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 8006cae:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <watchdog_init+0x19c>)
 8006cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cb6:	607b      	str	r3, [r7, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	fa93 f3a3 	rbit	r3, r3
 8006cbe:	603b      	str	r3, [r7, #0]
  return result;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	fab3 f383 	clz	r3, r3
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <watchdog_init+0x18c>
    {
      watchdog_flt = WATCHDOG_FLT_NONE;
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <watchdog_init+0x1a0>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
    }

  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8006ce4:	4805      	ldr	r0, [pc, #20]	; (8006cfc <watchdog_init+0x1a4>)
 8006ce6:	f7fb fb59 	bl	800239c <HAL_IWDG_Refresh>
}
 8006cea:	bf00      	nop
 8006cec:	3780      	adds	r7, #128	; 0x80
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	20000588 	.word	0x20000588
 8006cfc:	20000298 	.word	0x20000298

08006d00 <watchdog_step>:
/**
* @fn watchdog_step(void)
* @brief Funkcja przeladowujaca IWDG, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
inline void watchdog_step(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8006d04:	4802      	ldr	r0, [pc, #8]	; (8006d10 <watchdog_step+0x10>)
 8006d06:	f7fb fb49 	bl	800239c <HAL_IWDG_Refresh>
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000298 	.word	0x20000298

08006d14 <__errno>:
 8006d14:	4b01      	ldr	r3, [pc, #4]	; (8006d1c <__errno+0x8>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	2000000c 	.word	0x2000000c

08006d20 <__libc_init_array>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4e0d      	ldr	r6, [pc, #52]	; (8006d58 <__libc_init_array+0x38>)
 8006d24:	4c0d      	ldr	r4, [pc, #52]	; (8006d5c <__libc_init_array+0x3c>)
 8006d26:	1ba4      	subs	r4, r4, r6
 8006d28:	10a4      	asrs	r4, r4, #2
 8006d2a:	2500      	movs	r5, #0
 8006d2c:	42a5      	cmp	r5, r4
 8006d2e:	d109      	bne.n	8006d44 <__libc_init_array+0x24>
 8006d30:	4e0b      	ldr	r6, [pc, #44]	; (8006d60 <__libc_init_array+0x40>)
 8006d32:	4c0c      	ldr	r4, [pc, #48]	; (8006d64 <__libc_init_array+0x44>)
 8006d34:	f002 f85c 	bl	8008df0 <_init>
 8006d38:	1ba4      	subs	r4, r4, r6
 8006d3a:	10a4      	asrs	r4, r4, #2
 8006d3c:	2500      	movs	r5, #0
 8006d3e:	42a5      	cmp	r5, r4
 8006d40:	d105      	bne.n	8006d4e <__libc_init_array+0x2e>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d48:	4798      	blx	r3
 8006d4a:	3501      	adds	r5, #1
 8006d4c:	e7ee      	b.n	8006d2c <__libc_init_array+0xc>
 8006d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d52:	4798      	blx	r3
 8006d54:	3501      	adds	r5, #1
 8006d56:	e7f2      	b.n	8006d3e <__libc_init_array+0x1e>
 8006d58:	08009250 	.word	0x08009250
 8006d5c:	08009250 	.word	0x08009250
 8006d60:	08009250 	.word	0x08009250
 8006d64:	08009254 	.word	0x08009254

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <__cvt>:
 8006d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	ec55 4b10 	vmov	r4, r5, d0
 8006d80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	460e      	mov	r6, r1
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	bfb8      	it	lt
 8006d90:	4622      	movlt	r2, r4
 8006d92:	462b      	mov	r3, r5
 8006d94:	f027 0720 	bic.w	r7, r7, #32
 8006d98:	bfbb      	ittet	lt
 8006d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d9e:	461d      	movlt	r5, r3
 8006da0:	2300      	movge	r3, #0
 8006da2:	232d      	movlt	r3, #45	; 0x2d
 8006da4:	bfb8      	it	lt
 8006da6:	4614      	movlt	r4, r2
 8006da8:	2f46      	cmp	r7, #70	; 0x46
 8006daa:	700b      	strb	r3, [r1, #0]
 8006dac:	d004      	beq.n	8006db8 <__cvt+0x40>
 8006dae:	2f45      	cmp	r7, #69	; 0x45
 8006db0:	d100      	bne.n	8006db4 <__cvt+0x3c>
 8006db2:	3601      	adds	r6, #1
 8006db4:	2102      	movs	r1, #2
 8006db6:	e000      	b.n	8006dba <__cvt+0x42>
 8006db8:	2103      	movs	r1, #3
 8006dba:	ab03      	add	r3, sp, #12
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	ab02      	add	r3, sp, #8
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	4653      	mov	r3, sl
 8006dc6:	ec45 4b10 	vmov	d0, r4, r5
 8006dca:	f000 fcdd 	bl	8007788 <_dtoa_r>
 8006dce:	2f47      	cmp	r7, #71	; 0x47
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	d102      	bne.n	8006dda <__cvt+0x62>
 8006dd4:	f019 0f01 	tst.w	r9, #1
 8006dd8:	d026      	beq.n	8006e28 <__cvt+0xb0>
 8006dda:	2f46      	cmp	r7, #70	; 0x46
 8006ddc:	eb08 0906 	add.w	r9, r8, r6
 8006de0:	d111      	bne.n	8006e06 <__cvt+0x8e>
 8006de2:	f898 3000 	ldrb.w	r3, [r8]
 8006de6:	2b30      	cmp	r3, #48	; 0x30
 8006de8:	d10a      	bne.n	8006e00 <__cvt+0x88>
 8006dea:	2200      	movs	r2, #0
 8006dec:	2300      	movs	r3, #0
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df6:	b918      	cbnz	r0, 8006e00 <__cvt+0x88>
 8006df8:	f1c6 0601 	rsb	r6, r6, #1
 8006dfc:	f8ca 6000 	str.w	r6, [sl]
 8006e00:	f8da 3000 	ldr.w	r3, [sl]
 8006e04:	4499      	add	r9, r3
 8006e06:	2200      	movs	r2, #0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e12:	b938      	cbnz	r0, 8006e24 <__cvt+0xac>
 8006e14:	2230      	movs	r2, #48	; 0x30
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	454b      	cmp	r3, r9
 8006e1a:	d205      	bcs.n	8006e28 <__cvt+0xb0>
 8006e1c:	1c59      	adds	r1, r3, #1
 8006e1e:	9103      	str	r1, [sp, #12]
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e7f8      	b.n	8006e16 <__cvt+0x9e>
 8006e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e2c:	eba3 0308 	sub.w	r3, r3, r8
 8006e30:	4640      	mov	r0, r8
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	b004      	add	sp, #16
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e3a <__exponent>:
 8006e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	4604      	mov	r4, r0
 8006e40:	bfba      	itte	lt
 8006e42:	4249      	neglt	r1, r1
 8006e44:	232d      	movlt	r3, #45	; 0x2d
 8006e46:	232b      	movge	r3, #43	; 0x2b
 8006e48:	2909      	cmp	r1, #9
 8006e4a:	f804 2b02 	strb.w	r2, [r4], #2
 8006e4e:	7043      	strb	r3, [r0, #1]
 8006e50:	dd20      	ble.n	8006e94 <__exponent+0x5a>
 8006e52:	f10d 0307 	add.w	r3, sp, #7
 8006e56:	461f      	mov	r7, r3
 8006e58:	260a      	movs	r6, #10
 8006e5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e5e:	fb06 1115 	mls	r1, r6, r5, r1
 8006e62:	3130      	adds	r1, #48	; 0x30
 8006e64:	2d09      	cmp	r5, #9
 8006e66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e6a:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e6e:	4629      	mov	r1, r5
 8006e70:	dc09      	bgt.n	8006e86 <__exponent+0x4c>
 8006e72:	3130      	adds	r1, #48	; 0x30
 8006e74:	3b02      	subs	r3, #2
 8006e76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e7a:	42bb      	cmp	r3, r7
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	d304      	bcc.n	8006e8a <__exponent+0x50>
 8006e80:	1a10      	subs	r0, r2, r0
 8006e82:	b003      	add	sp, #12
 8006e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e86:	4613      	mov	r3, r2
 8006e88:	e7e7      	b.n	8006e5a <__exponent+0x20>
 8006e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8e:	f804 2b01 	strb.w	r2, [r4], #1
 8006e92:	e7f2      	b.n	8006e7a <__exponent+0x40>
 8006e94:	2330      	movs	r3, #48	; 0x30
 8006e96:	4419      	add	r1, r3
 8006e98:	7083      	strb	r3, [r0, #2]
 8006e9a:	1d02      	adds	r2, r0, #4
 8006e9c:	70c1      	strb	r1, [r0, #3]
 8006e9e:	e7ef      	b.n	8006e80 <__exponent+0x46>

08006ea0 <_printf_float>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	b08d      	sub	sp, #52	; 0x34
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006eac:	4616      	mov	r6, r2
 8006eae:	461f      	mov	r7, r3
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	f001 fa21 	bl	80082f8 <_localeconv_r>
 8006eb6:	6803      	ldr	r3, [r0, #0]
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7f9 f988 	bl	80001d0 <strlen>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec8:	9005      	str	r0, [sp, #20]
 8006eca:	3307      	adds	r3, #7
 8006ecc:	f023 0307 	bic.w	r3, r3, #7
 8006ed0:	f103 0208 	add.w	r2, r3, #8
 8006ed4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ed8:	f8d4 b000 	ldr.w	fp, [r4]
 8006edc:	f8c8 2000 	str.w	r2, [r8]
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ee8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006eec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8006efa:	4ba7      	ldr	r3, [pc, #668]	; (8007198 <_printf_float+0x2f8>)
 8006efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f00:	f7f9 fe14 	bl	8000b2c <__aeabi_dcmpun>
 8006f04:	bb70      	cbnz	r0, 8006f64 <_printf_float+0xc4>
 8006f06:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0a:	4ba3      	ldr	r3, [pc, #652]	; (8007198 <_printf_float+0x2f8>)
 8006f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f10:	f7f9 fdee 	bl	8000af0 <__aeabi_dcmple>
 8006f14:	bb30      	cbnz	r0, 8006f64 <_printf_float+0xc4>
 8006f16:	2200      	movs	r2, #0
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	f7f9 fddd 	bl	8000adc <__aeabi_dcmplt>
 8006f22:	b110      	cbz	r0, 8006f2a <_printf_float+0x8a>
 8006f24:	232d      	movs	r3, #45	; 0x2d
 8006f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f2a:	4a9c      	ldr	r2, [pc, #624]	; (800719c <_printf_float+0x2fc>)
 8006f2c:	4b9c      	ldr	r3, [pc, #624]	; (80071a0 <_printf_float+0x300>)
 8006f2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f32:	bf8c      	ite	hi
 8006f34:	4690      	movhi	r8, r2
 8006f36:	4698      	movls	r8, r3
 8006f38:	2303      	movs	r3, #3
 8006f3a:	f02b 0204 	bic.w	r2, fp, #4
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	6022      	str	r2, [r4, #0]
 8006f42:	f04f 0900 	mov.w	r9, #0
 8006f46:	9700      	str	r7, [sp, #0]
 8006f48:	4633      	mov	r3, r6
 8006f4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 f9e6 	bl	8007320 <_printf_common>
 8006f54:	3001      	adds	r0, #1
 8006f56:	f040 808d 	bne.w	8007074 <_printf_float+0x1d4>
 8006f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5e:	b00d      	add	sp, #52	; 0x34
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 fdde 	bl	8000b2c <__aeabi_dcmpun>
 8006f70:	b110      	cbz	r0, 8006f78 <_printf_float+0xd8>
 8006f72:	4a8c      	ldr	r2, [pc, #560]	; (80071a4 <_printf_float+0x304>)
 8006f74:	4b8c      	ldr	r3, [pc, #560]	; (80071a8 <_printf_float+0x308>)
 8006f76:	e7da      	b.n	8006f2e <_printf_float+0x8e>
 8006f78:	6861      	ldr	r1, [r4, #4]
 8006f7a:	1c4b      	adds	r3, r1, #1
 8006f7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f80:	a80a      	add	r0, sp, #40	; 0x28
 8006f82:	d13e      	bne.n	8007002 <_printf_float+0x162>
 8006f84:	2306      	movs	r3, #6
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f8e:	ab09      	add	r3, sp, #36	; 0x24
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	ec49 8b10 	vmov	d0, r8, r9
 8006f96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f9a:	6022      	str	r2, [r4, #0]
 8006f9c:	f8cd a004 	str.w	sl, [sp, #4]
 8006fa0:	6861      	ldr	r1, [r4, #4]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f7ff fee8 	bl	8006d78 <__cvt>
 8006fa8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006fac:	2b47      	cmp	r3, #71	; 0x47
 8006fae:	4680      	mov	r8, r0
 8006fb0:	d109      	bne.n	8006fc6 <_printf_float+0x126>
 8006fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb4:	1cd8      	adds	r0, r3, #3
 8006fb6:	db02      	blt.n	8006fbe <_printf_float+0x11e>
 8006fb8:	6862      	ldr	r2, [r4, #4]
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	dd47      	ble.n	800704e <_printf_float+0x1ae>
 8006fbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fc2:	fa5f fa8a 	uxtb.w	sl, sl
 8006fc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fcc:	d824      	bhi.n	8007018 <_printf_float+0x178>
 8006fce:	3901      	subs	r1, #1
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fd6:	9109      	str	r1, [sp, #36]	; 0x24
 8006fd8:	f7ff ff2f 	bl	8006e3a <__exponent>
 8006fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fde:	1813      	adds	r3, r2, r0
 8006fe0:	2a01      	cmp	r2, #1
 8006fe2:	4681      	mov	r9, r0
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	dc02      	bgt.n	8006fee <_printf_float+0x14e>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	07d1      	lsls	r1, r2, #31
 8006fec:	d501      	bpl.n	8006ff2 <_printf_float+0x152>
 8006fee:	3301      	adds	r3, #1
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0a5      	beq.n	8006f46 <_printf_float+0xa6>
 8006ffa:	232d      	movs	r3, #45	; 0x2d
 8006ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007000:	e7a1      	b.n	8006f46 <_printf_float+0xa6>
 8007002:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007006:	f000 8177 	beq.w	80072f8 <_printf_float+0x458>
 800700a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800700e:	d1bb      	bne.n	8006f88 <_printf_float+0xe8>
 8007010:	2900      	cmp	r1, #0
 8007012:	d1b9      	bne.n	8006f88 <_printf_float+0xe8>
 8007014:	2301      	movs	r3, #1
 8007016:	e7b6      	b.n	8006f86 <_printf_float+0xe6>
 8007018:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800701c:	d119      	bne.n	8007052 <_printf_float+0x1b2>
 800701e:	2900      	cmp	r1, #0
 8007020:	6863      	ldr	r3, [r4, #4]
 8007022:	dd0c      	ble.n	800703e <_printf_float+0x19e>
 8007024:	6121      	str	r1, [r4, #16]
 8007026:	b913      	cbnz	r3, 800702e <_printf_float+0x18e>
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	07d2      	lsls	r2, r2, #31
 800702c:	d502      	bpl.n	8007034 <_printf_float+0x194>
 800702e:	3301      	adds	r3, #1
 8007030:	440b      	add	r3, r1
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007036:	65a3      	str	r3, [r4, #88]	; 0x58
 8007038:	f04f 0900 	mov.w	r9, #0
 800703c:	e7d9      	b.n	8006ff2 <_printf_float+0x152>
 800703e:	b913      	cbnz	r3, 8007046 <_printf_float+0x1a6>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	07d0      	lsls	r0, r2, #31
 8007044:	d501      	bpl.n	800704a <_printf_float+0x1aa>
 8007046:	3302      	adds	r3, #2
 8007048:	e7f3      	b.n	8007032 <_printf_float+0x192>
 800704a:	2301      	movs	r3, #1
 800704c:	e7f1      	b.n	8007032 <_printf_float+0x192>
 800704e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007052:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007056:	4293      	cmp	r3, r2
 8007058:	db05      	blt.n	8007066 <_printf_float+0x1c6>
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	6123      	str	r3, [r4, #16]
 800705e:	07d1      	lsls	r1, r2, #31
 8007060:	d5e8      	bpl.n	8007034 <_printf_float+0x194>
 8007062:	3301      	adds	r3, #1
 8007064:	e7e5      	b.n	8007032 <_printf_float+0x192>
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfd4      	ite	le
 800706a:	f1c3 0302 	rsble	r3, r3, #2
 800706e:	2301      	movgt	r3, #1
 8007070:	4413      	add	r3, r2
 8007072:	e7de      	b.n	8007032 <_printf_float+0x192>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	055a      	lsls	r2, r3, #21
 8007078:	d407      	bmi.n	800708a <_printf_float+0x1ea>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	4642      	mov	r2, r8
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d12b      	bne.n	80070e0 <_printf_float+0x240>
 8007088:	e767      	b.n	8006f5a <_printf_float+0xba>
 800708a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800708e:	f240 80dc 	bls.w	800724a <_printf_float+0x3aa>
 8007092:	2200      	movs	r2, #0
 8007094:	2300      	movs	r3, #0
 8007096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800709a:	f7f9 fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d033      	beq.n	800710a <_printf_float+0x26a>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4a41      	ldr	r2, [pc, #260]	; (80071ac <_printf_float+0x30c>)
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f af54 	beq.w	8006f5a <_printf_float+0xba>
 80070b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070b6:	429a      	cmp	r2, r3
 80070b8:	db02      	blt.n	80070c0 <_printf_float+0x220>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	07d8      	lsls	r0, r3, #31
 80070be:	d50f      	bpl.n	80070e0 <_printf_float+0x240>
 80070c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	47b8      	blx	r7
 80070ca:	3001      	adds	r0, #1
 80070cc:	f43f af45 	beq.w	8006f5a <_printf_float+0xba>
 80070d0:	f04f 0800 	mov.w	r8, #0
 80070d4:	f104 091a 	add.w	r9, r4, #26
 80070d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070da:	3b01      	subs	r3, #1
 80070dc:	4543      	cmp	r3, r8
 80070de:	dc09      	bgt.n	80070f4 <_printf_float+0x254>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	079b      	lsls	r3, r3, #30
 80070e4:	f100 8103 	bmi.w	80072ee <_printf_float+0x44e>
 80070e8:	68e0      	ldr	r0, [r4, #12]
 80070ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ec:	4298      	cmp	r0, r3
 80070ee:	bfb8      	it	lt
 80070f0:	4618      	movlt	r0, r3
 80070f2:	e734      	b.n	8006f5e <_printf_float+0xbe>
 80070f4:	2301      	movs	r3, #1
 80070f6:	464a      	mov	r2, r9
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f af2b 	beq.w	8006f5a <_printf_float+0xba>
 8007104:	f108 0801 	add.w	r8, r8, #1
 8007108:	e7e6      	b.n	80070d8 <_printf_float+0x238>
 800710a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	dc2b      	bgt.n	8007168 <_printf_float+0x2c8>
 8007110:	2301      	movs	r3, #1
 8007112:	4a26      	ldr	r2, [pc, #152]	; (80071ac <_printf_float+0x30c>)
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af1d 	beq.w	8006f5a <_printf_float+0xba>
 8007120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007122:	b923      	cbnz	r3, 800712e <_printf_float+0x28e>
 8007124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007126:	b913      	cbnz	r3, 800712e <_printf_float+0x28e>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07d9      	lsls	r1, r3, #31
 800712c:	d5d8      	bpl.n	80070e0 <_printf_float+0x240>
 800712e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af0e 	beq.w	8006f5a <_printf_float+0xba>
 800713e:	f04f 0900 	mov.w	r9, #0
 8007142:	f104 0a1a 	add.w	sl, r4, #26
 8007146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007148:	425b      	negs	r3, r3
 800714a:	454b      	cmp	r3, r9
 800714c:	dc01      	bgt.n	8007152 <_printf_float+0x2b2>
 800714e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007150:	e794      	b.n	800707c <_printf_float+0x1dc>
 8007152:	2301      	movs	r3, #1
 8007154:	4652      	mov	r2, sl
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f aefc 	beq.w	8006f5a <_printf_float+0xba>
 8007162:	f109 0901 	add.w	r9, r9, #1
 8007166:	e7ee      	b.n	8007146 <_printf_float+0x2a6>
 8007168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800716a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800716c:	429a      	cmp	r2, r3
 800716e:	bfa8      	it	ge
 8007170:	461a      	movge	r2, r3
 8007172:	2a00      	cmp	r2, #0
 8007174:	4691      	mov	r9, r2
 8007176:	dd07      	ble.n	8007188 <_printf_float+0x2e8>
 8007178:	4613      	mov	r3, r2
 800717a:	4631      	mov	r1, r6
 800717c:	4642      	mov	r2, r8
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f aee9 	beq.w	8006f5a <_printf_float+0xba>
 8007188:	f104 031a 	add.w	r3, r4, #26
 800718c:	f04f 0b00 	mov.w	fp, #0
 8007190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007194:	9306      	str	r3, [sp, #24]
 8007196:	e015      	b.n	80071c4 <_printf_float+0x324>
 8007198:	7fefffff 	.word	0x7fefffff
 800719c:	08008ff4 	.word	0x08008ff4
 80071a0:	08008ff0 	.word	0x08008ff0
 80071a4:	08008ffc 	.word	0x08008ffc
 80071a8:	08008ff8 	.word	0x08008ff8
 80071ac:	08009000 	.word	0x08009000
 80071b0:	2301      	movs	r3, #1
 80071b2:	9a06      	ldr	r2, [sp, #24]
 80071b4:	4631      	mov	r1, r6
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	f43f aecd 	beq.w	8006f5a <_printf_float+0xba>
 80071c0:	f10b 0b01 	add.w	fp, fp, #1
 80071c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071c8:	ebaa 0309 	sub.w	r3, sl, r9
 80071cc:	455b      	cmp	r3, fp
 80071ce:	dcef      	bgt.n	80071b0 <_printf_float+0x310>
 80071d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071d4:	429a      	cmp	r2, r3
 80071d6:	44d0      	add	r8, sl
 80071d8:	db15      	blt.n	8007206 <_printf_float+0x366>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	07da      	lsls	r2, r3, #31
 80071de:	d412      	bmi.n	8007206 <_printf_float+0x366>
 80071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071e4:	eba3 020a 	sub.w	r2, r3, sl
 80071e8:	eba3 0a01 	sub.w	sl, r3, r1
 80071ec:	4592      	cmp	sl, r2
 80071ee:	bfa8      	it	ge
 80071f0:	4692      	movge	sl, r2
 80071f2:	f1ba 0f00 	cmp.w	sl, #0
 80071f6:	dc0e      	bgt.n	8007216 <_printf_float+0x376>
 80071f8:	f04f 0800 	mov.w	r8, #0
 80071fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007200:	f104 091a 	add.w	r9, r4, #26
 8007204:	e019      	b.n	800723a <_printf_float+0x39a>
 8007206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	d1e5      	bne.n	80071e0 <_printf_float+0x340>
 8007214:	e6a1      	b.n	8006f5a <_printf_float+0xba>
 8007216:	4653      	mov	r3, sl
 8007218:	4642      	mov	r2, r8
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	d1e9      	bne.n	80071f8 <_printf_float+0x358>
 8007224:	e699      	b.n	8006f5a <_printf_float+0xba>
 8007226:	2301      	movs	r3, #1
 8007228:	464a      	mov	r2, r9
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	f43f ae92 	beq.w	8006f5a <_printf_float+0xba>
 8007236:	f108 0801 	add.w	r8, r8, #1
 800723a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	eba3 030a 	sub.w	r3, r3, sl
 8007244:	4543      	cmp	r3, r8
 8007246:	dcee      	bgt.n	8007226 <_printf_float+0x386>
 8007248:	e74a      	b.n	80070e0 <_printf_float+0x240>
 800724a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800724c:	2a01      	cmp	r2, #1
 800724e:	dc01      	bgt.n	8007254 <_printf_float+0x3b4>
 8007250:	07db      	lsls	r3, r3, #31
 8007252:	d53a      	bpl.n	80072ca <_printf_float+0x42a>
 8007254:	2301      	movs	r3, #1
 8007256:	4642      	mov	r2, r8
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f ae7b 	beq.w	8006f5a <_printf_float+0xba>
 8007264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f108 0801 	add.w	r8, r8, #1
 8007274:	f43f ae71 	beq.w	8006f5a <_printf_float+0xba>
 8007278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727a:	2200      	movs	r2, #0
 800727c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007284:	2300      	movs	r3, #0
 8007286:	f7f9 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800728a:	b9c8      	cbnz	r0, 80072c0 <_printf_float+0x420>
 800728c:	4653      	mov	r3, sl
 800728e:	4642      	mov	r2, r8
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	d10e      	bne.n	80072b8 <_printf_float+0x418>
 800729a:	e65e      	b.n	8006f5a <_printf_float+0xba>
 800729c:	2301      	movs	r3, #1
 800729e:	4652      	mov	r2, sl
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	f43f ae57 	beq.w	8006f5a <_printf_float+0xba>
 80072ac:	f108 0801 	add.w	r8, r8, #1
 80072b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4543      	cmp	r3, r8
 80072b6:	dcf1      	bgt.n	800729c <_printf_float+0x3fc>
 80072b8:	464b      	mov	r3, r9
 80072ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072be:	e6de      	b.n	800707e <_printf_float+0x1de>
 80072c0:	f04f 0800 	mov.w	r8, #0
 80072c4:	f104 0a1a 	add.w	sl, r4, #26
 80072c8:	e7f2      	b.n	80072b0 <_printf_float+0x410>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e7df      	b.n	800728e <_printf_float+0x3ee>
 80072ce:	2301      	movs	r3, #1
 80072d0:	464a      	mov	r2, r9
 80072d2:	4631      	mov	r1, r6
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	f43f ae3e 	beq.w	8006f5a <_printf_float+0xba>
 80072de:	f108 0801 	add.w	r8, r8, #1
 80072e2:	68e3      	ldr	r3, [r4, #12]
 80072e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	4543      	cmp	r3, r8
 80072ea:	dcf0      	bgt.n	80072ce <_printf_float+0x42e>
 80072ec:	e6fc      	b.n	80070e8 <_printf_float+0x248>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	f104 0919 	add.w	r9, r4, #25
 80072f6:	e7f4      	b.n	80072e2 <_printf_float+0x442>
 80072f8:	2900      	cmp	r1, #0
 80072fa:	f43f ae8b 	beq.w	8007014 <_printf_float+0x174>
 80072fe:	2300      	movs	r3, #0
 8007300:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007304:	ab09      	add	r3, sp, #36	; 0x24
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	ec49 8b10 	vmov	d0, r8, r9
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	f8cd a004 	str.w	sl, [sp, #4]
 8007312:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007316:	4628      	mov	r0, r5
 8007318:	f7ff fd2e 	bl	8006d78 <__cvt>
 800731c:	4680      	mov	r8, r0
 800731e:	e648      	b.n	8006fb2 <_printf_float+0x112>

08007320 <_printf_common>:
 8007320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	4691      	mov	r9, r2
 8007326:	461f      	mov	r7, r3
 8007328:	688a      	ldr	r2, [r1, #8]
 800732a:	690b      	ldr	r3, [r1, #16]
 800732c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007330:	4293      	cmp	r3, r2
 8007332:	bfb8      	it	lt
 8007334:	4613      	movlt	r3, r2
 8007336:	f8c9 3000 	str.w	r3, [r9]
 800733a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800733e:	4606      	mov	r6, r0
 8007340:	460c      	mov	r4, r1
 8007342:	b112      	cbz	r2, 800734a <_printf_common+0x2a>
 8007344:	3301      	adds	r3, #1
 8007346:	f8c9 3000 	str.w	r3, [r9]
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	0699      	lsls	r1, r3, #26
 800734e:	bf42      	ittt	mi
 8007350:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007354:	3302      	addmi	r3, #2
 8007356:	f8c9 3000 	strmi.w	r3, [r9]
 800735a:	6825      	ldr	r5, [r4, #0]
 800735c:	f015 0506 	ands.w	r5, r5, #6
 8007360:	d107      	bne.n	8007372 <_printf_common+0x52>
 8007362:	f104 0a19 	add.w	sl, r4, #25
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	f8d9 2000 	ldr.w	r2, [r9]
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	42ab      	cmp	r3, r5
 8007370:	dc28      	bgt.n	80073c4 <_printf_common+0xa4>
 8007372:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	3300      	adds	r3, #0
 800737a:	bf18      	it	ne
 800737c:	2301      	movne	r3, #1
 800737e:	0692      	lsls	r2, r2, #26
 8007380:	d42d      	bmi.n	80073de <_printf_common+0xbe>
 8007382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007386:	4639      	mov	r1, r7
 8007388:	4630      	mov	r0, r6
 800738a:	47c0      	blx	r8
 800738c:	3001      	adds	r0, #1
 800738e:	d020      	beq.n	80073d2 <_printf_common+0xb2>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	68e5      	ldr	r5, [r4, #12]
 8007394:	f8d9 2000 	ldr.w	r2, [r9]
 8007398:	f003 0306 	and.w	r3, r3, #6
 800739c:	2b04      	cmp	r3, #4
 800739e:	bf08      	it	eq
 80073a0:	1aad      	subeq	r5, r5, r2
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	6922      	ldr	r2, [r4, #16]
 80073a6:	bf0c      	ite	eq
 80073a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073ac:	2500      	movne	r5, #0
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bfc4      	itt	gt
 80073b2:	1a9b      	subgt	r3, r3, r2
 80073b4:	18ed      	addgt	r5, r5, r3
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	341a      	adds	r4, #26
 80073bc:	454d      	cmp	r5, r9
 80073be:	d11a      	bne.n	80073f6 <_printf_common+0xd6>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e008      	b.n	80073d6 <_printf_common+0xb6>
 80073c4:	2301      	movs	r3, #1
 80073c6:	4652      	mov	r2, sl
 80073c8:	4639      	mov	r1, r7
 80073ca:	4630      	mov	r0, r6
 80073cc:	47c0      	blx	r8
 80073ce:	3001      	adds	r0, #1
 80073d0:	d103      	bne.n	80073da <_printf_common+0xba>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	3501      	adds	r5, #1
 80073dc:	e7c3      	b.n	8007366 <_printf_common+0x46>
 80073de:	18e1      	adds	r1, r4, r3
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	2030      	movs	r0, #48	; 0x30
 80073e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073e8:	4422      	add	r2, r4
 80073ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073f2:	3302      	adds	r3, #2
 80073f4:	e7c5      	b.n	8007382 <_printf_common+0x62>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4622      	mov	r2, r4
 80073fa:	4639      	mov	r1, r7
 80073fc:	4630      	mov	r0, r6
 80073fe:	47c0      	blx	r8
 8007400:	3001      	adds	r0, #1
 8007402:	d0e6      	beq.n	80073d2 <_printf_common+0xb2>
 8007404:	f109 0901 	add.w	r9, r9, #1
 8007408:	e7d8      	b.n	80073bc <_printf_common+0x9c>
	...

0800740c <_printf_i>:
 800740c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007410:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007414:	460c      	mov	r4, r1
 8007416:	7e09      	ldrb	r1, [r1, #24]
 8007418:	b085      	sub	sp, #20
 800741a:	296e      	cmp	r1, #110	; 0x6e
 800741c:	4617      	mov	r7, r2
 800741e:	4606      	mov	r6, r0
 8007420:	4698      	mov	r8, r3
 8007422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007424:	f000 80b3 	beq.w	800758e <_printf_i+0x182>
 8007428:	d822      	bhi.n	8007470 <_printf_i+0x64>
 800742a:	2963      	cmp	r1, #99	; 0x63
 800742c:	d036      	beq.n	800749c <_printf_i+0x90>
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x3a>
 8007430:	2900      	cmp	r1, #0
 8007432:	f000 80b9 	beq.w	80075a8 <_printf_i+0x19c>
 8007436:	2958      	cmp	r1, #88	; 0x58
 8007438:	f000 8083 	beq.w	8007542 <_printf_i+0x136>
 800743c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007440:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007444:	e032      	b.n	80074ac <_printf_i+0xa0>
 8007446:	2964      	cmp	r1, #100	; 0x64
 8007448:	d001      	beq.n	800744e <_printf_i+0x42>
 800744a:	2969      	cmp	r1, #105	; 0x69
 800744c:	d1f6      	bne.n	800743c <_printf_i+0x30>
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	0605      	lsls	r5, r0, #24
 8007454:	f103 0104 	add.w	r1, r3, #4
 8007458:	d52a      	bpl.n	80074b0 <_printf_i+0xa4>
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	da03      	bge.n	800746a <_printf_i+0x5e>
 8007462:	222d      	movs	r2, #45	; 0x2d
 8007464:	425b      	negs	r3, r3
 8007466:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800746a:	486f      	ldr	r0, [pc, #444]	; (8007628 <_printf_i+0x21c>)
 800746c:	220a      	movs	r2, #10
 800746e:	e039      	b.n	80074e4 <_printf_i+0xd8>
 8007470:	2973      	cmp	r1, #115	; 0x73
 8007472:	f000 809d 	beq.w	80075b0 <_printf_i+0x1a4>
 8007476:	d808      	bhi.n	800748a <_printf_i+0x7e>
 8007478:	296f      	cmp	r1, #111	; 0x6f
 800747a:	d020      	beq.n	80074be <_printf_i+0xb2>
 800747c:	2970      	cmp	r1, #112	; 0x70
 800747e:	d1dd      	bne.n	800743c <_printf_i+0x30>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	f043 0320 	orr.w	r3, r3, #32
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	e003      	b.n	8007492 <_printf_i+0x86>
 800748a:	2975      	cmp	r1, #117	; 0x75
 800748c:	d017      	beq.n	80074be <_printf_i+0xb2>
 800748e:	2978      	cmp	r1, #120	; 0x78
 8007490:	d1d4      	bne.n	800743c <_printf_i+0x30>
 8007492:	2378      	movs	r3, #120	; 0x78
 8007494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007498:	4864      	ldr	r0, [pc, #400]	; (800762c <_printf_i+0x220>)
 800749a:	e055      	b.n	8007548 <_printf_i+0x13c>
 800749c:	6813      	ldr	r3, [r2, #0]
 800749e:	1d19      	adds	r1, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6011      	str	r1, [r2, #0]
 80074a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074ac:	2301      	movs	r3, #1
 80074ae:	e08c      	b.n	80075ca <_printf_i+0x1be>
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6011      	str	r1, [r2, #0]
 80074b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074b8:	bf18      	it	ne
 80074ba:	b21b      	sxthne	r3, r3
 80074bc:	e7cf      	b.n	800745e <_printf_i+0x52>
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	1d18      	adds	r0, r3, #4
 80074c4:	6010      	str	r0, [r2, #0]
 80074c6:	0628      	lsls	r0, r5, #24
 80074c8:	d501      	bpl.n	80074ce <_printf_i+0xc2>
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	e002      	b.n	80074d4 <_printf_i+0xc8>
 80074ce:	0668      	lsls	r0, r5, #25
 80074d0:	d5fb      	bpl.n	80074ca <_printf_i+0xbe>
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	4854      	ldr	r0, [pc, #336]	; (8007628 <_printf_i+0x21c>)
 80074d6:	296f      	cmp	r1, #111	; 0x6f
 80074d8:	bf14      	ite	ne
 80074da:	220a      	movne	r2, #10
 80074dc:	2208      	moveq	r2, #8
 80074de:	2100      	movs	r1, #0
 80074e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074e4:	6865      	ldr	r5, [r4, #4]
 80074e6:	60a5      	str	r5, [r4, #8]
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	f2c0 8095 	blt.w	8007618 <_printf_i+0x20c>
 80074ee:	6821      	ldr	r1, [r4, #0]
 80074f0:	f021 0104 	bic.w	r1, r1, #4
 80074f4:	6021      	str	r1, [r4, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d13d      	bne.n	8007576 <_printf_i+0x16a>
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	f040 808e 	bne.w	800761c <_printf_i+0x210>
 8007500:	4665      	mov	r5, ip
 8007502:	2a08      	cmp	r2, #8
 8007504:	d10b      	bne.n	800751e <_printf_i+0x112>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	07db      	lsls	r3, r3, #31
 800750a:	d508      	bpl.n	800751e <_printf_i+0x112>
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	bfde      	ittt	le
 8007514:	2330      	movle	r3, #48	; 0x30
 8007516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800751a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800751e:	ebac 0305 	sub.w	r3, ip, r5
 8007522:	6123      	str	r3, [r4, #16]
 8007524:	f8cd 8000 	str.w	r8, [sp]
 8007528:	463b      	mov	r3, r7
 800752a:	aa03      	add	r2, sp, #12
 800752c:	4621      	mov	r1, r4
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff fef6 	bl	8007320 <_printf_common>
 8007534:	3001      	adds	r0, #1
 8007536:	d14d      	bne.n	80075d4 <_printf_i+0x1c8>
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	b005      	add	sp, #20
 800753e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007542:	4839      	ldr	r0, [pc, #228]	; (8007628 <_printf_i+0x21c>)
 8007544:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007548:	6813      	ldr	r3, [r2, #0]
 800754a:	6821      	ldr	r1, [r4, #0]
 800754c:	1d1d      	adds	r5, r3, #4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6015      	str	r5, [r2, #0]
 8007552:	060a      	lsls	r2, r1, #24
 8007554:	d50b      	bpl.n	800756e <_printf_i+0x162>
 8007556:	07ca      	lsls	r2, r1, #31
 8007558:	bf44      	itt	mi
 800755a:	f041 0120 	orrmi.w	r1, r1, #32
 800755e:	6021      	strmi	r1, [r4, #0]
 8007560:	b91b      	cbnz	r3, 800756a <_printf_i+0x15e>
 8007562:	6822      	ldr	r2, [r4, #0]
 8007564:	f022 0220 	bic.w	r2, r2, #32
 8007568:	6022      	str	r2, [r4, #0]
 800756a:	2210      	movs	r2, #16
 800756c:	e7b7      	b.n	80074de <_printf_i+0xd2>
 800756e:	064d      	lsls	r5, r1, #25
 8007570:	bf48      	it	mi
 8007572:	b29b      	uxthmi	r3, r3
 8007574:	e7ef      	b.n	8007556 <_printf_i+0x14a>
 8007576:	4665      	mov	r5, ip
 8007578:	fbb3 f1f2 	udiv	r1, r3, r2
 800757c:	fb02 3311 	mls	r3, r2, r1, r3
 8007580:	5cc3      	ldrb	r3, [r0, r3]
 8007582:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007586:	460b      	mov	r3, r1
 8007588:	2900      	cmp	r1, #0
 800758a:	d1f5      	bne.n	8007578 <_printf_i+0x16c>
 800758c:	e7b9      	b.n	8007502 <_printf_i+0xf6>
 800758e:	6813      	ldr	r3, [r2, #0]
 8007590:	6825      	ldr	r5, [r4, #0]
 8007592:	6961      	ldr	r1, [r4, #20]
 8007594:	1d18      	adds	r0, r3, #4
 8007596:	6010      	str	r0, [r2, #0]
 8007598:	0628      	lsls	r0, r5, #24
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	d501      	bpl.n	80075a2 <_printf_i+0x196>
 800759e:	6019      	str	r1, [r3, #0]
 80075a0:	e002      	b.n	80075a8 <_printf_i+0x19c>
 80075a2:	066a      	lsls	r2, r5, #25
 80075a4:	d5fb      	bpl.n	800759e <_printf_i+0x192>
 80075a6:	8019      	strh	r1, [r3, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	4665      	mov	r5, ip
 80075ae:	e7b9      	b.n	8007524 <_printf_i+0x118>
 80075b0:	6813      	ldr	r3, [r2, #0]
 80075b2:	1d19      	adds	r1, r3, #4
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	681d      	ldr	r5, [r3, #0]
 80075b8:	6862      	ldr	r2, [r4, #4]
 80075ba:	2100      	movs	r1, #0
 80075bc:	4628      	mov	r0, r5
 80075be:	f7f8 fe0f 	bl	80001e0 <memchr>
 80075c2:	b108      	cbz	r0, 80075c8 <_printf_i+0x1bc>
 80075c4:	1b40      	subs	r0, r0, r5
 80075c6:	6060      	str	r0, [r4, #4]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2300      	movs	r3, #0
 80075ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d2:	e7a7      	b.n	8007524 <_printf_i+0x118>
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	462a      	mov	r2, r5
 80075d8:	4639      	mov	r1, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	47c0      	blx	r8
 80075de:	3001      	adds	r0, #1
 80075e0:	d0aa      	beq.n	8007538 <_printf_i+0x12c>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	079b      	lsls	r3, r3, #30
 80075e6:	d413      	bmi.n	8007610 <_printf_i+0x204>
 80075e8:	68e0      	ldr	r0, [r4, #12]
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bfb8      	it	lt
 80075f0:	4618      	movlt	r0, r3
 80075f2:	e7a3      	b.n	800753c <_printf_i+0x130>
 80075f4:	2301      	movs	r3, #1
 80075f6:	464a      	mov	r2, r9
 80075f8:	4639      	mov	r1, r7
 80075fa:	4630      	mov	r0, r6
 80075fc:	47c0      	blx	r8
 80075fe:	3001      	adds	r0, #1
 8007600:	d09a      	beq.n	8007538 <_printf_i+0x12c>
 8007602:	3501      	adds	r5, #1
 8007604:	68e3      	ldr	r3, [r4, #12]
 8007606:	9a03      	ldr	r2, [sp, #12]
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	42ab      	cmp	r3, r5
 800760c:	dcf2      	bgt.n	80075f4 <_printf_i+0x1e8>
 800760e:	e7eb      	b.n	80075e8 <_printf_i+0x1dc>
 8007610:	2500      	movs	r5, #0
 8007612:	f104 0919 	add.w	r9, r4, #25
 8007616:	e7f5      	b.n	8007604 <_printf_i+0x1f8>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ac      	bne.n	8007576 <_printf_i+0x16a>
 800761c:	7803      	ldrb	r3, [r0, #0]
 800761e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007626:	e76c      	b.n	8007502 <_printf_i+0xf6>
 8007628:	08009002 	.word	0x08009002
 800762c:	08009013 	.word	0x08009013

08007630 <siprintf>:
 8007630:	b40e      	push	{r1, r2, r3}
 8007632:	b500      	push	{lr}
 8007634:	b09c      	sub	sp, #112	; 0x70
 8007636:	ab1d      	add	r3, sp, #116	; 0x74
 8007638:	9002      	str	r0, [sp, #8]
 800763a:	9006      	str	r0, [sp, #24]
 800763c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007640:	4809      	ldr	r0, [pc, #36]	; (8007668 <siprintf+0x38>)
 8007642:	9107      	str	r1, [sp, #28]
 8007644:	9104      	str	r1, [sp, #16]
 8007646:	4909      	ldr	r1, [pc, #36]	; (800766c <siprintf+0x3c>)
 8007648:	f853 2b04 	ldr.w	r2, [r3], #4
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	a902      	add	r1, sp, #8
 8007654:	f001 fa5c 	bl	8008b10 <_svfiprintf_r>
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	b01c      	add	sp, #112	; 0x70
 8007660:	f85d eb04 	ldr.w	lr, [sp], #4
 8007664:	b003      	add	sp, #12
 8007666:	4770      	bx	lr
 8007668:	2000000c 	.word	0x2000000c
 800766c:	ffff0208 	.word	0xffff0208

08007670 <quorem>:
 8007670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	6903      	ldr	r3, [r0, #16]
 8007676:	690c      	ldr	r4, [r1, #16]
 8007678:	42a3      	cmp	r3, r4
 800767a:	4680      	mov	r8, r0
 800767c:	f2c0 8082 	blt.w	8007784 <quorem+0x114>
 8007680:	3c01      	subs	r4, #1
 8007682:	f101 0714 	add.w	r7, r1, #20
 8007686:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800768a:	f100 0614 	add.w	r6, r0, #20
 800768e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007692:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007696:	eb06 030c 	add.w	r3, r6, ip
 800769a:	3501      	adds	r5, #1
 800769c:	eb07 090c 	add.w	r9, r7, ip
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80076a6:	b395      	cbz	r5, 800770e <quorem+0x9e>
 80076a8:	f04f 0a00 	mov.w	sl, #0
 80076ac:	4638      	mov	r0, r7
 80076ae:	46b6      	mov	lr, r6
 80076b0:	46d3      	mov	fp, sl
 80076b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80076b6:	b293      	uxth	r3, r2
 80076b8:	fb05 a303 	mla	r3, r5, r3, sl
 80076bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ebab 0303 	sub.w	r3, fp, r3
 80076c6:	0c12      	lsrs	r2, r2, #16
 80076c8:	f8de b000 	ldr.w	fp, [lr]
 80076cc:	fb05 a202 	mla	r2, r5, r2, sl
 80076d0:	fa13 f38b 	uxtah	r3, r3, fp
 80076d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80076d8:	fa1f fb82 	uxth.w	fp, r2
 80076dc:	f8de 2000 	ldr.w	r2, [lr]
 80076e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80076e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ee:	4581      	cmp	r9, r0
 80076f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80076f4:	f84e 3b04 	str.w	r3, [lr], #4
 80076f8:	d2db      	bcs.n	80076b2 <quorem+0x42>
 80076fa:	f856 300c 	ldr.w	r3, [r6, ip]
 80076fe:	b933      	cbnz	r3, 800770e <quorem+0x9e>
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	3b04      	subs	r3, #4
 8007704:	429e      	cmp	r6, r3
 8007706:	461a      	mov	r2, r3
 8007708:	d330      	bcc.n	800776c <quorem+0xfc>
 800770a:	f8c8 4010 	str.w	r4, [r8, #16]
 800770e:	4640      	mov	r0, r8
 8007710:	f001 f828 	bl	8008764 <__mcmp>
 8007714:	2800      	cmp	r0, #0
 8007716:	db25      	blt.n	8007764 <quorem+0xf4>
 8007718:	3501      	adds	r5, #1
 800771a:	4630      	mov	r0, r6
 800771c:	f04f 0c00 	mov.w	ip, #0
 8007720:	f857 2b04 	ldr.w	r2, [r7], #4
 8007724:	f8d0 e000 	ldr.w	lr, [r0]
 8007728:	b293      	uxth	r3, r2
 800772a:	ebac 0303 	sub.w	r3, ip, r3
 800772e:	0c12      	lsrs	r2, r2, #16
 8007730:	fa13 f38e 	uxtah	r3, r3, lr
 8007734:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800773c:	b29b      	uxth	r3, r3
 800773e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007742:	45b9      	cmp	r9, r7
 8007744:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007748:	f840 3b04 	str.w	r3, [r0], #4
 800774c:	d2e8      	bcs.n	8007720 <quorem+0xb0>
 800774e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007752:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007756:	b92a      	cbnz	r2, 8007764 <quorem+0xf4>
 8007758:	3b04      	subs	r3, #4
 800775a:	429e      	cmp	r6, r3
 800775c:	461a      	mov	r2, r3
 800775e:	d30b      	bcc.n	8007778 <quorem+0x108>
 8007760:	f8c8 4010 	str.w	r4, [r8, #16]
 8007764:	4628      	mov	r0, r5
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	3b04      	subs	r3, #4
 8007770:	2a00      	cmp	r2, #0
 8007772:	d1ca      	bne.n	800770a <quorem+0x9a>
 8007774:	3c01      	subs	r4, #1
 8007776:	e7c5      	b.n	8007704 <quorem+0x94>
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	3b04      	subs	r3, #4
 800777c:	2a00      	cmp	r2, #0
 800777e:	d1ef      	bne.n	8007760 <quorem+0xf0>
 8007780:	3c01      	subs	r4, #1
 8007782:	e7ea      	b.n	800775a <quorem+0xea>
 8007784:	2000      	movs	r0, #0
 8007786:	e7ee      	b.n	8007766 <quorem+0xf6>

08007788 <_dtoa_r>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ec57 6b10 	vmov	r6, r7, d0
 8007790:	b097      	sub	sp, #92	; 0x5c
 8007792:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007794:	9106      	str	r1, [sp, #24]
 8007796:	4604      	mov	r4, r0
 8007798:	920b      	str	r2, [sp, #44]	; 0x2c
 800779a:	9312      	str	r3, [sp, #72]	; 0x48
 800779c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077a0:	e9cd 6700 	strd	r6, r7, [sp]
 80077a4:	b93d      	cbnz	r5, 80077b6 <_dtoa_r+0x2e>
 80077a6:	2010      	movs	r0, #16
 80077a8:	f000 fdb4 	bl	8008314 <malloc>
 80077ac:	6260      	str	r0, [r4, #36]	; 0x24
 80077ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077b2:	6005      	str	r5, [r0, #0]
 80077b4:	60c5      	str	r5, [r0, #12]
 80077b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	b151      	cbz	r1, 80077d2 <_dtoa_r+0x4a>
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	604a      	str	r2, [r1, #4]
 80077c0:	2301      	movs	r3, #1
 80077c2:	4093      	lsls	r3, r2
 80077c4:	608b      	str	r3, [r1, #8]
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fdeb 	bl	80083a2 <_Bfree>
 80077cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	1e3b      	subs	r3, r7, #0
 80077d4:	bfbb      	ittet	lt
 80077d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077da:	9301      	strlt	r3, [sp, #4]
 80077dc:	2300      	movge	r3, #0
 80077de:	2201      	movlt	r2, #1
 80077e0:	bfac      	ite	ge
 80077e2:	f8c8 3000 	strge.w	r3, [r8]
 80077e6:	f8c8 2000 	strlt.w	r2, [r8]
 80077ea:	4baf      	ldr	r3, [pc, #700]	; (8007aa8 <_dtoa_r+0x320>)
 80077ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077f0:	ea33 0308 	bics.w	r3, r3, r8
 80077f4:	d114      	bne.n	8007820 <_dtoa_r+0x98>
 80077f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	9b00      	ldr	r3, [sp, #0]
 8007800:	b923      	cbnz	r3, 800780c <_dtoa_r+0x84>
 8007802:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007806:	2800      	cmp	r0, #0
 8007808:	f000 8542 	beq.w	8008290 <_dtoa_r+0xb08>
 800780c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800780e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007abc <_dtoa_r+0x334>
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8544 	beq.w	80082a0 <_dtoa_r+0xb18>
 8007818:	f10b 0303 	add.w	r3, fp, #3
 800781c:	f000 bd3e 	b.w	800829c <_dtoa_r+0xb14>
 8007820:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007824:	2200      	movs	r2, #0
 8007826:	2300      	movs	r3, #0
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f9 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007830:	4681      	mov	r9, r0
 8007832:	b168      	cbz	r0, 8007850 <_dtoa_r+0xc8>
 8007834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007836:	2301      	movs	r3, #1
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8524 	beq.w	800828a <_dtoa_r+0xb02>
 8007842:	4b9a      	ldr	r3, [pc, #616]	; (8007aac <_dtoa_r+0x324>)
 8007844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007846:	f103 3bff 	add.w	fp, r3, #4294967295
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	f000 bd28 	b.w	80082a0 <_dtoa_r+0xb18>
 8007850:	aa14      	add	r2, sp, #80	; 0x50
 8007852:	a915      	add	r1, sp, #84	; 0x54
 8007854:	ec47 6b10 	vmov	d0, r6, r7
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fffa 	bl	8008852 <__d2b>
 800785e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007862:	9004      	str	r0, [sp, #16]
 8007864:	2d00      	cmp	r5, #0
 8007866:	d07c      	beq.n	8007962 <_dtoa_r+0x1da>
 8007868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800786c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007870:	46b2      	mov	sl, r6
 8007872:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800787a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800787e:	2200      	movs	r2, #0
 8007880:	4b8b      	ldr	r3, [pc, #556]	; (8007ab0 <_dtoa_r+0x328>)
 8007882:	4650      	mov	r0, sl
 8007884:	4659      	mov	r1, fp
 8007886:	f7f8 fcff 	bl	8000288 <__aeabi_dsub>
 800788a:	a381      	add	r3, pc, #516	; (adr r3, 8007a90 <_dtoa_r+0x308>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 feb2 	bl	80005f8 <__aeabi_dmul>
 8007894:	a380      	add	r3, pc, #512	; (adr r3, 8007a98 <_dtoa_r+0x310>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f7f8 fcf7 	bl	800028c <__adddf3>
 800789e:	4606      	mov	r6, r0
 80078a0:	4628      	mov	r0, r5
 80078a2:	460f      	mov	r7, r1
 80078a4:	f7f8 fe3e 	bl	8000524 <__aeabi_i2d>
 80078a8:	a37d      	add	r3, pc, #500	; (adr r3, 8007aa0 <_dtoa_r+0x318>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f8 fce7 	bl	800028c <__adddf3>
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	f7f9 f949 	bl	8000b58 <__aeabi_d2iz>
 80078c6:	2200      	movs	r2, #0
 80078c8:	4682      	mov	sl, r0
 80078ca:	2300      	movs	r3, #0
 80078cc:	4630      	mov	r0, r6
 80078ce:	4639      	mov	r1, r7
 80078d0:	f7f9 f904 	bl	8000adc <__aeabi_dcmplt>
 80078d4:	b148      	cbz	r0, 80078ea <_dtoa_r+0x162>
 80078d6:	4650      	mov	r0, sl
 80078d8:	f7f8 fe24 	bl	8000524 <__aeabi_i2d>
 80078dc:	4632      	mov	r2, r6
 80078de:	463b      	mov	r3, r7
 80078e0:	f7f9 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80078e4:	b908      	cbnz	r0, 80078ea <_dtoa_r+0x162>
 80078e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ea:	f1ba 0f16 	cmp.w	sl, #22
 80078ee:	d859      	bhi.n	80079a4 <_dtoa_r+0x21c>
 80078f0:	4970      	ldr	r1, [pc, #448]	; (8007ab4 <_dtoa_r+0x32c>)
 80078f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80078f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fe:	f7f9 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8007902:	2800      	cmp	r0, #0
 8007904:	d050      	beq.n	80079a8 <_dtoa_r+0x220>
 8007906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800790a:	2300      	movs	r3, #0
 800790c:	930f      	str	r3, [sp, #60]	; 0x3c
 800790e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007910:	1b5d      	subs	r5, r3, r5
 8007912:	f1b5 0801 	subs.w	r8, r5, #1
 8007916:	bf49      	itett	mi
 8007918:	f1c5 0301 	rsbmi	r3, r5, #1
 800791c:	2300      	movpl	r3, #0
 800791e:	9305      	strmi	r3, [sp, #20]
 8007920:	f04f 0800 	movmi.w	r8, #0
 8007924:	bf58      	it	pl
 8007926:	9305      	strpl	r3, [sp, #20]
 8007928:	f1ba 0f00 	cmp.w	sl, #0
 800792c:	db3e      	blt.n	80079ac <_dtoa_r+0x224>
 800792e:	2300      	movs	r3, #0
 8007930:	44d0      	add	r8, sl
 8007932:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007936:	9307      	str	r3, [sp, #28]
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	2b09      	cmp	r3, #9
 800793c:	f200 8090 	bhi.w	8007a60 <_dtoa_r+0x2d8>
 8007940:	2b05      	cmp	r3, #5
 8007942:	bfc4      	itt	gt
 8007944:	3b04      	subgt	r3, #4
 8007946:	9306      	strgt	r3, [sp, #24]
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	f1a3 0302 	sub.w	r3, r3, #2
 800794e:	bfcc      	ite	gt
 8007950:	2500      	movgt	r5, #0
 8007952:	2501      	movle	r5, #1
 8007954:	2b03      	cmp	r3, #3
 8007956:	f200 808f 	bhi.w	8007a78 <_dtoa_r+0x2f0>
 800795a:	e8df f003 	tbb	[pc, r3]
 800795e:	7f7d      	.short	0x7f7d
 8007960:	7131      	.short	0x7131
 8007962:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007966:	441d      	add	r5, r3
 8007968:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800796c:	2820      	cmp	r0, #32
 800796e:	dd13      	ble.n	8007998 <_dtoa_r+0x210>
 8007970:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	fa08 f800 	lsl.w	r8, r8, r0
 800797a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800797e:	fa23 f000 	lsr.w	r0, r3, r0
 8007982:	ea48 0000 	orr.w	r0, r8, r0
 8007986:	f7f8 fdbd 	bl	8000504 <__aeabi_ui2d>
 800798a:	2301      	movs	r3, #1
 800798c:	4682      	mov	sl, r0
 800798e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007992:	3d01      	subs	r5, #1
 8007994:	9313      	str	r3, [sp, #76]	; 0x4c
 8007996:	e772      	b.n	800787e <_dtoa_r+0xf6>
 8007998:	9b00      	ldr	r3, [sp, #0]
 800799a:	f1c0 0020 	rsb	r0, r0, #32
 800799e:	fa03 f000 	lsl.w	r0, r3, r0
 80079a2:	e7f0      	b.n	8007986 <_dtoa_r+0x1fe>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7b1      	b.n	800790c <_dtoa_r+0x184>
 80079a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80079aa:	e7b0      	b.n	800790e <_dtoa_r+0x186>
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	eba3 030a 	sub.w	r3, r3, sl
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	f1ca 0300 	rsb	r3, sl, #0
 80079b8:	9307      	str	r3, [sp, #28]
 80079ba:	2300      	movs	r3, #0
 80079bc:	930e      	str	r3, [sp, #56]	; 0x38
 80079be:	e7bb      	b.n	8007938 <_dtoa_r+0x1b0>
 80079c0:	2301      	movs	r3, #1
 80079c2:	930a      	str	r3, [sp, #40]	; 0x28
 80079c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	dd59      	ble.n	8007a7e <_dtoa_r+0x2f6>
 80079ca:	9302      	str	r3, [sp, #8]
 80079cc:	4699      	mov	r9, r3
 80079ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079d0:	2200      	movs	r2, #0
 80079d2:	6072      	str	r2, [r6, #4]
 80079d4:	2204      	movs	r2, #4
 80079d6:	f102 0014 	add.w	r0, r2, #20
 80079da:	4298      	cmp	r0, r3
 80079dc:	6871      	ldr	r1, [r6, #4]
 80079de:	d953      	bls.n	8007a88 <_dtoa_r+0x300>
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fcaa 	bl	800833a <_Balloc>
 80079e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e8:	6030      	str	r0, [r6, #0]
 80079ea:	f1b9 0f0e 	cmp.w	r9, #14
 80079ee:	f8d3 b000 	ldr.w	fp, [r3]
 80079f2:	f200 80e6 	bhi.w	8007bc2 <_dtoa_r+0x43a>
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	f000 80e3 	beq.w	8007bc2 <_dtoa_r+0x43a>
 80079fc:	ed9d 7b00 	vldr	d7, [sp]
 8007a00:	f1ba 0f00 	cmp.w	sl, #0
 8007a04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007a08:	dd74      	ble.n	8007af4 <_dtoa_r+0x36c>
 8007a0a:	4a2a      	ldr	r2, [pc, #168]	; (8007ab4 <_dtoa_r+0x32c>)
 8007a0c:	f00a 030f 	and.w	r3, sl, #15
 8007a10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a14:	ed93 7b00 	vldr	d7, [r3]
 8007a18:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a1c:	06f0      	lsls	r0, r6, #27
 8007a1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007a22:	d565      	bpl.n	8007af0 <_dtoa_r+0x368>
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <_dtoa_r+0x330>)
 8007a26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a2e:	f7f8 ff0d 	bl	800084c <__aeabi_ddiv>
 8007a32:	e9cd 0100 	strd	r0, r1, [sp]
 8007a36:	f006 060f 	and.w	r6, r6, #15
 8007a3a:	2503      	movs	r5, #3
 8007a3c:	4f1e      	ldr	r7, [pc, #120]	; (8007ab8 <_dtoa_r+0x330>)
 8007a3e:	e04c      	b.n	8007ada <_dtoa_r+0x352>
 8007a40:	2301      	movs	r3, #1
 8007a42:	930a      	str	r3, [sp, #40]	; 0x28
 8007a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a46:	4453      	add	r3, sl
 8007a48:	f103 0901 	add.w	r9, r3, #1
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	464b      	mov	r3, r9
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	bfb8      	it	lt
 8007a54:	2301      	movlt	r3, #1
 8007a56:	e7ba      	b.n	80079ce <_dtoa_r+0x246>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e7b2      	b.n	80079c2 <_dtoa_r+0x23a>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e7f0      	b.n	8007a42 <_dtoa_r+0x2ba>
 8007a60:	2501      	movs	r5, #1
 8007a62:	2300      	movs	r3, #0
 8007a64:	9306      	str	r3, [sp, #24]
 8007a66:	950a      	str	r5, [sp, #40]	; 0x28
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	4699      	mov	r9, r3
 8007a70:	2200      	movs	r2, #0
 8007a72:	2312      	movs	r3, #18
 8007a74:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a76:	e7aa      	b.n	80079ce <_dtoa_r+0x246>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a7c:	e7f4      	b.n	8007a68 <_dtoa_r+0x2e0>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	9302      	str	r3, [sp, #8]
 8007a82:	4699      	mov	r9, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	e7f5      	b.n	8007a74 <_dtoa_r+0x2ec>
 8007a88:	3101      	adds	r1, #1
 8007a8a:	6071      	str	r1, [r6, #4]
 8007a8c:	0052      	lsls	r2, r2, #1
 8007a8e:	e7a2      	b.n	80079d6 <_dtoa_r+0x24e>
 8007a90:	636f4361 	.word	0x636f4361
 8007a94:	3fd287a7 	.word	0x3fd287a7
 8007a98:	8b60c8b3 	.word	0x8b60c8b3
 8007a9c:	3fc68a28 	.word	0x3fc68a28
 8007aa0:	509f79fb 	.word	0x509f79fb
 8007aa4:	3fd34413 	.word	0x3fd34413
 8007aa8:	7ff00000 	.word	0x7ff00000
 8007aac:	08009001 	.word	0x08009001
 8007ab0:	3ff80000 	.word	0x3ff80000
 8007ab4:	08009060 	.word	0x08009060
 8007ab8:	08009038 	.word	0x08009038
 8007abc:	0800902d 	.word	0x0800902d
 8007ac0:	07f1      	lsls	r1, r6, #31
 8007ac2:	d508      	bpl.n	8007ad6 <_dtoa_r+0x34e>
 8007ac4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	1076      	asrs	r6, r6, #1
 8007ad8:	3708      	adds	r7, #8
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	d1f0      	bne.n	8007ac0 <_dtoa_r+0x338>
 8007ade:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ae6:	f7f8 feb1 	bl	800084c <__aeabi_ddiv>
 8007aea:	e9cd 0100 	strd	r0, r1, [sp]
 8007aee:	e01a      	b.n	8007b26 <_dtoa_r+0x39e>
 8007af0:	2502      	movs	r5, #2
 8007af2:	e7a3      	b.n	8007a3c <_dtoa_r+0x2b4>
 8007af4:	f000 80a0 	beq.w	8007c38 <_dtoa_r+0x4b0>
 8007af8:	f1ca 0600 	rsb	r6, sl, #0
 8007afc:	4b9f      	ldr	r3, [pc, #636]	; (8007d7c <_dtoa_r+0x5f4>)
 8007afe:	4fa0      	ldr	r7, [pc, #640]	; (8007d80 <_dtoa_r+0x5f8>)
 8007b00:	f006 020f 	and.w	r2, r6, #15
 8007b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b10:	f7f8 fd72 	bl	80005f8 <__aeabi_dmul>
 8007b14:	e9cd 0100 	strd	r0, r1, [sp]
 8007b18:	1136      	asrs	r6, r6, #4
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2502      	movs	r5, #2
 8007b1e:	2e00      	cmp	r6, #0
 8007b20:	d17f      	bne.n	8007c22 <_dtoa_r+0x49a>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e1      	bne.n	8007aea <_dtoa_r+0x362>
 8007b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8087 	beq.w	8007c3c <_dtoa_r+0x4b4>
 8007b2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b32:	2200      	movs	r2, #0
 8007b34:	4b93      	ldr	r3, [pc, #588]	; (8007d84 <_dtoa_r+0x5fc>)
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 ffcf 	bl	8000adc <__aeabi_dcmplt>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d07c      	beq.n	8007c3c <_dtoa_r+0x4b4>
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	d079      	beq.n	8007c3c <_dtoa_r+0x4b4>
 8007b48:	9b02      	ldr	r3, [sp, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd35      	ble.n	8007bba <_dtoa_r+0x432>
 8007b4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b52:	9308      	str	r3, [sp, #32]
 8007b54:	4639      	mov	r1, r7
 8007b56:	2200      	movs	r2, #0
 8007b58:	4b8b      	ldr	r3, [pc, #556]	; (8007d88 <_dtoa_r+0x600>)
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7f8 fd4c 	bl	80005f8 <__aeabi_dmul>
 8007b60:	e9cd 0100 	strd	r0, r1, [sp]
 8007b64:	9f02      	ldr	r7, [sp, #8]
 8007b66:	3501      	adds	r5, #1
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7f8 fcdb 	bl	8000524 <__aeabi_i2d>
 8007b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b72:	f7f8 fd41 	bl	80005f8 <__aeabi_dmul>
 8007b76:	2200      	movs	r2, #0
 8007b78:	4b84      	ldr	r3, [pc, #528]	; (8007d8c <_dtoa_r+0x604>)
 8007b7a:	f7f8 fb87 	bl	800028c <__adddf3>
 8007b7e:	4605      	mov	r5, r0
 8007b80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	d15d      	bne.n	8007c44 <_dtoa_r+0x4bc>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4b81      	ldr	r3, [pc, #516]	; (8007d90 <_dtoa_r+0x608>)
 8007b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b90:	f7f8 fb7a 	bl	8000288 <__aeabi_dsub>
 8007b94:	462a      	mov	r2, r5
 8007b96:	4633      	mov	r3, r6
 8007b98:	e9cd 0100 	strd	r0, r1, [sp]
 8007b9c:	f7f8 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	f040 8288 	bne.w	80080b6 <_dtoa_r+0x92e>
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb0:	f7f8 ff94 	bl	8000adc <__aeabi_dcmplt>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 827c 	bne.w	80080b2 <_dtoa_r+0x92a>
 8007bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8007bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f2c0 8150 	blt.w	8007e6a <_dtoa_r+0x6e2>
 8007bca:	f1ba 0f0e 	cmp.w	sl, #14
 8007bce:	f300 814c 	bgt.w	8007e6a <_dtoa_r+0x6e2>
 8007bd2:	4b6a      	ldr	r3, [pc, #424]	; (8007d7c <_dtoa_r+0x5f4>)
 8007bd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bd8:	ed93 7b00 	vldr	d7, [r3]
 8007bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007be4:	f280 80d8 	bge.w	8007d98 <_dtoa_r+0x610>
 8007be8:	f1b9 0f00 	cmp.w	r9, #0
 8007bec:	f300 80d4 	bgt.w	8007d98 <_dtoa_r+0x610>
 8007bf0:	f040 825e 	bne.w	80080b0 <_dtoa_r+0x928>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4b66      	ldr	r3, [pc, #408]	; (8007d90 <_dtoa_r+0x608>)
 8007bf8:	ec51 0b17 	vmov	r0, r1, d7
 8007bfc:	f7f8 fcfc 	bl	80005f8 <__aeabi_dmul>
 8007c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c04:	f7f8 ff7e 	bl	8000b04 <__aeabi_dcmpge>
 8007c08:	464f      	mov	r7, r9
 8007c0a:	464e      	mov	r6, r9
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 8234 	bne.w	800807a <_dtoa_r+0x8f2>
 8007c12:	2331      	movs	r3, #49	; 0x31
 8007c14:	f10b 0501 	add.w	r5, fp, #1
 8007c18:	f88b 3000 	strb.w	r3, [fp]
 8007c1c:	f10a 0a01 	add.w	sl, sl, #1
 8007c20:	e22f      	b.n	8008082 <_dtoa_r+0x8fa>
 8007c22:	07f2      	lsls	r2, r6, #31
 8007c24:	d505      	bpl.n	8007c32 <_dtoa_r+0x4aa>
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	f7f8 fce5 	bl	80005f8 <__aeabi_dmul>
 8007c2e:	3501      	adds	r5, #1
 8007c30:	2301      	movs	r3, #1
 8007c32:	1076      	asrs	r6, r6, #1
 8007c34:	3708      	adds	r7, #8
 8007c36:	e772      	b.n	8007b1e <_dtoa_r+0x396>
 8007c38:	2502      	movs	r5, #2
 8007c3a:	e774      	b.n	8007b26 <_dtoa_r+0x39e>
 8007c3c:	f8cd a020 	str.w	sl, [sp, #32]
 8007c40:	464f      	mov	r7, r9
 8007c42:	e791      	b.n	8007b68 <_dtoa_r+0x3e0>
 8007c44:	4b4d      	ldr	r3, [pc, #308]	; (8007d7c <_dtoa_r+0x5f4>)
 8007c46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d047      	beq.n	8007ce4 <_dtoa_r+0x55c>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	2000      	movs	r0, #0
 8007c5a:	494e      	ldr	r1, [pc, #312]	; (8007d94 <_dtoa_r+0x60c>)
 8007c5c:	f7f8 fdf6 	bl	800084c <__aeabi_ddiv>
 8007c60:	462a      	mov	r2, r5
 8007c62:	4633      	mov	r3, r6
 8007c64:	f7f8 fb10 	bl	8000288 <__aeabi_dsub>
 8007c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c6c:	465d      	mov	r5, fp
 8007c6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c72:	f7f8 ff71 	bl	8000b58 <__aeabi_d2iz>
 8007c76:	4606      	mov	r6, r0
 8007c78:	f7f8 fc54 	bl	8000524 <__aeabi_i2d>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	3630      	adds	r6, #48	; 0x30
 8007c8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c92:	e9cd 0100 	strd	r0, r1, [sp]
 8007c96:	f7f8 ff21 	bl	8000adc <__aeabi_dcmplt>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d163      	bne.n	8007d66 <_dtoa_r+0x5de>
 8007c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	4937      	ldr	r1, [pc, #220]	; (8007d84 <_dtoa_r+0x5fc>)
 8007ca6:	f7f8 faef 	bl	8000288 <__aeabi_dsub>
 8007caa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cae:	f7f8 ff15 	bl	8000adc <__aeabi_dcmplt>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f040 80b7 	bne.w	8007e26 <_dtoa_r+0x69e>
 8007cb8:	eba5 030b 	sub.w	r3, r5, fp
 8007cbc:	429f      	cmp	r7, r3
 8007cbe:	f77f af7c 	ble.w	8007bba <_dtoa_r+0x432>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <_dtoa_r+0x600>)
 8007cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cca:	f7f8 fc95 	bl	80005f8 <__aeabi_dmul>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cd4:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <_dtoa_r+0x600>)
 8007cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cda:	f7f8 fc8d 	bl	80005f8 <__aeabi_dmul>
 8007cde:	e9cd 0100 	strd	r0, r1, [sp]
 8007ce2:	e7c4      	b.n	8007c6e <_dtoa_r+0x4e6>
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4633      	mov	r3, r6
 8007ce8:	f7f8 fc86 	bl	80005f8 <__aeabi_dmul>
 8007cec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cf0:	eb0b 0507 	add.w	r5, fp, r7
 8007cf4:	465e      	mov	r6, fp
 8007cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cfa:	f7f8 ff2d 	bl	8000b58 <__aeabi_d2iz>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	f7f8 fc10 	bl	8000524 <__aeabi_i2d>
 8007d04:	3730      	adds	r7, #48	; 0x30
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d0e:	f7f8 fabb 	bl	8000288 <__aeabi_dsub>
 8007d12:	f806 7b01 	strb.w	r7, [r6], #1
 8007d16:	42ae      	cmp	r6, r5
 8007d18:	e9cd 0100 	strd	r0, r1, [sp]
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	d126      	bne.n	8007d70 <_dtoa_r+0x5e8>
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <_dtoa_r+0x60c>)
 8007d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d28:	f7f8 fab0 	bl	800028c <__adddf3>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d34:	f7f8 fef0 	bl	8000b18 <__aeabi_dcmpgt>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d174      	bne.n	8007e26 <_dtoa_r+0x69e>
 8007d3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d40:	2000      	movs	r0, #0
 8007d42:	4914      	ldr	r1, [pc, #80]	; (8007d94 <_dtoa_r+0x60c>)
 8007d44:	f7f8 faa0 	bl	8000288 <__aeabi_dsub>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d50:	f7f8 fec4 	bl	8000adc <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f43f af30 	beq.w	8007bba <_dtoa_r+0x432>
 8007d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d5e:	2b30      	cmp	r3, #48	; 0x30
 8007d60:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d64:	d002      	beq.n	8007d6c <_dtoa_r+0x5e4>
 8007d66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d6a:	e04a      	b.n	8007e02 <_dtoa_r+0x67a>
 8007d6c:	4615      	mov	r5, r2
 8007d6e:	e7f4      	b.n	8007d5a <_dtoa_r+0x5d2>
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <_dtoa_r+0x600>)
 8007d72:	f7f8 fc41 	bl	80005f8 <__aeabi_dmul>
 8007d76:	e9cd 0100 	strd	r0, r1, [sp]
 8007d7a:	e7bc      	b.n	8007cf6 <_dtoa_r+0x56e>
 8007d7c:	08009060 	.word	0x08009060
 8007d80:	08009038 	.word	0x08009038
 8007d84:	3ff00000 	.word	0x3ff00000
 8007d88:	40240000 	.word	0x40240000
 8007d8c:	401c0000 	.word	0x401c0000
 8007d90:	40140000 	.word	0x40140000
 8007d94:	3fe00000 	.word	0x3fe00000
 8007d98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d9c:	465d      	mov	r5, fp
 8007d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fd51 	bl	800084c <__aeabi_ddiv>
 8007daa:	f7f8 fed5 	bl	8000b58 <__aeabi_d2iz>
 8007dae:	4680      	mov	r8, r0
 8007db0:	f7f8 fbb8 	bl	8000524 <__aeabi_i2d>
 8007db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007dc8:	f7f8 fa5e 	bl	8000288 <__aeabi_dsub>
 8007dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8007dd0:	eba5 060b 	sub.w	r6, r5, fp
 8007dd4:	45b1      	cmp	r9, r6
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	d139      	bne.n	8007e50 <_dtoa_r+0x6c8>
 8007ddc:	f7f8 fa56 	bl	800028c <__adddf3>
 8007de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	f7f8 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 8007dec:	b9c8      	cbnz	r0, 8007e22 <_dtoa_r+0x69a>
 8007dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df2:	4630      	mov	r0, r6
 8007df4:	4639      	mov	r1, r7
 8007df6:	f7f8 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfa:	b110      	cbz	r0, 8007e02 <_dtoa_r+0x67a>
 8007dfc:	f018 0f01 	tst.w	r8, #1
 8007e00:	d10f      	bne.n	8007e22 <_dtoa_r+0x69a>
 8007e02:	9904      	ldr	r1, [sp, #16]
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 facc 	bl	80083a2 <_Bfree>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e0e:	702b      	strb	r3, [r5, #0]
 8007e10:	f10a 0301 	add.w	r3, sl, #1
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8241 	beq.w	80082a0 <_dtoa_r+0xb18>
 8007e1e:	601d      	str	r5, [r3, #0]
 8007e20:	e23e      	b.n	80082a0 <_dtoa_r+0xb18>
 8007e22:	f8cd a020 	str.w	sl, [sp, #32]
 8007e26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e2a:	2a39      	cmp	r2, #57	; 0x39
 8007e2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007e30:	d108      	bne.n	8007e44 <_dtoa_r+0x6bc>
 8007e32:	459b      	cmp	fp, r3
 8007e34:	d10a      	bne.n	8007e4c <_dtoa_r+0x6c4>
 8007e36:	9b08      	ldr	r3, [sp, #32]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	2330      	movs	r3, #48	; 0x30
 8007e3e:	f88b 3000 	strb.w	r3, [fp]
 8007e42:	465b      	mov	r3, fp
 8007e44:	781a      	ldrb	r2, [r3, #0]
 8007e46:	3201      	adds	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
 8007e4a:	e78c      	b.n	8007d66 <_dtoa_r+0x5de>
 8007e4c:	461d      	mov	r5, r3
 8007e4e:	e7ea      	b.n	8007e26 <_dtoa_r+0x69e>
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b9b      	ldr	r3, [pc, #620]	; (80080c0 <_dtoa_r+0x938>)
 8007e54:	f7f8 fbd0 	bl	80005f8 <__aeabi_dmul>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	460f      	mov	r7, r1
 8007e60:	f7f8 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d09a      	beq.n	8007d9e <_dtoa_r+0x616>
 8007e68:	e7cb      	b.n	8007e02 <_dtoa_r+0x67a>
 8007e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	f000 808b 	beq.w	8007f88 <_dtoa_r+0x800>
 8007e72:	9a06      	ldr	r2, [sp, #24]
 8007e74:	2a01      	cmp	r2, #1
 8007e76:	dc6e      	bgt.n	8007f56 <_dtoa_r+0x7ce>
 8007e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d067      	beq.n	8007f4e <_dtoa_r+0x7c6>
 8007e7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e82:	9f07      	ldr	r7, [sp, #28]
 8007e84:	9d05      	ldr	r5, [sp, #20]
 8007e86:	9a05      	ldr	r2, [sp, #20]
 8007e88:	2101      	movs	r1, #1
 8007e8a:	441a      	add	r2, r3
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	9205      	str	r2, [sp, #20]
 8007e90:	4498      	add	r8, r3
 8007e92:	f000 fb26 	bl	80084e2 <__i2b>
 8007e96:	4606      	mov	r6, r0
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	dd0c      	ble.n	8007eb6 <_dtoa_r+0x72e>
 8007e9c:	f1b8 0f00 	cmp.w	r8, #0
 8007ea0:	dd09      	ble.n	8007eb6 <_dtoa_r+0x72e>
 8007ea2:	4545      	cmp	r5, r8
 8007ea4:	9a05      	ldr	r2, [sp, #20]
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	bfa8      	it	ge
 8007eaa:	4643      	movge	r3, r8
 8007eac:	1ad2      	subs	r2, r2, r3
 8007eae:	9205      	str	r2, [sp, #20]
 8007eb0:	1aed      	subs	r5, r5, r3
 8007eb2:	eba8 0803 	sub.w	r8, r8, r3
 8007eb6:	9b07      	ldr	r3, [sp, #28]
 8007eb8:	b1eb      	cbz	r3, 8007ef6 <_dtoa_r+0x76e>
 8007eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d067      	beq.n	8007f90 <_dtoa_r+0x808>
 8007ec0:	b18f      	cbz	r7, 8007ee6 <_dtoa_r+0x75e>
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	463a      	mov	r2, r7
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 fbaa 	bl	8008620 <__pow5mult>
 8007ecc:	9a04      	ldr	r2, [sp, #16]
 8007ece:	4601      	mov	r1, r0
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 fb0e 	bl	80084f4 <__multiply>
 8007ed8:	9904      	ldr	r1, [sp, #16]
 8007eda:	9008      	str	r0, [sp, #32]
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 fa60 	bl	80083a2 <_Bfree>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	9b07      	ldr	r3, [sp, #28]
 8007ee8:	1bda      	subs	r2, r3, r7
 8007eea:	d004      	beq.n	8007ef6 <_dtoa_r+0x76e>
 8007eec:	9904      	ldr	r1, [sp, #16]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 fb96 	bl	8008620 <__pow5mult>
 8007ef4:	9004      	str	r0, [sp, #16]
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 faf2 	bl	80084e2 <__i2b>
 8007efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f00:	4607      	mov	r7, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 81d0 	beq.w	80082a8 <_dtoa_r+0xb20>
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 fb87 	bl	8008620 <__pow5mult>
 8007f12:	9b06      	ldr	r3, [sp, #24]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	4607      	mov	r7, r0
 8007f18:	dc40      	bgt.n	8007f9c <_dtoa_r+0x814>
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d139      	bne.n	8007f94 <_dtoa_r+0x80c>
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d136      	bne.n	8007f98 <_dtoa_r+0x810>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	0d1b      	lsrs	r3, r3, #20
 8007f32:	051b      	lsls	r3, r3, #20
 8007f34:	b12b      	cbz	r3, 8007f42 <_dtoa_r+0x7ba>
 8007f36:	9b05      	ldr	r3, [sp, #20]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	9305      	str	r3, [sp, #20]
 8007f3c:	f108 0801 	add.w	r8, r8, #1
 8007f40:	2301      	movs	r3, #1
 8007f42:	9307      	str	r3, [sp, #28]
 8007f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d12a      	bne.n	8007fa0 <_dtoa_r+0x818>
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	e030      	b.n	8007fb0 <_dtoa_r+0x828>
 8007f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f54:	e795      	b.n	8007e82 <_dtoa_r+0x6fa>
 8007f56:	9b07      	ldr	r3, [sp, #28]
 8007f58:	f109 37ff 	add.w	r7, r9, #4294967295
 8007f5c:	42bb      	cmp	r3, r7
 8007f5e:	bfbf      	itttt	lt
 8007f60:	9b07      	ldrlt	r3, [sp, #28]
 8007f62:	9707      	strlt	r7, [sp, #28]
 8007f64:	1afa      	sublt	r2, r7, r3
 8007f66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f68:	bfbb      	ittet	lt
 8007f6a:	189b      	addlt	r3, r3, r2
 8007f6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f6e:	1bdf      	subge	r7, r3, r7
 8007f70:	2700      	movlt	r7, #0
 8007f72:	f1b9 0f00 	cmp.w	r9, #0
 8007f76:	bfb5      	itete	lt
 8007f78:	9b05      	ldrlt	r3, [sp, #20]
 8007f7a:	9d05      	ldrge	r5, [sp, #20]
 8007f7c:	eba3 0509 	sublt.w	r5, r3, r9
 8007f80:	464b      	movge	r3, r9
 8007f82:	bfb8      	it	lt
 8007f84:	2300      	movlt	r3, #0
 8007f86:	e77e      	b.n	8007e86 <_dtoa_r+0x6fe>
 8007f88:	9f07      	ldr	r7, [sp, #28]
 8007f8a:	9d05      	ldr	r5, [sp, #20]
 8007f8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f8e:	e783      	b.n	8007e98 <_dtoa_r+0x710>
 8007f90:	9a07      	ldr	r2, [sp, #28]
 8007f92:	e7ab      	b.n	8007eec <_dtoa_r+0x764>
 8007f94:	2300      	movs	r3, #0
 8007f96:	e7d4      	b.n	8007f42 <_dtoa_r+0x7ba>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	e7d2      	b.n	8007f42 <_dtoa_r+0x7ba>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007fa6:	6918      	ldr	r0, [r3, #16]
 8007fa8:	f000 fa4d 	bl	8008446 <__hi0bits>
 8007fac:	f1c0 0020 	rsb	r0, r0, #32
 8007fb0:	4440      	add	r0, r8
 8007fb2:	f010 001f 	ands.w	r0, r0, #31
 8007fb6:	d047      	beq.n	8008048 <_dtoa_r+0x8c0>
 8007fb8:	f1c0 0320 	rsb	r3, r0, #32
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	dd3b      	ble.n	8008038 <_dtoa_r+0x8b0>
 8007fc0:	9b05      	ldr	r3, [sp, #20]
 8007fc2:	f1c0 001c 	rsb	r0, r0, #28
 8007fc6:	4403      	add	r3, r0
 8007fc8:	9305      	str	r3, [sp, #20]
 8007fca:	4405      	add	r5, r0
 8007fcc:	4480      	add	r8, r0
 8007fce:	9b05      	ldr	r3, [sp, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dd05      	ble.n	8007fe0 <_dtoa_r+0x858>
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	9904      	ldr	r1, [sp, #16]
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fb6f 	bl	80086bc <__lshift>
 8007fde:	9004      	str	r0, [sp, #16]
 8007fe0:	f1b8 0f00 	cmp.w	r8, #0
 8007fe4:	dd05      	ble.n	8007ff2 <_dtoa_r+0x86a>
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4642      	mov	r2, r8
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fb66 	bl	80086bc <__lshift>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ff4:	b353      	cbz	r3, 800804c <_dtoa_r+0x8c4>
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	9804      	ldr	r0, [sp, #16]
 8007ffa:	f000 fbb3 	bl	8008764 <__mcmp>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	da24      	bge.n	800804c <_dtoa_r+0x8c4>
 8008002:	2300      	movs	r3, #0
 8008004:	220a      	movs	r2, #10
 8008006:	9904      	ldr	r1, [sp, #16]
 8008008:	4620      	mov	r0, r4
 800800a:	f000 f9e1 	bl	80083d0 <__multadd>
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	9004      	str	r0, [sp, #16]
 8008012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 814d 	beq.w	80082b6 <_dtoa_r+0xb2e>
 800801c:	2300      	movs	r3, #0
 800801e:	4631      	mov	r1, r6
 8008020:	220a      	movs	r2, #10
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f9d4 	bl	80083d0 <__multadd>
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	4606      	mov	r6, r0
 800802e:	dc4f      	bgt.n	80080d0 <_dtoa_r+0x948>
 8008030:	9b06      	ldr	r3, [sp, #24]
 8008032:	2b02      	cmp	r3, #2
 8008034:	dd4c      	ble.n	80080d0 <_dtoa_r+0x948>
 8008036:	e011      	b.n	800805c <_dtoa_r+0x8d4>
 8008038:	d0c9      	beq.n	8007fce <_dtoa_r+0x846>
 800803a:	9a05      	ldr	r2, [sp, #20]
 800803c:	331c      	adds	r3, #28
 800803e:	441a      	add	r2, r3
 8008040:	9205      	str	r2, [sp, #20]
 8008042:	441d      	add	r5, r3
 8008044:	4498      	add	r8, r3
 8008046:	e7c2      	b.n	8007fce <_dtoa_r+0x846>
 8008048:	4603      	mov	r3, r0
 800804a:	e7f6      	b.n	800803a <_dtoa_r+0x8b2>
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	dc38      	bgt.n	80080c4 <_dtoa_r+0x93c>
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	2b02      	cmp	r3, #2
 8008056:	dd35      	ble.n	80080c4 <_dtoa_r+0x93c>
 8008058:	f8cd 9008 	str.w	r9, [sp, #8]
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	b963      	cbnz	r3, 800807a <_dtoa_r+0x8f2>
 8008060:	4639      	mov	r1, r7
 8008062:	2205      	movs	r2, #5
 8008064:	4620      	mov	r0, r4
 8008066:	f000 f9b3 	bl	80083d0 <__multadd>
 800806a:	4601      	mov	r1, r0
 800806c:	4607      	mov	r7, r0
 800806e:	9804      	ldr	r0, [sp, #16]
 8008070:	f000 fb78 	bl	8008764 <__mcmp>
 8008074:	2800      	cmp	r0, #0
 8008076:	f73f adcc 	bgt.w	8007c12 <_dtoa_r+0x48a>
 800807a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807c:	465d      	mov	r5, fp
 800807e:	ea6f 0a03 	mvn.w	sl, r3
 8008082:	f04f 0900 	mov.w	r9, #0
 8008086:	4639      	mov	r1, r7
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f98a 	bl	80083a2 <_Bfree>
 800808e:	2e00      	cmp	r6, #0
 8008090:	f43f aeb7 	beq.w	8007e02 <_dtoa_r+0x67a>
 8008094:	f1b9 0f00 	cmp.w	r9, #0
 8008098:	d005      	beq.n	80080a6 <_dtoa_r+0x91e>
 800809a:	45b1      	cmp	r9, r6
 800809c:	d003      	beq.n	80080a6 <_dtoa_r+0x91e>
 800809e:	4649      	mov	r1, r9
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f97e 	bl	80083a2 <_Bfree>
 80080a6:	4631      	mov	r1, r6
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 f97a 	bl	80083a2 <_Bfree>
 80080ae:	e6a8      	b.n	8007e02 <_dtoa_r+0x67a>
 80080b0:	2700      	movs	r7, #0
 80080b2:	463e      	mov	r6, r7
 80080b4:	e7e1      	b.n	800807a <_dtoa_r+0x8f2>
 80080b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80080ba:	463e      	mov	r6, r7
 80080bc:	e5a9      	b.n	8007c12 <_dtoa_r+0x48a>
 80080be:	bf00      	nop
 80080c0:	40240000 	.word	0x40240000
 80080c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80fa 	beq.w	80082c4 <_dtoa_r+0xb3c>
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	dd05      	ble.n	80080e0 <_dtoa_r+0x958>
 80080d4:	4631      	mov	r1, r6
 80080d6:	462a      	mov	r2, r5
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 faef 	bl	80086bc <__lshift>
 80080de:	4606      	mov	r6, r0
 80080e0:	9b07      	ldr	r3, [sp, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d04c      	beq.n	8008180 <_dtoa_r+0x9f8>
 80080e6:	6871      	ldr	r1, [r6, #4]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f926 	bl	800833a <_Balloc>
 80080ee:	6932      	ldr	r2, [r6, #16]
 80080f0:	3202      	adds	r2, #2
 80080f2:	4605      	mov	r5, r0
 80080f4:	0092      	lsls	r2, r2, #2
 80080f6:	f106 010c 	add.w	r1, r6, #12
 80080fa:	300c      	adds	r0, #12
 80080fc:	f000 f912 	bl	8008324 <memcpy>
 8008100:	2201      	movs	r2, #1
 8008102:	4629      	mov	r1, r5
 8008104:	4620      	mov	r0, r4
 8008106:	f000 fad9 	bl	80086bc <__lshift>
 800810a:	9b00      	ldr	r3, [sp, #0]
 800810c:	f8cd b014 	str.w	fp, [sp, #20]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	46b1      	mov	r9, r6
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	4606      	mov	r6, r0
 800811a:	4639      	mov	r1, r7
 800811c:	9804      	ldr	r0, [sp, #16]
 800811e:	f7ff faa7 	bl	8007670 <quorem>
 8008122:	4649      	mov	r1, r9
 8008124:	4605      	mov	r5, r0
 8008126:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800812a:	9804      	ldr	r0, [sp, #16]
 800812c:	f000 fb1a 	bl	8008764 <__mcmp>
 8008130:	4632      	mov	r2, r6
 8008132:	9000      	str	r0, [sp, #0]
 8008134:	4639      	mov	r1, r7
 8008136:	4620      	mov	r0, r4
 8008138:	f000 fb2e 	bl	8008798 <__mdiff>
 800813c:	68c3      	ldr	r3, [r0, #12]
 800813e:	4602      	mov	r2, r0
 8008140:	bb03      	cbnz	r3, 8008184 <_dtoa_r+0x9fc>
 8008142:	4601      	mov	r1, r0
 8008144:	9008      	str	r0, [sp, #32]
 8008146:	9804      	ldr	r0, [sp, #16]
 8008148:	f000 fb0c 	bl	8008764 <__mcmp>
 800814c:	9a08      	ldr	r2, [sp, #32]
 800814e:	4603      	mov	r3, r0
 8008150:	4611      	mov	r1, r2
 8008152:	4620      	mov	r0, r4
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	f000 f924 	bl	80083a2 <_Bfree>
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	b9a3      	cbnz	r3, 8008188 <_dtoa_r+0xa00>
 800815e:	9a06      	ldr	r2, [sp, #24]
 8008160:	b992      	cbnz	r2, 8008188 <_dtoa_r+0xa00>
 8008162:	9a07      	ldr	r2, [sp, #28]
 8008164:	b982      	cbnz	r2, 8008188 <_dtoa_r+0xa00>
 8008166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800816a:	d029      	beq.n	80081c0 <_dtoa_r+0xa38>
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	dd01      	ble.n	8008176 <_dtoa_r+0x9ee>
 8008172:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008176:	9b05      	ldr	r3, [sp, #20]
 8008178:	1c5d      	adds	r5, r3, #1
 800817a:	f883 8000 	strb.w	r8, [r3]
 800817e:	e782      	b.n	8008086 <_dtoa_r+0x8fe>
 8008180:	4630      	mov	r0, r6
 8008182:	e7c2      	b.n	800810a <_dtoa_r+0x982>
 8008184:	2301      	movs	r3, #1
 8008186:	e7e3      	b.n	8008150 <_dtoa_r+0x9c8>
 8008188:	9a00      	ldr	r2, [sp, #0]
 800818a:	2a00      	cmp	r2, #0
 800818c:	db04      	blt.n	8008198 <_dtoa_r+0xa10>
 800818e:	d125      	bne.n	80081dc <_dtoa_r+0xa54>
 8008190:	9a06      	ldr	r2, [sp, #24]
 8008192:	bb1a      	cbnz	r2, 80081dc <_dtoa_r+0xa54>
 8008194:	9a07      	ldr	r2, [sp, #28]
 8008196:	bb0a      	cbnz	r2, 80081dc <_dtoa_r+0xa54>
 8008198:	2b00      	cmp	r3, #0
 800819a:	ddec      	ble.n	8008176 <_dtoa_r+0x9ee>
 800819c:	2201      	movs	r2, #1
 800819e:	9904      	ldr	r1, [sp, #16]
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fa8b 	bl	80086bc <__lshift>
 80081a6:	4639      	mov	r1, r7
 80081a8:	9004      	str	r0, [sp, #16]
 80081aa:	f000 fadb 	bl	8008764 <__mcmp>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	dc03      	bgt.n	80081ba <_dtoa_r+0xa32>
 80081b2:	d1e0      	bne.n	8008176 <_dtoa_r+0x9ee>
 80081b4:	f018 0f01 	tst.w	r8, #1
 80081b8:	d0dd      	beq.n	8008176 <_dtoa_r+0x9ee>
 80081ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081be:	d1d8      	bne.n	8008172 <_dtoa_r+0x9ea>
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	9a05      	ldr	r2, [sp, #20]
 80081c4:	1c5d      	adds	r5, r3, #1
 80081c6:	2339      	movs	r3, #57	; 0x39
 80081c8:	7013      	strb	r3, [r2, #0]
 80081ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081ce:	2b39      	cmp	r3, #57	; 0x39
 80081d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80081d4:	d04f      	beq.n	8008276 <_dtoa_r+0xaee>
 80081d6:	3301      	adds	r3, #1
 80081d8:	7013      	strb	r3, [r2, #0]
 80081da:	e754      	b.n	8008086 <_dtoa_r+0x8fe>
 80081dc:	9a05      	ldr	r2, [sp, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f102 0501 	add.w	r5, r2, #1
 80081e4:	dd06      	ble.n	80081f4 <_dtoa_r+0xa6c>
 80081e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081ea:	d0e9      	beq.n	80081c0 <_dtoa_r+0xa38>
 80081ec:	f108 0801 	add.w	r8, r8, #1
 80081f0:	9b05      	ldr	r3, [sp, #20]
 80081f2:	e7c2      	b.n	800817a <_dtoa_r+0x9f2>
 80081f4:	9a02      	ldr	r2, [sp, #8]
 80081f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80081fa:	eba5 030b 	sub.w	r3, r5, fp
 80081fe:	4293      	cmp	r3, r2
 8008200:	d021      	beq.n	8008246 <_dtoa_r+0xabe>
 8008202:	2300      	movs	r3, #0
 8008204:	220a      	movs	r2, #10
 8008206:	9904      	ldr	r1, [sp, #16]
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f8e1 	bl	80083d0 <__multadd>
 800820e:	45b1      	cmp	r9, r6
 8008210:	9004      	str	r0, [sp, #16]
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	f04f 020a 	mov.w	r2, #10
 800821a:	4649      	mov	r1, r9
 800821c:	4620      	mov	r0, r4
 800821e:	d105      	bne.n	800822c <_dtoa_r+0xaa4>
 8008220:	f000 f8d6 	bl	80083d0 <__multadd>
 8008224:	4681      	mov	r9, r0
 8008226:	4606      	mov	r6, r0
 8008228:	9505      	str	r5, [sp, #20]
 800822a:	e776      	b.n	800811a <_dtoa_r+0x992>
 800822c:	f000 f8d0 	bl	80083d0 <__multadd>
 8008230:	4631      	mov	r1, r6
 8008232:	4681      	mov	r9, r0
 8008234:	2300      	movs	r3, #0
 8008236:	220a      	movs	r2, #10
 8008238:	4620      	mov	r0, r4
 800823a:	f000 f8c9 	bl	80083d0 <__multadd>
 800823e:	4606      	mov	r6, r0
 8008240:	e7f2      	b.n	8008228 <_dtoa_r+0xaa0>
 8008242:	f04f 0900 	mov.w	r9, #0
 8008246:	2201      	movs	r2, #1
 8008248:	9904      	ldr	r1, [sp, #16]
 800824a:	4620      	mov	r0, r4
 800824c:	f000 fa36 	bl	80086bc <__lshift>
 8008250:	4639      	mov	r1, r7
 8008252:	9004      	str	r0, [sp, #16]
 8008254:	f000 fa86 	bl	8008764 <__mcmp>
 8008258:	2800      	cmp	r0, #0
 800825a:	dcb6      	bgt.n	80081ca <_dtoa_r+0xa42>
 800825c:	d102      	bne.n	8008264 <_dtoa_r+0xadc>
 800825e:	f018 0f01 	tst.w	r8, #1
 8008262:	d1b2      	bne.n	80081ca <_dtoa_r+0xa42>
 8008264:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008268:	2b30      	cmp	r3, #48	; 0x30
 800826a:	f105 32ff 	add.w	r2, r5, #4294967295
 800826e:	f47f af0a 	bne.w	8008086 <_dtoa_r+0x8fe>
 8008272:	4615      	mov	r5, r2
 8008274:	e7f6      	b.n	8008264 <_dtoa_r+0xadc>
 8008276:	4593      	cmp	fp, r2
 8008278:	d105      	bne.n	8008286 <_dtoa_r+0xafe>
 800827a:	2331      	movs	r3, #49	; 0x31
 800827c:	f10a 0a01 	add.w	sl, sl, #1
 8008280:	f88b 3000 	strb.w	r3, [fp]
 8008284:	e6ff      	b.n	8008086 <_dtoa_r+0x8fe>
 8008286:	4615      	mov	r5, r2
 8008288:	e79f      	b.n	80081ca <_dtoa_r+0xa42>
 800828a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80082f0 <_dtoa_r+0xb68>
 800828e:	e007      	b.n	80082a0 <_dtoa_r+0xb18>
 8008290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008292:	f8df b060 	ldr.w	fp, [pc, #96]	; 80082f4 <_dtoa_r+0xb6c>
 8008296:	b11b      	cbz	r3, 80082a0 <_dtoa_r+0xb18>
 8008298:	f10b 0308 	add.w	r3, fp, #8
 800829c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	4658      	mov	r0, fp
 80082a2:	b017      	add	sp, #92	; 0x5c
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	f77f ae35 	ble.w	8007f1a <_dtoa_r+0x792>
 80082b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	e649      	b.n	8007f4a <_dtoa_r+0x7c2>
 80082b6:	9b02      	ldr	r3, [sp, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dc03      	bgt.n	80082c4 <_dtoa_r+0xb3c>
 80082bc:	9b06      	ldr	r3, [sp, #24]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	f73f aecc 	bgt.w	800805c <_dtoa_r+0x8d4>
 80082c4:	465d      	mov	r5, fp
 80082c6:	4639      	mov	r1, r7
 80082c8:	9804      	ldr	r0, [sp, #16]
 80082ca:	f7ff f9d1 	bl	8007670 <quorem>
 80082ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082d2:	f805 8b01 	strb.w	r8, [r5], #1
 80082d6:	9a02      	ldr	r2, [sp, #8]
 80082d8:	eba5 030b 	sub.w	r3, r5, fp
 80082dc:	429a      	cmp	r2, r3
 80082de:	ddb0      	ble.n	8008242 <_dtoa_r+0xaba>
 80082e0:	2300      	movs	r3, #0
 80082e2:	220a      	movs	r2, #10
 80082e4:	9904      	ldr	r1, [sp, #16]
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 f872 	bl	80083d0 <__multadd>
 80082ec:	9004      	str	r0, [sp, #16]
 80082ee:	e7ea      	b.n	80082c6 <_dtoa_r+0xb3e>
 80082f0:	08009000 	.word	0x08009000
 80082f4:	08009024 	.word	0x08009024

080082f8 <_localeconv_r>:
 80082f8:	4b04      	ldr	r3, [pc, #16]	; (800830c <_localeconv_r+0x14>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6a18      	ldr	r0, [r3, #32]
 80082fe:	4b04      	ldr	r3, [pc, #16]	; (8008310 <_localeconv_r+0x18>)
 8008300:	2800      	cmp	r0, #0
 8008302:	bf08      	it	eq
 8008304:	4618      	moveq	r0, r3
 8008306:	30f0      	adds	r0, #240	; 0xf0
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	2000000c 	.word	0x2000000c
 8008310:	20000070 	.word	0x20000070

08008314 <malloc>:
 8008314:	4b02      	ldr	r3, [pc, #8]	; (8008320 <malloc+0xc>)
 8008316:	4601      	mov	r1, r0
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	f000 bb45 	b.w	80089a8 <_malloc_r>
 800831e:	bf00      	nop
 8008320:	2000000c 	.word	0x2000000c

08008324 <memcpy>:
 8008324:	b510      	push	{r4, lr}
 8008326:	1e43      	subs	r3, r0, #1
 8008328:	440a      	add	r2, r1
 800832a:	4291      	cmp	r1, r2
 800832c:	d100      	bne.n	8008330 <memcpy+0xc>
 800832e:	bd10      	pop	{r4, pc}
 8008330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008338:	e7f7      	b.n	800832a <memcpy+0x6>

0800833a <_Balloc>:
 800833a:	b570      	push	{r4, r5, r6, lr}
 800833c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800833e:	4604      	mov	r4, r0
 8008340:	460e      	mov	r6, r1
 8008342:	b93d      	cbnz	r5, 8008354 <_Balloc+0x1a>
 8008344:	2010      	movs	r0, #16
 8008346:	f7ff ffe5 	bl	8008314 <malloc>
 800834a:	6260      	str	r0, [r4, #36]	; 0x24
 800834c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008350:	6005      	str	r5, [r0, #0]
 8008352:	60c5      	str	r5, [r0, #12]
 8008354:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008356:	68eb      	ldr	r3, [r5, #12]
 8008358:	b183      	cbz	r3, 800837c <_Balloc+0x42>
 800835a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008362:	b9b8      	cbnz	r0, 8008394 <_Balloc+0x5a>
 8008364:	2101      	movs	r1, #1
 8008366:	fa01 f506 	lsl.w	r5, r1, r6
 800836a:	1d6a      	adds	r2, r5, #5
 800836c:	0092      	lsls	r2, r2, #2
 800836e:	4620      	mov	r0, r4
 8008370:	f000 fabe 	bl	80088f0 <_calloc_r>
 8008374:	b160      	cbz	r0, 8008390 <_Balloc+0x56>
 8008376:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800837a:	e00e      	b.n	800839a <_Balloc+0x60>
 800837c:	2221      	movs	r2, #33	; 0x21
 800837e:	2104      	movs	r1, #4
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fab5 	bl	80088f0 <_calloc_r>
 8008386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008388:	60e8      	str	r0, [r5, #12]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e4      	bne.n	800835a <_Balloc+0x20>
 8008390:	2000      	movs	r0, #0
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	6802      	ldr	r2, [r0, #0]
 8008396:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800839a:	2300      	movs	r3, #0
 800839c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a0:	e7f7      	b.n	8008392 <_Balloc+0x58>

080083a2 <_Bfree>:
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083a6:	4606      	mov	r6, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	b93c      	cbnz	r4, 80083bc <_Bfree+0x1a>
 80083ac:	2010      	movs	r0, #16
 80083ae:	f7ff ffb1 	bl	8008314 <malloc>
 80083b2:	6270      	str	r0, [r6, #36]	; 0x24
 80083b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083b8:	6004      	str	r4, [r0, #0]
 80083ba:	60c4      	str	r4, [r0, #12]
 80083bc:	b13d      	cbz	r5, 80083ce <_Bfree+0x2c>
 80083be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80083c0:	686a      	ldr	r2, [r5, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083c8:	6029      	str	r1, [r5, #0]
 80083ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80083ce:	bd70      	pop	{r4, r5, r6, pc}

080083d0 <__multadd>:
 80083d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d4:	690d      	ldr	r5, [r1, #16]
 80083d6:	461f      	mov	r7, r3
 80083d8:	4606      	mov	r6, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	f101 0c14 	add.w	ip, r1, #20
 80083e0:	2300      	movs	r3, #0
 80083e2:	f8dc 0000 	ldr.w	r0, [ip]
 80083e6:	b281      	uxth	r1, r0
 80083e8:	fb02 7101 	mla	r1, r2, r1, r7
 80083ec:	0c0f      	lsrs	r7, r1, #16
 80083ee:	0c00      	lsrs	r0, r0, #16
 80083f0:	fb02 7000 	mla	r0, r2, r0, r7
 80083f4:	b289      	uxth	r1, r1
 80083f6:	3301      	adds	r3, #1
 80083f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80083fc:	429d      	cmp	r5, r3
 80083fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008402:	f84c 1b04 	str.w	r1, [ip], #4
 8008406:	dcec      	bgt.n	80083e2 <__multadd+0x12>
 8008408:	b1d7      	cbz	r7, 8008440 <__multadd+0x70>
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	42ab      	cmp	r3, r5
 800840e:	dc12      	bgt.n	8008436 <__multadd+0x66>
 8008410:	6861      	ldr	r1, [r4, #4]
 8008412:	4630      	mov	r0, r6
 8008414:	3101      	adds	r1, #1
 8008416:	f7ff ff90 	bl	800833a <_Balloc>
 800841a:	6922      	ldr	r2, [r4, #16]
 800841c:	3202      	adds	r2, #2
 800841e:	f104 010c 	add.w	r1, r4, #12
 8008422:	4680      	mov	r8, r0
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	300c      	adds	r0, #12
 8008428:	f7ff ff7c 	bl	8008324 <memcpy>
 800842c:	4621      	mov	r1, r4
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ffb7 	bl	80083a2 <_Bfree>
 8008434:	4644      	mov	r4, r8
 8008436:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800843a:	3501      	adds	r5, #1
 800843c:	615f      	str	r7, [r3, #20]
 800843e:	6125      	str	r5, [r4, #16]
 8008440:	4620      	mov	r0, r4
 8008442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008446 <__hi0bits>:
 8008446:	0c02      	lsrs	r2, r0, #16
 8008448:	0412      	lsls	r2, r2, #16
 800844a:	4603      	mov	r3, r0
 800844c:	b9b2      	cbnz	r2, 800847c <__hi0bits+0x36>
 800844e:	0403      	lsls	r3, r0, #16
 8008450:	2010      	movs	r0, #16
 8008452:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008456:	bf04      	itt	eq
 8008458:	021b      	lsleq	r3, r3, #8
 800845a:	3008      	addeq	r0, #8
 800845c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008460:	bf04      	itt	eq
 8008462:	011b      	lsleq	r3, r3, #4
 8008464:	3004      	addeq	r0, #4
 8008466:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800846a:	bf04      	itt	eq
 800846c:	009b      	lsleq	r3, r3, #2
 800846e:	3002      	addeq	r0, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	db06      	blt.n	8008482 <__hi0bits+0x3c>
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	d503      	bpl.n	8008480 <__hi0bits+0x3a>
 8008478:	3001      	adds	r0, #1
 800847a:	4770      	bx	lr
 800847c:	2000      	movs	r0, #0
 800847e:	e7e8      	b.n	8008452 <__hi0bits+0xc>
 8008480:	2020      	movs	r0, #32
 8008482:	4770      	bx	lr

08008484 <__lo0bits>:
 8008484:	6803      	ldr	r3, [r0, #0]
 8008486:	f013 0207 	ands.w	r2, r3, #7
 800848a:	4601      	mov	r1, r0
 800848c:	d00b      	beq.n	80084a6 <__lo0bits+0x22>
 800848e:	07da      	lsls	r2, r3, #31
 8008490:	d423      	bmi.n	80084da <__lo0bits+0x56>
 8008492:	0798      	lsls	r0, r3, #30
 8008494:	bf49      	itett	mi
 8008496:	085b      	lsrmi	r3, r3, #1
 8008498:	089b      	lsrpl	r3, r3, #2
 800849a:	2001      	movmi	r0, #1
 800849c:	600b      	strmi	r3, [r1, #0]
 800849e:	bf5c      	itt	pl
 80084a0:	600b      	strpl	r3, [r1, #0]
 80084a2:	2002      	movpl	r0, #2
 80084a4:	4770      	bx	lr
 80084a6:	b298      	uxth	r0, r3
 80084a8:	b9a8      	cbnz	r0, 80084d6 <__lo0bits+0x52>
 80084aa:	0c1b      	lsrs	r3, r3, #16
 80084ac:	2010      	movs	r0, #16
 80084ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084b2:	bf04      	itt	eq
 80084b4:	0a1b      	lsreq	r3, r3, #8
 80084b6:	3008      	addeq	r0, #8
 80084b8:	071a      	lsls	r2, r3, #28
 80084ba:	bf04      	itt	eq
 80084bc:	091b      	lsreq	r3, r3, #4
 80084be:	3004      	addeq	r0, #4
 80084c0:	079a      	lsls	r2, r3, #30
 80084c2:	bf04      	itt	eq
 80084c4:	089b      	lsreq	r3, r3, #2
 80084c6:	3002      	addeq	r0, #2
 80084c8:	07da      	lsls	r2, r3, #31
 80084ca:	d402      	bmi.n	80084d2 <__lo0bits+0x4e>
 80084cc:	085b      	lsrs	r3, r3, #1
 80084ce:	d006      	beq.n	80084de <__lo0bits+0x5a>
 80084d0:	3001      	adds	r0, #1
 80084d2:	600b      	str	r3, [r1, #0]
 80084d4:	4770      	bx	lr
 80084d6:	4610      	mov	r0, r2
 80084d8:	e7e9      	b.n	80084ae <__lo0bits+0x2a>
 80084da:	2000      	movs	r0, #0
 80084dc:	4770      	bx	lr
 80084de:	2020      	movs	r0, #32
 80084e0:	4770      	bx	lr

080084e2 <__i2b>:
 80084e2:	b510      	push	{r4, lr}
 80084e4:	460c      	mov	r4, r1
 80084e6:	2101      	movs	r1, #1
 80084e8:	f7ff ff27 	bl	800833a <_Balloc>
 80084ec:	2201      	movs	r2, #1
 80084ee:	6144      	str	r4, [r0, #20]
 80084f0:	6102      	str	r2, [r0, #16]
 80084f2:	bd10      	pop	{r4, pc}

080084f4 <__multiply>:
 80084f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	4614      	mov	r4, r2
 80084fa:	690a      	ldr	r2, [r1, #16]
 80084fc:	6923      	ldr	r3, [r4, #16]
 80084fe:	429a      	cmp	r2, r3
 8008500:	bfb8      	it	lt
 8008502:	460b      	movlt	r3, r1
 8008504:	4688      	mov	r8, r1
 8008506:	bfbc      	itt	lt
 8008508:	46a0      	movlt	r8, r4
 800850a:	461c      	movlt	r4, r3
 800850c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008510:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008514:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008518:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800851c:	eb07 0609 	add.w	r6, r7, r9
 8008520:	42b3      	cmp	r3, r6
 8008522:	bfb8      	it	lt
 8008524:	3101      	addlt	r1, #1
 8008526:	f7ff ff08 	bl	800833a <_Balloc>
 800852a:	f100 0514 	add.w	r5, r0, #20
 800852e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008532:	462b      	mov	r3, r5
 8008534:	2200      	movs	r2, #0
 8008536:	4573      	cmp	r3, lr
 8008538:	d316      	bcc.n	8008568 <__multiply+0x74>
 800853a:	f104 0214 	add.w	r2, r4, #20
 800853e:	f108 0114 	add.w	r1, r8, #20
 8008542:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008546:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	9201      	str	r2, [sp, #4]
 8008550:	4293      	cmp	r3, r2
 8008552:	d80c      	bhi.n	800856e <__multiply+0x7a>
 8008554:	2e00      	cmp	r6, #0
 8008556:	dd03      	ble.n	8008560 <__multiply+0x6c>
 8008558:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800855c:	2b00      	cmp	r3, #0
 800855e:	d05d      	beq.n	800861c <__multiply+0x128>
 8008560:	6106      	str	r6, [r0, #16]
 8008562:	b003      	add	sp, #12
 8008564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	f843 2b04 	str.w	r2, [r3], #4
 800856c:	e7e3      	b.n	8008536 <__multiply+0x42>
 800856e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008572:	f1bb 0f00 	cmp.w	fp, #0
 8008576:	d023      	beq.n	80085c0 <__multiply+0xcc>
 8008578:	4689      	mov	r9, r1
 800857a:	46ac      	mov	ip, r5
 800857c:	f04f 0800 	mov.w	r8, #0
 8008580:	f859 4b04 	ldr.w	r4, [r9], #4
 8008584:	f8dc a000 	ldr.w	sl, [ip]
 8008588:	b2a3      	uxth	r3, r4
 800858a:	fa1f fa8a 	uxth.w	sl, sl
 800858e:	fb0b a303 	mla	r3, fp, r3, sl
 8008592:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008596:	f8dc 4000 	ldr.w	r4, [ip]
 800859a:	4443      	add	r3, r8
 800859c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085a0:	fb0b 840a 	mla	r4, fp, sl, r8
 80085a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80085a8:	46e2      	mov	sl, ip
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085b0:	454f      	cmp	r7, r9
 80085b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085b6:	f84a 3b04 	str.w	r3, [sl], #4
 80085ba:	d82b      	bhi.n	8008614 <__multiply+0x120>
 80085bc:	f8cc 8004 	str.w	r8, [ip, #4]
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80085c6:	3204      	adds	r2, #4
 80085c8:	f1ba 0f00 	cmp.w	sl, #0
 80085cc:	d020      	beq.n	8008610 <__multiply+0x11c>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	4689      	mov	r9, r1
 80085d2:	46a8      	mov	r8, r5
 80085d4:	f04f 0b00 	mov.w	fp, #0
 80085d8:	f8b9 c000 	ldrh.w	ip, [r9]
 80085dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80085e0:	fb0a 440c 	mla	r4, sl, ip, r4
 80085e4:	445c      	add	r4, fp
 80085e6:	46c4      	mov	ip, r8
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085ee:	f84c 3b04 	str.w	r3, [ip], #4
 80085f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80085f6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80085fa:	0c1b      	lsrs	r3, r3, #16
 80085fc:	fb0a b303 	mla	r3, sl, r3, fp
 8008600:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008604:	454f      	cmp	r7, r9
 8008606:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800860a:	d805      	bhi.n	8008618 <__multiply+0x124>
 800860c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008610:	3504      	adds	r5, #4
 8008612:	e79b      	b.n	800854c <__multiply+0x58>
 8008614:	46d4      	mov	ip, sl
 8008616:	e7b3      	b.n	8008580 <__multiply+0x8c>
 8008618:	46e0      	mov	r8, ip
 800861a:	e7dd      	b.n	80085d8 <__multiply+0xe4>
 800861c:	3e01      	subs	r6, #1
 800861e:	e799      	b.n	8008554 <__multiply+0x60>

08008620 <__pow5mult>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	4615      	mov	r5, r2
 8008626:	f012 0203 	ands.w	r2, r2, #3
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	d007      	beq.n	8008640 <__pow5mult+0x20>
 8008630:	3a01      	subs	r2, #1
 8008632:	4c21      	ldr	r4, [pc, #132]	; (80086b8 <__pow5mult+0x98>)
 8008634:	2300      	movs	r3, #0
 8008636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800863a:	f7ff fec9 	bl	80083d0 <__multadd>
 800863e:	4607      	mov	r7, r0
 8008640:	10ad      	asrs	r5, r5, #2
 8008642:	d035      	beq.n	80086b0 <__pow5mult+0x90>
 8008644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008646:	b93c      	cbnz	r4, 8008658 <__pow5mult+0x38>
 8008648:	2010      	movs	r0, #16
 800864a:	f7ff fe63 	bl	8008314 <malloc>
 800864e:	6270      	str	r0, [r6, #36]	; 0x24
 8008650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008654:	6004      	str	r4, [r0, #0]
 8008656:	60c4      	str	r4, [r0, #12]
 8008658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800865c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008660:	b94c      	cbnz	r4, 8008676 <__pow5mult+0x56>
 8008662:	f240 2171 	movw	r1, #625	; 0x271
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ff3b 	bl	80084e2 <__i2b>
 800866c:	2300      	movs	r3, #0
 800866e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008672:	4604      	mov	r4, r0
 8008674:	6003      	str	r3, [r0, #0]
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	07eb      	lsls	r3, r5, #31
 800867c:	d50a      	bpl.n	8008694 <__pow5mult+0x74>
 800867e:	4639      	mov	r1, r7
 8008680:	4622      	mov	r2, r4
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff ff36 	bl	80084f4 <__multiply>
 8008688:	4639      	mov	r1, r7
 800868a:	4681      	mov	r9, r0
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff fe88 	bl	80083a2 <_Bfree>
 8008692:	464f      	mov	r7, r9
 8008694:	106d      	asrs	r5, r5, #1
 8008696:	d00b      	beq.n	80086b0 <__pow5mult+0x90>
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	b938      	cbnz	r0, 80086ac <__pow5mult+0x8c>
 800869c:	4622      	mov	r2, r4
 800869e:	4621      	mov	r1, r4
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7ff ff27 	bl	80084f4 <__multiply>
 80086a6:	6020      	str	r0, [r4, #0]
 80086a8:	f8c0 8000 	str.w	r8, [r0]
 80086ac:	4604      	mov	r4, r0
 80086ae:	e7e4      	b.n	800867a <__pow5mult+0x5a>
 80086b0:	4638      	mov	r0, r7
 80086b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b6:	bf00      	nop
 80086b8:	08009128 	.word	0x08009128

080086bc <__lshift>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	6849      	ldr	r1, [r1, #4]
 80086ca:	eb0a 0903 	add.w	r9, sl, r3
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	4607      	mov	r7, r0
 80086d2:	4616      	mov	r6, r2
 80086d4:	f109 0501 	add.w	r5, r9, #1
 80086d8:	42ab      	cmp	r3, r5
 80086da:	db32      	blt.n	8008742 <__lshift+0x86>
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff fe2c 	bl	800833a <_Balloc>
 80086e2:	2300      	movs	r3, #0
 80086e4:	4680      	mov	r8, r0
 80086e6:	f100 0114 	add.w	r1, r0, #20
 80086ea:	461a      	mov	r2, r3
 80086ec:	4553      	cmp	r3, sl
 80086ee:	db2b      	blt.n	8008748 <__lshift+0x8c>
 80086f0:	6920      	ldr	r0, [r4, #16]
 80086f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f6:	f104 0314 	add.w	r3, r4, #20
 80086fa:	f016 021f 	ands.w	r2, r6, #31
 80086fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008702:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008706:	d025      	beq.n	8008754 <__lshift+0x98>
 8008708:	f1c2 0e20 	rsb	lr, r2, #32
 800870c:	2000      	movs	r0, #0
 800870e:	681e      	ldr	r6, [r3, #0]
 8008710:	468a      	mov	sl, r1
 8008712:	4096      	lsls	r6, r2
 8008714:	4330      	orrs	r0, r6
 8008716:	f84a 0b04 	str.w	r0, [sl], #4
 800871a:	f853 0b04 	ldr.w	r0, [r3], #4
 800871e:	459c      	cmp	ip, r3
 8008720:	fa20 f00e 	lsr.w	r0, r0, lr
 8008724:	d814      	bhi.n	8008750 <__lshift+0x94>
 8008726:	6048      	str	r0, [r1, #4]
 8008728:	b108      	cbz	r0, 800872e <__lshift+0x72>
 800872a:	f109 0502 	add.w	r5, r9, #2
 800872e:	3d01      	subs	r5, #1
 8008730:	4638      	mov	r0, r7
 8008732:	f8c8 5010 	str.w	r5, [r8, #16]
 8008736:	4621      	mov	r1, r4
 8008738:	f7ff fe33 	bl	80083a2 <_Bfree>
 800873c:	4640      	mov	r0, r8
 800873e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008742:	3101      	adds	r1, #1
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	e7c7      	b.n	80086d8 <__lshift+0x1c>
 8008748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800874c:	3301      	adds	r3, #1
 800874e:	e7cd      	b.n	80086ec <__lshift+0x30>
 8008750:	4651      	mov	r1, sl
 8008752:	e7dc      	b.n	800870e <__lshift+0x52>
 8008754:	3904      	subs	r1, #4
 8008756:	f853 2b04 	ldr.w	r2, [r3], #4
 800875a:	f841 2f04 	str.w	r2, [r1, #4]!
 800875e:	459c      	cmp	ip, r3
 8008760:	d8f9      	bhi.n	8008756 <__lshift+0x9a>
 8008762:	e7e4      	b.n	800872e <__lshift+0x72>

08008764 <__mcmp>:
 8008764:	6903      	ldr	r3, [r0, #16]
 8008766:	690a      	ldr	r2, [r1, #16]
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	b530      	push	{r4, r5, lr}
 800876c:	d10c      	bne.n	8008788 <__mcmp+0x24>
 800876e:	0092      	lsls	r2, r2, #2
 8008770:	3014      	adds	r0, #20
 8008772:	3114      	adds	r1, #20
 8008774:	1884      	adds	r4, r0, r2
 8008776:	4411      	add	r1, r2
 8008778:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800877c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008780:	4295      	cmp	r5, r2
 8008782:	d003      	beq.n	800878c <__mcmp+0x28>
 8008784:	d305      	bcc.n	8008792 <__mcmp+0x2e>
 8008786:	2301      	movs	r3, #1
 8008788:	4618      	mov	r0, r3
 800878a:	bd30      	pop	{r4, r5, pc}
 800878c:	42a0      	cmp	r0, r4
 800878e:	d3f3      	bcc.n	8008778 <__mcmp+0x14>
 8008790:	e7fa      	b.n	8008788 <__mcmp+0x24>
 8008792:	f04f 33ff 	mov.w	r3, #4294967295
 8008796:	e7f7      	b.n	8008788 <__mcmp+0x24>

08008798 <__mdiff>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	460d      	mov	r5, r1
 800879e:	4607      	mov	r7, r0
 80087a0:	4611      	mov	r1, r2
 80087a2:	4628      	mov	r0, r5
 80087a4:	4614      	mov	r4, r2
 80087a6:	f7ff ffdd 	bl	8008764 <__mcmp>
 80087aa:	1e06      	subs	r6, r0, #0
 80087ac:	d108      	bne.n	80087c0 <__mdiff+0x28>
 80087ae:	4631      	mov	r1, r6
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff fdc2 	bl	800833a <_Balloc>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c0:	bfa4      	itt	ge
 80087c2:	4623      	movge	r3, r4
 80087c4:	462c      	movge	r4, r5
 80087c6:	4638      	mov	r0, r7
 80087c8:	6861      	ldr	r1, [r4, #4]
 80087ca:	bfa6      	itte	ge
 80087cc:	461d      	movge	r5, r3
 80087ce:	2600      	movge	r6, #0
 80087d0:	2601      	movlt	r6, #1
 80087d2:	f7ff fdb2 	bl	800833a <_Balloc>
 80087d6:	692b      	ldr	r3, [r5, #16]
 80087d8:	60c6      	str	r6, [r0, #12]
 80087da:	6926      	ldr	r6, [r4, #16]
 80087dc:	f105 0914 	add.w	r9, r5, #20
 80087e0:	f104 0214 	add.w	r2, r4, #20
 80087e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80087e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80087ec:	f100 0514 	add.w	r5, r0, #20
 80087f0:	f04f 0e00 	mov.w	lr, #0
 80087f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80087f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80087fc:	fa1e f18a 	uxtah	r1, lr, sl
 8008800:	b2a3      	uxth	r3, r4
 8008802:	1ac9      	subs	r1, r1, r3
 8008804:	0c23      	lsrs	r3, r4, #16
 8008806:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800880a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800880e:	b289      	uxth	r1, r1
 8008810:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008814:	45c8      	cmp	r8, r9
 8008816:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800881a:	4694      	mov	ip, r2
 800881c:	f845 3b04 	str.w	r3, [r5], #4
 8008820:	d8e8      	bhi.n	80087f4 <__mdiff+0x5c>
 8008822:	45bc      	cmp	ip, r7
 8008824:	d304      	bcc.n	8008830 <__mdiff+0x98>
 8008826:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800882a:	b183      	cbz	r3, 800884e <__mdiff+0xb6>
 800882c:	6106      	str	r6, [r0, #16]
 800882e:	e7c5      	b.n	80087bc <__mdiff+0x24>
 8008830:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008834:	fa1e f381 	uxtah	r3, lr, r1
 8008838:	141a      	asrs	r2, r3, #16
 800883a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800883e:	b29b      	uxth	r3, r3
 8008840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008844:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008848:	f845 3b04 	str.w	r3, [r5], #4
 800884c:	e7e9      	b.n	8008822 <__mdiff+0x8a>
 800884e:	3e01      	subs	r6, #1
 8008850:	e7e9      	b.n	8008826 <__mdiff+0x8e>

08008852 <__d2b>:
 8008852:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008856:	460e      	mov	r6, r1
 8008858:	2101      	movs	r1, #1
 800885a:	ec59 8b10 	vmov	r8, r9, d0
 800885e:	4615      	mov	r5, r2
 8008860:	f7ff fd6b 	bl	800833a <_Balloc>
 8008864:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008868:	4607      	mov	r7, r0
 800886a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800886e:	bb34      	cbnz	r4, 80088be <__d2b+0x6c>
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	f1b8 0300 	subs.w	r3, r8, #0
 8008876:	d027      	beq.n	80088c8 <__d2b+0x76>
 8008878:	a802      	add	r0, sp, #8
 800887a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800887e:	f7ff fe01 	bl	8008484 <__lo0bits>
 8008882:	9900      	ldr	r1, [sp, #0]
 8008884:	b1f0      	cbz	r0, 80088c4 <__d2b+0x72>
 8008886:	9a01      	ldr	r2, [sp, #4]
 8008888:	f1c0 0320 	rsb	r3, r0, #32
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	430b      	orrs	r3, r1
 8008892:	40c2      	lsrs	r2, r0
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	61bb      	str	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bf14      	ite	ne
 80088a0:	2102      	movne	r1, #2
 80088a2:	2101      	moveq	r1, #1
 80088a4:	6139      	str	r1, [r7, #16]
 80088a6:	b1c4      	cbz	r4, 80088da <__d2b+0x88>
 80088a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80088ac:	4404      	add	r4, r0
 80088ae:	6034      	str	r4, [r6, #0]
 80088b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088b4:	6028      	str	r0, [r5, #0]
 80088b6:	4638      	mov	r0, r7
 80088b8:	b003      	add	sp, #12
 80088ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c2:	e7d5      	b.n	8008870 <__d2b+0x1e>
 80088c4:	6179      	str	r1, [r7, #20]
 80088c6:	e7e7      	b.n	8008898 <__d2b+0x46>
 80088c8:	a801      	add	r0, sp, #4
 80088ca:	f7ff fddb 	bl	8008484 <__lo0bits>
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	2101      	movs	r1, #1
 80088d4:	6139      	str	r1, [r7, #16]
 80088d6:	3020      	adds	r0, #32
 80088d8:	e7e5      	b.n	80088a6 <__d2b+0x54>
 80088da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80088de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088e2:	6030      	str	r0, [r6, #0]
 80088e4:	6918      	ldr	r0, [r3, #16]
 80088e6:	f7ff fdae 	bl	8008446 <__hi0bits>
 80088ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088ee:	e7e1      	b.n	80088b4 <__d2b+0x62>

080088f0 <_calloc_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	fb02 f401 	mul.w	r4, r2, r1
 80088f6:	4621      	mov	r1, r4
 80088f8:	f000 f856 	bl	80089a8 <_malloc_r>
 80088fc:	4605      	mov	r5, r0
 80088fe:	b118      	cbz	r0, 8008908 <_calloc_r+0x18>
 8008900:	4622      	mov	r2, r4
 8008902:	2100      	movs	r1, #0
 8008904:	f7fe fa30 	bl	8006d68 <memset>
 8008908:	4628      	mov	r0, r5
 800890a:	bd38      	pop	{r3, r4, r5, pc}

0800890c <_free_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4605      	mov	r5, r0
 8008910:	2900      	cmp	r1, #0
 8008912:	d045      	beq.n	80089a0 <_free_r+0x94>
 8008914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008918:	1f0c      	subs	r4, r1, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfb8      	it	lt
 800891e:	18e4      	addlt	r4, r4, r3
 8008920:	f000 fa29 	bl	8008d76 <__malloc_lock>
 8008924:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <_free_r+0x98>)
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	4610      	mov	r0, r2
 800892a:	b933      	cbnz	r3, 800893a <_free_r+0x2e>
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6014      	str	r4, [r2, #0]
 8008930:	4628      	mov	r0, r5
 8008932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008936:	f000 ba1f 	b.w	8008d78 <__malloc_unlock>
 800893a:	42a3      	cmp	r3, r4
 800893c:	d90c      	bls.n	8008958 <_free_r+0x4c>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	1862      	adds	r2, r4, r1
 8008942:	4293      	cmp	r3, r2
 8008944:	bf04      	itt	eq
 8008946:	681a      	ldreq	r2, [r3, #0]
 8008948:	685b      	ldreq	r3, [r3, #4]
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	bf04      	itt	eq
 800894e:	1852      	addeq	r2, r2, r1
 8008950:	6022      	streq	r2, [r4, #0]
 8008952:	6004      	str	r4, [r0, #0]
 8008954:	e7ec      	b.n	8008930 <_free_r+0x24>
 8008956:	4613      	mov	r3, r2
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	b10a      	cbz	r2, 8008960 <_free_r+0x54>
 800895c:	42a2      	cmp	r2, r4
 800895e:	d9fa      	bls.n	8008956 <_free_r+0x4a>
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	1858      	adds	r0, r3, r1
 8008964:	42a0      	cmp	r0, r4
 8008966:	d10b      	bne.n	8008980 <_free_r+0x74>
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	4401      	add	r1, r0
 800896c:	1858      	adds	r0, r3, r1
 800896e:	4282      	cmp	r2, r0
 8008970:	6019      	str	r1, [r3, #0]
 8008972:	d1dd      	bne.n	8008930 <_free_r+0x24>
 8008974:	6810      	ldr	r0, [r2, #0]
 8008976:	6852      	ldr	r2, [r2, #4]
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	4401      	add	r1, r0
 800897c:	6019      	str	r1, [r3, #0]
 800897e:	e7d7      	b.n	8008930 <_free_r+0x24>
 8008980:	d902      	bls.n	8008988 <_free_r+0x7c>
 8008982:	230c      	movs	r3, #12
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	e7d3      	b.n	8008930 <_free_r+0x24>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	1821      	adds	r1, r4, r0
 800898c:	428a      	cmp	r2, r1
 800898e:	bf04      	itt	eq
 8008990:	6811      	ldreq	r1, [r2, #0]
 8008992:	6852      	ldreq	r2, [r2, #4]
 8008994:	6062      	str	r2, [r4, #4]
 8008996:	bf04      	itt	eq
 8008998:	1809      	addeq	r1, r1, r0
 800899a:	6021      	streq	r1, [r4, #0]
 800899c:	605c      	str	r4, [r3, #4]
 800899e:	e7c7      	b.n	8008930 <_free_r+0x24>
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	bf00      	nop
 80089a4:	2000026c 	.word	0x2000026c

080089a8 <_malloc_r>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	1ccd      	adds	r5, r1, #3
 80089ac:	f025 0503 	bic.w	r5, r5, #3
 80089b0:	3508      	adds	r5, #8
 80089b2:	2d0c      	cmp	r5, #12
 80089b4:	bf38      	it	cc
 80089b6:	250c      	movcc	r5, #12
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	db01      	blt.n	80089c2 <_malloc_r+0x1a>
 80089be:	42a9      	cmp	r1, r5
 80089c0:	d903      	bls.n	80089ca <_malloc_r+0x22>
 80089c2:	230c      	movs	r3, #12
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	2000      	movs	r0, #0
 80089c8:	bd70      	pop	{r4, r5, r6, pc}
 80089ca:	f000 f9d4 	bl	8008d76 <__malloc_lock>
 80089ce:	4a21      	ldr	r2, [pc, #132]	; (8008a54 <_malloc_r+0xac>)
 80089d0:	6814      	ldr	r4, [r2, #0]
 80089d2:	4621      	mov	r1, r4
 80089d4:	b991      	cbnz	r1, 80089fc <_malloc_r+0x54>
 80089d6:	4c20      	ldr	r4, [pc, #128]	; (8008a58 <_malloc_r+0xb0>)
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	b91b      	cbnz	r3, 80089e4 <_malloc_r+0x3c>
 80089dc:	4630      	mov	r0, r6
 80089de:	f000 f98f 	bl	8008d00 <_sbrk_r>
 80089e2:	6020      	str	r0, [r4, #0]
 80089e4:	4629      	mov	r1, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f98a 	bl	8008d00 <_sbrk_r>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d124      	bne.n	8008a3a <_malloc_r+0x92>
 80089f0:	230c      	movs	r3, #12
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 f9bf 	bl	8008d78 <__malloc_unlock>
 80089fa:	e7e4      	b.n	80089c6 <_malloc_r+0x1e>
 80089fc:	680b      	ldr	r3, [r1, #0]
 80089fe:	1b5b      	subs	r3, r3, r5
 8008a00:	d418      	bmi.n	8008a34 <_malloc_r+0x8c>
 8008a02:	2b0b      	cmp	r3, #11
 8008a04:	d90f      	bls.n	8008a26 <_malloc_r+0x7e>
 8008a06:	600b      	str	r3, [r1, #0]
 8008a08:	50cd      	str	r5, [r1, r3]
 8008a0a:	18cc      	adds	r4, r1, r3
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 f9b3 	bl	8008d78 <__malloc_unlock>
 8008a12:	f104 000b 	add.w	r0, r4, #11
 8008a16:	1d23      	adds	r3, r4, #4
 8008a18:	f020 0007 	bic.w	r0, r0, #7
 8008a1c:	1ac3      	subs	r3, r0, r3
 8008a1e:	d0d3      	beq.n	80089c8 <_malloc_r+0x20>
 8008a20:	425a      	negs	r2, r3
 8008a22:	50e2      	str	r2, [r4, r3]
 8008a24:	e7d0      	b.n	80089c8 <_malloc_r+0x20>
 8008a26:	428c      	cmp	r4, r1
 8008a28:	684b      	ldr	r3, [r1, #4]
 8008a2a:	bf16      	itet	ne
 8008a2c:	6063      	strne	r3, [r4, #4]
 8008a2e:	6013      	streq	r3, [r2, #0]
 8008a30:	460c      	movne	r4, r1
 8008a32:	e7eb      	b.n	8008a0c <_malloc_r+0x64>
 8008a34:	460c      	mov	r4, r1
 8008a36:	6849      	ldr	r1, [r1, #4]
 8008a38:	e7cc      	b.n	80089d4 <_malloc_r+0x2c>
 8008a3a:	1cc4      	adds	r4, r0, #3
 8008a3c:	f024 0403 	bic.w	r4, r4, #3
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d005      	beq.n	8008a50 <_malloc_r+0xa8>
 8008a44:	1a21      	subs	r1, r4, r0
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 f95a 	bl	8008d00 <_sbrk_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d0cf      	beq.n	80089f0 <_malloc_r+0x48>
 8008a50:	6025      	str	r5, [r4, #0]
 8008a52:	e7db      	b.n	8008a0c <_malloc_r+0x64>
 8008a54:	2000026c 	.word	0x2000026c
 8008a58:	20000270 	.word	0x20000270

08008a5c <__ssputs_r>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	688e      	ldr	r6, [r1, #8]
 8008a62:	429e      	cmp	r6, r3
 8008a64:	4682      	mov	sl, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4690      	mov	r8, r2
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	d837      	bhi.n	8008ade <__ssputs_r+0x82>
 8008a6e:	898a      	ldrh	r2, [r1, #12]
 8008a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a74:	d031      	beq.n	8008ada <__ssputs_r+0x7e>
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	6909      	ldr	r1, [r1, #16]
 8008a7a:	1a6f      	subs	r7, r5, r1
 8008a7c:	6965      	ldr	r5, [r4, #20]
 8008a7e:	2302      	movs	r3, #2
 8008a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a84:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a88:	f109 0301 	add.w	r3, r9, #1
 8008a8c:	443b      	add	r3, r7
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf38      	it	cc
 8008a92:	461d      	movcc	r5, r3
 8008a94:	0553      	lsls	r3, r2, #21
 8008a96:	d530      	bpl.n	8008afa <__ssputs_r+0x9e>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7ff ff85 	bl	80089a8 <_malloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b950      	cbnz	r0, 8008ab8 <__ssputs_r+0x5c>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	f8ca 3000 	str.w	r3, [sl]
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	463a      	mov	r2, r7
 8008aba:	6921      	ldr	r1, [r4, #16]
 8008abc:	f7ff fc32 	bl	8008324 <memcpy>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	6126      	str	r6, [r4, #16]
 8008ace:	6165      	str	r5, [r4, #20]
 8008ad0:	443e      	add	r6, r7
 8008ad2:	1bed      	subs	r5, r5, r7
 8008ad4:	6026      	str	r6, [r4, #0]
 8008ad6:	60a5      	str	r5, [r4, #8]
 8008ad8:	464e      	mov	r6, r9
 8008ada:	454e      	cmp	r6, r9
 8008adc:	d900      	bls.n	8008ae0 <__ssputs_r+0x84>
 8008ade:	464e      	mov	r6, r9
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	f000 f92d 	bl	8008d44 <memmove>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	1b9b      	subs	r3, r3, r6
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	441e      	add	r6, r3
 8008af4:	6026      	str	r6, [r4, #0]
 8008af6:	2000      	movs	r0, #0
 8008af8:	e7dc      	b.n	8008ab4 <__ssputs_r+0x58>
 8008afa:	462a      	mov	r2, r5
 8008afc:	f000 f93d 	bl	8008d7a <_realloc_r>
 8008b00:	4606      	mov	r6, r0
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d1e2      	bne.n	8008acc <__ssputs_r+0x70>
 8008b06:	6921      	ldr	r1, [r4, #16]
 8008b08:	4650      	mov	r0, sl
 8008b0a:	f7ff feff 	bl	800890c <_free_r>
 8008b0e:	e7c8      	b.n	8008aa2 <__ssputs_r+0x46>

08008b10 <_svfiprintf_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	461d      	mov	r5, r3
 8008b16:	898b      	ldrh	r3, [r1, #12]
 8008b18:	061f      	lsls	r7, r3, #24
 8008b1a:	b09d      	sub	sp, #116	; 0x74
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4616      	mov	r6, r2
 8008b22:	d50f      	bpl.n	8008b44 <_svfiprintf_r+0x34>
 8008b24:	690b      	ldr	r3, [r1, #16]
 8008b26:	b96b      	cbnz	r3, 8008b44 <_svfiprintf_r+0x34>
 8008b28:	2140      	movs	r1, #64	; 0x40
 8008b2a:	f7ff ff3d 	bl	80089a8 <_malloc_r>
 8008b2e:	6020      	str	r0, [r4, #0]
 8008b30:	6120      	str	r0, [r4, #16]
 8008b32:	b928      	cbnz	r0, 8008b40 <_svfiprintf_r+0x30>
 8008b34:	230c      	movs	r3, #12
 8008b36:	f8c8 3000 	str.w	r3, [r8]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	e0c8      	b.n	8008cd2 <_svfiprintf_r+0x1c2>
 8008b40:	2340      	movs	r3, #64	; 0x40
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9309      	str	r3, [sp, #36]	; 0x24
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b4e:	2330      	movs	r3, #48	; 0x30
 8008b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b54:	9503      	str	r5, [sp, #12]
 8008b56:	f04f 0b01 	mov.w	fp, #1
 8008b5a:	4637      	mov	r7, r6
 8008b5c:	463d      	mov	r5, r7
 8008b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b62:	b10b      	cbz	r3, 8008b68 <_svfiprintf_r+0x58>
 8008b64:	2b25      	cmp	r3, #37	; 0x25
 8008b66:	d13e      	bne.n	8008be6 <_svfiprintf_r+0xd6>
 8008b68:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b6c:	d00b      	beq.n	8008b86 <_svfiprintf_r+0x76>
 8008b6e:	4653      	mov	r3, sl
 8008b70:	4632      	mov	r2, r6
 8008b72:	4621      	mov	r1, r4
 8008b74:	4640      	mov	r0, r8
 8008b76:	f7ff ff71 	bl	8008a5c <__ssputs_r>
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f000 80a4 	beq.w	8008cc8 <_svfiprintf_r+0x1b8>
 8008b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b82:	4453      	add	r3, sl
 8008b84:	9309      	str	r3, [sp, #36]	; 0x24
 8008b86:	783b      	ldrb	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 809d 	beq.w	8008cc8 <_svfiprintf_r+0x1b8>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295
 8008b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ba2:	462f      	mov	r7, r5
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008baa:	4850      	ldr	r0, [pc, #320]	; (8008cec <_svfiprintf_r+0x1dc>)
 8008bac:	f7f7 fb18 	bl	80001e0 <memchr>
 8008bb0:	9b04      	ldr	r3, [sp, #16]
 8008bb2:	b9d0      	cbnz	r0, 8008bea <_svfiprintf_r+0xda>
 8008bb4:	06d9      	lsls	r1, r3, #27
 8008bb6:	bf44      	itt	mi
 8008bb8:	2220      	movmi	r2, #32
 8008bba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bbe:	071a      	lsls	r2, r3, #28
 8008bc0:	bf44      	itt	mi
 8008bc2:	222b      	movmi	r2, #43	; 0x2b
 8008bc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bc8:	782a      	ldrb	r2, [r5, #0]
 8008bca:	2a2a      	cmp	r2, #42	; 0x2a
 8008bcc:	d015      	beq.n	8008bfa <_svfiprintf_r+0xea>
 8008bce:	9a07      	ldr	r2, [sp, #28]
 8008bd0:	462f      	mov	r7, r5
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	250a      	movs	r5, #10
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bdc:	3b30      	subs	r3, #48	; 0x30
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	d94d      	bls.n	8008c7e <_svfiprintf_r+0x16e>
 8008be2:	b1b8      	cbz	r0, 8008c14 <_svfiprintf_r+0x104>
 8008be4:	e00f      	b.n	8008c06 <_svfiprintf_r+0xf6>
 8008be6:	462f      	mov	r7, r5
 8008be8:	e7b8      	b.n	8008b5c <_svfiprintf_r+0x4c>
 8008bea:	4a40      	ldr	r2, [pc, #256]	; (8008cec <_svfiprintf_r+0x1dc>)
 8008bec:	1a80      	subs	r0, r0, r2
 8008bee:	fa0b f000 	lsl.w	r0, fp, r0
 8008bf2:	4318      	orrs	r0, r3
 8008bf4:	9004      	str	r0, [sp, #16]
 8008bf6:	463d      	mov	r5, r7
 8008bf8:	e7d3      	b.n	8008ba2 <_svfiprintf_r+0x92>
 8008bfa:	9a03      	ldr	r2, [sp, #12]
 8008bfc:	1d11      	adds	r1, r2, #4
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	9103      	str	r1, [sp, #12]
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	db01      	blt.n	8008c0a <_svfiprintf_r+0xfa>
 8008c06:	9207      	str	r2, [sp, #28]
 8008c08:	e004      	b.n	8008c14 <_svfiprintf_r+0x104>
 8008c0a:	4252      	negs	r2, r2
 8008c0c:	f043 0302 	orr.w	r3, r3, #2
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	783b      	ldrb	r3, [r7, #0]
 8008c16:	2b2e      	cmp	r3, #46	; 0x2e
 8008c18:	d10c      	bne.n	8008c34 <_svfiprintf_r+0x124>
 8008c1a:	787b      	ldrb	r3, [r7, #1]
 8008c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1e:	d133      	bne.n	8008c88 <_svfiprintf_r+0x178>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9203      	str	r2, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bfb8      	it	lt
 8008c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c30:	3702      	adds	r7, #2
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	4d2e      	ldr	r5, [pc, #184]	; (8008cf0 <_svfiprintf_r+0x1e0>)
 8008c36:	7839      	ldrb	r1, [r7, #0]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7f7 fad0 	bl	80001e0 <memchr>
 8008c40:	b138      	cbz	r0, 8008c52 <_svfiprintf_r+0x142>
 8008c42:	2340      	movs	r3, #64	; 0x40
 8008c44:	1b40      	subs	r0, r0, r5
 8008c46:	fa03 f000 	lsl.w	r0, r3, r0
 8008c4a:	9b04      	ldr	r3, [sp, #16]
 8008c4c:	4303      	orrs	r3, r0
 8008c4e:	3701      	adds	r7, #1
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	7839      	ldrb	r1, [r7, #0]
 8008c54:	4827      	ldr	r0, [pc, #156]	; (8008cf4 <_svfiprintf_r+0x1e4>)
 8008c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c5a:	2206      	movs	r2, #6
 8008c5c:	1c7e      	adds	r6, r7, #1
 8008c5e:	f7f7 fabf 	bl	80001e0 <memchr>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d038      	beq.n	8008cd8 <_svfiprintf_r+0x1c8>
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <_svfiprintf_r+0x1e8>)
 8008c68:	bb13      	cbnz	r3, 8008cb0 <_svfiprintf_r+0x1a0>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	3307      	adds	r3, #7
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	3308      	adds	r3, #8
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c78:	444b      	add	r3, r9
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	e76d      	b.n	8008b5a <_svfiprintf_r+0x4a>
 8008c7e:	fb05 3202 	mla	r2, r5, r2, r3
 8008c82:	2001      	movs	r0, #1
 8008c84:	460f      	mov	r7, r1
 8008c86:	e7a6      	b.n	8008bd6 <_svfiprintf_r+0xc6>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	9305      	str	r3, [sp, #20]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	250a      	movs	r5, #10
 8008c92:	4638      	mov	r0, r7
 8008c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c98:	3a30      	subs	r2, #48	; 0x30
 8008c9a:	2a09      	cmp	r2, #9
 8008c9c:	d903      	bls.n	8008ca6 <_svfiprintf_r+0x196>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0c8      	beq.n	8008c34 <_svfiprintf_r+0x124>
 8008ca2:	9105      	str	r1, [sp, #20]
 8008ca4:	e7c6      	b.n	8008c34 <_svfiprintf_r+0x124>
 8008ca6:	fb05 2101 	mla	r1, r5, r1, r2
 8008caa:	2301      	movs	r3, #1
 8008cac:	4607      	mov	r7, r0
 8008cae:	e7f0      	b.n	8008c92 <_svfiprintf_r+0x182>
 8008cb0:	ab03      	add	r3, sp, #12
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <_svfiprintf_r+0x1ec>)
 8008cb8:	a904      	add	r1, sp, #16
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f7fe f8f0 	bl	8006ea0 <_printf_float>
 8008cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cc4:	4681      	mov	r9, r0
 8008cc6:	d1d6      	bne.n	8008c76 <_svfiprintf_r+0x166>
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	065b      	lsls	r3, r3, #25
 8008ccc:	f53f af35 	bmi.w	8008b3a <_svfiprintf_r+0x2a>
 8008cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd2:	b01d      	add	sp, #116	; 0x74
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd8:	ab03      	add	r3, sp, #12
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <_svfiprintf_r+0x1ec>)
 8008ce0:	a904      	add	r1, sp, #16
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	f7fe fb92 	bl	800740c <_printf_i>
 8008ce8:	e7ea      	b.n	8008cc0 <_svfiprintf_r+0x1b0>
 8008cea:	bf00      	nop
 8008cec:	08009134 	.word	0x08009134
 8008cf0:	0800913a 	.word	0x0800913a
 8008cf4:	0800913e 	.word	0x0800913e
 8008cf8:	08006ea1 	.word	0x08006ea1
 8008cfc:	08008a5d 	.word	0x08008a5d

08008d00 <_sbrk_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4c06      	ldr	r4, [pc, #24]	; (8008d1c <_sbrk_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4605      	mov	r5, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	f7f8 f950 	bl	8000fb0 <_sbrk>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_sbrk_r+0x1a>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_sbrk_r+0x1a>
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	2000058c 	.word	0x2000058c

08008d20 <__ascii_mbtowc>:
 8008d20:	b082      	sub	sp, #8
 8008d22:	b901      	cbnz	r1, 8008d26 <__ascii_mbtowc+0x6>
 8008d24:	a901      	add	r1, sp, #4
 8008d26:	b142      	cbz	r2, 8008d3a <__ascii_mbtowc+0x1a>
 8008d28:	b14b      	cbz	r3, 8008d3e <__ascii_mbtowc+0x1e>
 8008d2a:	7813      	ldrb	r3, [r2, #0]
 8008d2c:	600b      	str	r3, [r1, #0]
 8008d2e:	7812      	ldrb	r2, [r2, #0]
 8008d30:	1c10      	adds	r0, r2, #0
 8008d32:	bf18      	it	ne
 8008d34:	2001      	movne	r0, #1
 8008d36:	b002      	add	sp, #8
 8008d38:	4770      	bx	lr
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	e7fb      	b.n	8008d36 <__ascii_mbtowc+0x16>
 8008d3e:	f06f 0001 	mvn.w	r0, #1
 8008d42:	e7f8      	b.n	8008d36 <__ascii_mbtowc+0x16>

08008d44 <memmove>:
 8008d44:	4288      	cmp	r0, r1
 8008d46:	b510      	push	{r4, lr}
 8008d48:	eb01 0302 	add.w	r3, r1, r2
 8008d4c:	d807      	bhi.n	8008d5e <memmove+0x1a>
 8008d4e:	1e42      	subs	r2, r0, #1
 8008d50:	4299      	cmp	r1, r3
 8008d52:	d00a      	beq.n	8008d6a <memmove+0x26>
 8008d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d5c:	e7f8      	b.n	8008d50 <memmove+0xc>
 8008d5e:	4283      	cmp	r3, r0
 8008d60:	d9f5      	bls.n	8008d4e <memmove+0xa>
 8008d62:	1881      	adds	r1, r0, r2
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	42d3      	cmn	r3, r2
 8008d68:	d100      	bne.n	8008d6c <memmove+0x28>
 8008d6a:	bd10      	pop	{r4, pc}
 8008d6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d74:	e7f7      	b.n	8008d66 <memmove+0x22>

08008d76 <__malloc_lock>:
 8008d76:	4770      	bx	lr

08008d78 <__malloc_unlock>:
 8008d78:	4770      	bx	lr

08008d7a <_realloc_r>:
 8008d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7c:	4607      	mov	r7, r0
 8008d7e:	4614      	mov	r4, r2
 8008d80:	460e      	mov	r6, r1
 8008d82:	b921      	cbnz	r1, 8008d8e <_realloc_r+0x14>
 8008d84:	4611      	mov	r1, r2
 8008d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d8a:	f7ff be0d 	b.w	80089a8 <_malloc_r>
 8008d8e:	b922      	cbnz	r2, 8008d9a <_realloc_r+0x20>
 8008d90:	f7ff fdbc 	bl	800890c <_free_r>
 8008d94:	4625      	mov	r5, r4
 8008d96:	4628      	mov	r0, r5
 8008d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d9a:	f000 f821 	bl	8008de0 <_malloc_usable_size_r>
 8008d9e:	42a0      	cmp	r0, r4
 8008da0:	d20f      	bcs.n	8008dc2 <_realloc_r+0x48>
 8008da2:	4621      	mov	r1, r4
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff fdff 	bl	80089a8 <_malloc_r>
 8008daa:	4605      	mov	r5, r0
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d0f2      	beq.n	8008d96 <_realloc_r+0x1c>
 8008db0:	4631      	mov	r1, r6
 8008db2:	4622      	mov	r2, r4
 8008db4:	f7ff fab6 	bl	8008324 <memcpy>
 8008db8:	4631      	mov	r1, r6
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f7ff fda6 	bl	800890c <_free_r>
 8008dc0:	e7e9      	b.n	8008d96 <_realloc_r+0x1c>
 8008dc2:	4635      	mov	r5, r6
 8008dc4:	e7e7      	b.n	8008d96 <_realloc_r+0x1c>

08008dc6 <__ascii_wctomb>:
 8008dc6:	b149      	cbz	r1, 8008ddc <__ascii_wctomb+0x16>
 8008dc8:	2aff      	cmp	r2, #255	; 0xff
 8008dca:	bf85      	ittet	hi
 8008dcc:	238a      	movhi	r3, #138	; 0x8a
 8008dce:	6003      	strhi	r3, [r0, #0]
 8008dd0:	700a      	strbls	r2, [r1, #0]
 8008dd2:	f04f 30ff 	movhi.w	r0, #4294967295
 8008dd6:	bf98      	it	ls
 8008dd8:	2001      	movls	r0, #1
 8008dda:	4770      	bx	lr
 8008ddc:	4608      	mov	r0, r1
 8008dde:	4770      	bx	lr

08008de0 <_malloc_usable_size_r>:
 8008de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de4:	1f18      	subs	r0, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bfbc      	itt	lt
 8008dea:	580b      	ldrlt	r3, [r1, r0]
 8008dec:	18c0      	addlt	r0, r0, r3
 8008dee:	4770      	bx	lr

08008df0 <_init>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	bf00      	nop
 8008df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df6:	bc08      	pop	{r3}
 8008df8:	469e      	mov	lr, r3
 8008dfa:	4770      	bx	lr

08008dfc <_fini>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	bf00      	nop
 8008e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e02:	bc08      	pop	{r3}
 8008e04:	469e      	mov	lr, r3
 8008e06:	4770      	bx	lr
